### YamlMime:ManagedReference
items:
- uid: UltraForce.Library.NetStandard.Tools.UFMath
  commentId: T:UltraForce.Library.NetStandard.Tools.UFMath
  id: UFMath
  parent: UltraForce.Library.NetStandard.Tools
  children:
  - UltraForce.Library.NetStandard.Tools.UFMath.ClampAngle(System.Single,System.Single,System.Single)
  - UltraForce.Library.NetStandard.Tools.UFMath.DistanceOnCircle(System.Single,System.Single)
  - UltraForce.Library.NetStandard.Tools.UFMath.Equal(System.Double,System.Double,System.Double)
  - UltraForce.Library.NetStandard.Tools.UFMath.Equal(System.Single,System.Single,System.Single)
  - UltraForce.Library.NetStandard.Tools.UFMath.GetPercentage(System.String)
  - UltraForce.Library.NetStandard.Tools.UFMath.Max``1(``0[])
  - UltraForce.Library.NetStandard.Tools.UFMath.Min``1(``0[])
  - UltraForce.Library.NetStandard.Tools.UFMath.MoveTo(System.Double,System.Double,System.Double)
  - UltraForce.Library.NetStandard.Tools.UFMath.MoveTo(System.Int32,System.Int32,System.Int32)
  - UltraForce.Library.NetStandard.Tools.UFMath.MoveTo(System.Single,System.Single,System.Single)
  - UltraForce.Library.NetStandard.Tools.UFMath.MoveToAngle(System.Single,System.Single,System.Single)
  - UltraForce.Library.NetStandard.Tools.UFMath.NormalizeAngle(System.Single)
  - UltraForce.Library.NetStandard.Tools.UFMath.NormalizeAngleAroundZero(System.Single)
  langs:
  - csharp
  - vb
  name: UFMath
  nameWithType: UFMath
  fullName: UltraForce.Library.NetStandard.Tools.UFMath
  type: Class
  source:
    id: UFMath
    path: D:\projects\ultraforce.com\csharp\NuGetPackages\UltraForce.Library.NetStandard\UltraForce.Library.NetStandard\Tools\UFMath.cs
    startLine: 37
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Tools
  summary: Additional Math support methods.
  example: []
  syntax:
    content: public static class UFMath
    content.vb: Public Module UFMath
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: UltraForce.Library.NetStandard.Tools.UFMath.Max``1(``0[])
  commentId: M:UltraForce.Library.NetStandard.Tools.UFMath.Max``1(``0[])
  id: Max``1(``0[])
  parent: UltraForce.Library.NetStandard.Tools.UFMath
  langs:
  - csharp
  - vb
  name: Max<T>(params T[])
  nameWithType: UFMath.Max<T>(params T[])
  fullName: UltraForce.Library.NetStandard.Tools.UFMath.Max<T>(params T[])
  type: Method
  source:
    id: Max
    path: D:\projects\ultraforce.com\csharp\NuGetPackages\UltraForce.Library.NetStandard\UltraForce.Library.NetStandard\Tools\UFMath.cs
    startLine: 47
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Tools
  summary: Gets the maximum item of a list of items
  example: []
  syntax:
    content: 'public static T Max<T>(params T[] anItems) where T : IComparable'
    parameters:
    - id: anItems
      type: '{T}[]'
      description: one or more item values
    typeParameters:
    - id: T
      description: Type of item
    return:
      type: '{T}'
      description: item with the highest value
    content.vb: Public Shared Function Max(Of T As IComparable)(ParamArray anItems As T()) As T
  overload: UltraForce.Library.NetStandard.Tools.UFMath.Max*
  nameWithType.vb: UFMath.Max(Of T)(ParamArray T())
  fullName.vb: UltraForce.Library.NetStandard.Tools.UFMath.Max(Of T)(ParamArray T())
  name.vb: Max(Of T)(ParamArray T())
- uid: UltraForce.Library.NetStandard.Tools.UFMath.Min``1(``0[])
  commentId: M:UltraForce.Library.NetStandard.Tools.UFMath.Min``1(``0[])
  id: Min``1(``0[])
  parent: UltraForce.Library.NetStandard.Tools.UFMath
  langs:
  - csharp
  - vb
  name: Min<T>(params T[])
  nameWithType: UFMath.Min<T>(params T[])
  fullName: UltraForce.Library.NetStandard.Tools.UFMath.Min<T>(params T[])
  type: Method
  source:
    id: Min
    path: D:\projects\ultraforce.com\csharp\NuGetPackages\UltraForce.Library.NetStandard\UltraForce.Library.NetStandard\Tools\UFMath.cs
    startLine: 70
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Tools
  summary: Gets the minimum item of a list of items
  example: []
  syntax:
    content: 'public static T Min<T>(params T[] anItems) where T : IComparable'
    parameters:
    - id: anItems
      type: '{T}[]'
      description: one or more item values
    typeParameters:
    - id: T
      description: Type of item
    return:
      type: '{T}'
      description: item with the lowest value
    content.vb: Public Shared Function Min(Of T As IComparable)(ParamArray anItems As T()) As T
  overload: UltraForce.Library.NetStandard.Tools.UFMath.Min*
  nameWithType.vb: UFMath.Min(Of T)(ParamArray T())
  fullName.vb: UltraForce.Library.NetStandard.Tools.UFMath.Min(Of T)(ParamArray T())
  name.vb: Min(Of T)(ParamArray T())
- uid: UltraForce.Library.NetStandard.Tools.UFMath.MoveTo(System.Int32,System.Int32,System.Int32)
  commentId: M:UltraForce.Library.NetStandard.Tools.UFMath.MoveTo(System.Int32,System.Int32,System.Int32)
  id: MoveTo(System.Int32,System.Int32,System.Int32)
  parent: UltraForce.Library.NetStandard.Tools.UFMath
  langs:
  - csharp
  - vb
  name: MoveTo(int, int, int)
  nameWithType: UFMath.MoveTo(int, int, int)
  fullName: UltraForce.Library.NetStandard.Tools.UFMath.MoveTo(int, int, int)
  type: Method
  source:
    id: MoveTo
    path: D:\projects\ultraforce.com\csharp\NuGetPackages\UltraForce.Library.NetStandard\UltraForce.Library.NetStandard\Tools\UFMath.cs
    startLine: 98
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Tools
  summary: >-
    Moves a value to a target with certain distance with a certain step

    size.

    <p>

    If the new value surpasses the target, the target is returned.

    </p>
  example: []
  syntax:
    content: public static int MoveTo(int aCurrent, int aTarget, int aStep)
    parameters:
    - id: aCurrent
      type: System.Int32
      description: Current value to update
    - id: aTarget
      type: System.Int32
      description: Target value to reach
    - id: aStep
      type: System.Int32
      description: Size of step
    return:
      type: System.Int32
      description: A value closer or equal to aTarget
    content.vb: Public Shared Function MoveTo(aCurrent As Integer, aTarget As Integer, aStep As Integer) As Integer
  overload: UltraForce.Library.NetStandard.Tools.UFMath.MoveTo*
  nameWithType.vb: UFMath.MoveTo(Integer, Integer, Integer)
  fullName.vb: UltraForce.Library.NetStandard.Tools.UFMath.MoveTo(Integer, Integer, Integer)
  name.vb: MoveTo(Integer, Integer, Integer)
- uid: UltraForce.Library.NetStandard.Tools.UFMath.MoveTo(System.Single,System.Single,System.Single)
  commentId: M:UltraForce.Library.NetStandard.Tools.UFMath.MoveTo(System.Single,System.Single,System.Single)
  id: MoveTo(System.Single,System.Single,System.Single)
  parent: UltraForce.Library.NetStandard.Tools.UFMath
  langs:
  - csharp
  - vb
  name: MoveTo(float, float, float)
  nameWithType: UFMath.MoveTo(float, float, float)
  fullName: UltraForce.Library.NetStandard.Tools.UFMath.MoveTo(float, float, float)
  type: Method
  source:
    id: MoveTo
    path: D:\projects\ultraforce.com\csharp\NuGetPackages\UltraForce.Library.NetStandard\UltraForce.Library.NetStandard\Tools\UFMath.cs
    startLine: 116
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Tools
  summary: >-
    Moves a value to a target with certain distance with a certain step

    size.

    <p>

    If the new value surpasses the target, the target is returned.

    </p>
  example: []
  syntax:
    content: public static float MoveTo(float aCurrent, float aTarget, float aStep)
    parameters:
    - id: aCurrent
      type: System.Single
      description: Current value to update
    - id: aTarget
      type: System.Single
      description: Target value to reach
    - id: aStep
      type: System.Single
      description: Size of step
    return:
      type: System.Single
      description: A value closer or equal to aTarget
    content.vb: Public Shared Function MoveTo(aCurrent As Single, aTarget As Single, aStep As Single) As Single
  overload: UltraForce.Library.NetStandard.Tools.UFMath.MoveTo*
  nameWithType.vb: UFMath.MoveTo(Single, Single, Single)
  fullName.vb: UltraForce.Library.NetStandard.Tools.UFMath.MoveTo(Single, Single, Single)
  name.vb: MoveTo(Single, Single, Single)
- uid: UltraForce.Library.NetStandard.Tools.UFMath.MoveTo(System.Double,System.Double,System.Double)
  commentId: M:UltraForce.Library.NetStandard.Tools.UFMath.MoveTo(System.Double,System.Double,System.Double)
  id: MoveTo(System.Double,System.Double,System.Double)
  parent: UltraForce.Library.NetStandard.Tools.UFMath
  langs:
  - csharp
  - vb
  name: MoveTo(double, double, double)
  nameWithType: UFMath.MoveTo(double, double, double)
  fullName: UltraForce.Library.NetStandard.Tools.UFMath.MoveTo(double, double, double)
  type: Method
  source:
    id: MoveTo
    path: D:\projects\ultraforce.com\csharp\NuGetPackages\UltraForce.Library.NetStandard\UltraForce.Library.NetStandard\Tools\UFMath.cs
    startLine: 134
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Tools
  summary: >-
    Moves a value to a target with certain distance with a certain step

    size.

    <p>

    If the new value surpasses the target, the target is returned.

    </p>
  example: []
  syntax:
    content: public static double MoveTo(double aCurrent, double aTarget, double aStep)
    parameters:
    - id: aCurrent
      type: System.Double
      description: Current value to update
    - id: aTarget
      type: System.Double
      description: Target value to reach
    - id: aStep
      type: System.Double
      description: Size of step
    return:
      type: System.Double
      description: A value closer or equal to aTarget
    content.vb: Public Shared Function MoveTo(aCurrent As Double, aTarget As Double, aStep As Double) As Double
  overload: UltraForce.Library.NetStandard.Tools.UFMath.MoveTo*
  nameWithType.vb: UFMath.MoveTo(Double, Double, Double)
  fullName.vb: UltraForce.Library.NetStandard.Tools.UFMath.MoveTo(Double, Double, Double)
  name.vb: MoveTo(Double, Double, Double)
- uid: UltraForce.Library.NetStandard.Tools.UFMath.NormalizeAngle(System.Single)
  commentId: M:UltraForce.Library.NetStandard.Tools.UFMath.NormalizeAngle(System.Single)
  id: NormalizeAngle(System.Single)
  parent: UltraForce.Library.NetStandard.Tools.UFMath
  langs:
  - csharp
  - vb
  name: NormalizeAngle(float)
  nameWithType: UFMath.NormalizeAngle(float)
  fullName: UltraForce.Library.NetStandard.Tools.UFMath.NormalizeAngle(float)
  type: Method
  source:
    id: NormalizeAngle
    path: D:\projects\ultraforce.com\csharp\NuGetPackages\UltraForce.Library.NetStandard\UltraForce.Library.NetStandard\Tools\UFMath.cs
    startLine: 147
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Tools
  summary: >-
    Normalizes an angle in degrees so that it always is a value between

    0 and 360.
  example: []
  syntax:
    content: public static float NormalizeAngle(float anAngle)
    parameters:
    - id: anAngle
      type: System.Single
      description: Angle to normalize
    return:
      type: System.Single
      description: Normalized angle
    content.vb: Public Shared Function NormalizeAngle(anAngle As Single) As Single
  overload: UltraForce.Library.NetStandard.Tools.UFMath.NormalizeAngle*
  nameWithType.vb: UFMath.NormalizeAngle(Single)
  fullName.vb: UltraForce.Library.NetStandard.Tools.UFMath.NormalizeAngle(Single)
  name.vb: NormalizeAngle(Single)
- uid: UltraForce.Library.NetStandard.Tools.UFMath.NormalizeAngleAroundZero(System.Single)
  commentId: M:UltraForce.Library.NetStandard.Tools.UFMath.NormalizeAngleAroundZero(System.Single)
  id: NormalizeAngleAroundZero(System.Single)
  parent: UltraForce.Library.NetStandard.Tools.UFMath
  langs:
  - csharp
  - vb
  name: NormalizeAngleAroundZero(float)
  nameWithType: UFMath.NormalizeAngleAroundZero(float)
  fullName: UltraForce.Library.NetStandard.Tools.UFMath.NormalizeAngleAroundZero(float)
  type: Method
  source:
    id: NormalizeAngleAroundZero
    path: D:\projects\ultraforce.com\csharp\NuGetPackages\UltraForce.Library.NetStandard\UltraForce.Library.NetStandard\Tools\UFMath.cs
    startLine: 158
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Tools
  summary: Normalizes an angle in degrees so that it always is a value between -180f and 180f
  example: []
  syntax:
    content: public static float NormalizeAngleAroundZero(float anAngle)
    parameters:
    - id: anAngle
      type: System.Single
      description: Angle to normalize
    return:
      type: System.Single
      description: Normalized angle
    content.vb: Public Shared Function NormalizeAngleAroundZero(anAngle As Single) As Single
  overload: UltraForce.Library.NetStandard.Tools.UFMath.NormalizeAngleAroundZero*
  nameWithType.vb: UFMath.NormalizeAngleAroundZero(Single)
  fullName.vb: UltraForce.Library.NetStandard.Tools.UFMath.NormalizeAngleAroundZero(Single)
  name.vb: NormalizeAngleAroundZero(Single)
- uid: UltraForce.Library.NetStandard.Tools.UFMath.MoveToAngle(System.Single,System.Single,System.Single)
  commentId: M:UltraForce.Library.NetStandard.Tools.UFMath.MoveToAngle(System.Single,System.Single,System.Single)
  id: MoveToAngle(System.Single,System.Single,System.Single)
  parent: UltraForce.Library.NetStandard.Tools.UFMath
  langs:
  - csharp
  - vb
  name: MoveToAngle(float, float, float)
  nameWithType: UFMath.MoveToAngle(float, float, float)
  fullName: UltraForce.Library.NetStandard.Tools.UFMath.MoveToAngle(float, float, float)
  type: Method
  source:
    id: MoveToAngle
    path: D:\projects\ultraforce.com\csharp\NuGetPackages\UltraForce.Library.NetStandard\UltraForce.Library.NetStandard\Tools\UFMath.cs
    startLine: 172
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Tools
  summary: >-
    Move towards an angle over a circle using the shortest distance to

    move over.
  example: []
  syntax:
    content: public static float MoveToAngle(float aCurrent, float aTarget, float aStep)
    parameters:
    - id: aCurrent
      type: System.Single
      description: Current angle to update
    - id: aTarget
      type: System.Single
      description: Target angle to reach
    - id: aStep
      type: System.Single
      description: Distance to move with
    return:
      type: System.Single
      description: Normalized angle closer or equal to aTarget.
    content.vb: Public Shared Function MoveToAngle(aCurrent As Single, aTarget As Single, aStep As Single) As Single
  overload: UltraForce.Library.NetStandard.Tools.UFMath.MoveToAngle*
  nameWithType.vb: UFMath.MoveToAngle(Single, Single, Single)
  fullName.vb: UltraForce.Library.NetStandard.Tools.UFMath.MoveToAngle(Single, Single, Single)
  name.vb: MoveToAngle(Single, Single, Single)
- uid: UltraForce.Library.NetStandard.Tools.UFMath.DistanceOnCircle(System.Single,System.Single)
  commentId: M:UltraForce.Library.NetStandard.Tools.UFMath.DistanceOnCircle(System.Single,System.Single)
  id: DistanceOnCircle(System.Single,System.Single)
  parent: UltraForce.Library.NetStandard.Tools.UFMath
  langs:
  - csharp
  - vb
  name: DistanceOnCircle(float, float)
  nameWithType: UFMath.DistanceOnCircle(float, float)
  fullName: UltraForce.Library.NetStandard.Tools.UFMath.DistanceOnCircle(float, float)
  type: Method
  source:
    id: DistanceOnCircle
    path: D:\projects\ultraforce.com\csharp\NuGetPackages\UltraForce.Library.NetStandard\UltraForce.Library.NetStandard\Tools\UFMath.cs
    startLine: 203
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Tools
  summary: >-
    Calculates the smallest distance to travel on a circle between two

    angles.
  example: []
  syntax:
    content: public static float DistanceOnCircle(float aStartAngle, float anEndAngle)
    parameters:
    - id: aStartAngle
      type: System.Single
      description: Starting angle
    - id: anEndAngle
      type: System.Single
      description: Ending angle
    return:
      type: System.Single
      description: >-
        Nearest distance, when traveling clockwise it will be positive. When

        traveling counter clock wise the value will be negative.
    content.vb: Public Shared Function DistanceOnCircle(aStartAngle As Single, anEndAngle As Single) As Single
  overload: UltraForce.Library.NetStandard.Tools.UFMath.DistanceOnCircle*
  nameWithType.vb: UFMath.DistanceOnCircle(Single, Single)
  fullName.vb: UltraForce.Library.NetStandard.Tools.UFMath.DistanceOnCircle(Single, Single)
  name.vb: DistanceOnCircle(Single, Single)
- uid: UltraForce.Library.NetStandard.Tools.UFMath.ClampAngle(System.Single,System.Single,System.Single)
  commentId: M:UltraForce.Library.NetStandard.Tools.UFMath.ClampAngle(System.Single,System.Single,System.Single)
  id: ClampAngle(System.Single,System.Single,System.Single)
  parent: UltraForce.Library.NetStandard.Tools.UFMath
  langs:
  - csharp
  - vb
  name: ClampAngle(float, float, float)
  nameWithType: UFMath.ClampAngle(float, float, float)
  fullName: UltraForce.Library.NetStandard.Tools.UFMath.ClampAngle(float, float, float)
  type: Method
  source:
    id: ClampAngle
    path: D:\projects\ultraforce.com\csharp\NuGetPackages\UltraForce.Library.NetStandard\UltraForce.Library.NetStandard\Tools\UFMath.cs
    startLine: 227
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Tools
  summary: >-
    Clamps an angle within a min and max angle range. The angles are

    normalized via <xref href="UltraForce.Library.NetStandard.Tools.UFMath.NormalizeAngle(System.Single)" data-throw-if-not-resolved="false"></xref> .
  example: []
  syntax:
    content: public static float ClampAngle(float aValue, float aMinAngle, float aMaxAngle)
    parameters:
    - id: aValue
      type: System.Single
      description: Value to limit
    - id: aMinAngle
      type: System.Single
      description: Minimum angle allowed
    - id: aMaxAngle
      type: System.Single
      description: Maximum angle allowed
    return:
      type: System.Single
      description: angle within within min and max range
    content.vb: Public Shared Function ClampAngle(aValue As Single, aMinAngle As Single, aMaxAngle As Single) As Single
  overload: UltraForce.Library.NetStandard.Tools.UFMath.ClampAngle*
  nameWithType.vb: UFMath.ClampAngle(Single, Single, Single)
  fullName.vb: UltraForce.Library.NetStandard.Tools.UFMath.ClampAngle(Single, Single, Single)
  name.vb: ClampAngle(Single, Single, Single)
- uid: UltraForce.Library.NetStandard.Tools.UFMath.Equal(System.Double,System.Double,System.Double)
  commentId: M:UltraForce.Library.NetStandard.Tools.UFMath.Equal(System.Double,System.Double,System.Double)
  id: Equal(System.Double,System.Double,System.Double)
  parent: UltraForce.Library.NetStandard.Tools.UFMath
  langs:
  - csharp
  - vb
  name: Equal(double, double, double)
  nameWithType: UFMath.Equal(double, double, double)
  fullName: UltraForce.Library.NetStandard.Tools.UFMath.Equal(double, double, double)
  type: Method
  source:
    id: Equal
    path: D:\projects\ultraforce.com\csharp\NuGetPackages\UltraForce.Library.NetStandard\UltraForce.Library.NetStandard\Tools\UFMath.cs
    startLine: 268
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Tools
  summary: Checks if two double are equal when their difference is less then a certain value.
  example: []
  syntax:
    content: public static bool Equal(double aValue0, double aValue1, double aMaxDelta = 0.001)
    parameters:
    - id: aValue0
      type: System.Double
      description: First value to compare
    - id: aValue1
      type: System.Double
      description: Second value to compare
    - id: aMaxDelta
      type: System.Double
      description: Max difference between values to be considered equal
    return:
      type: System.Boolean
      description: True if the difference between the two values is equal or less then specified maximum difference
    content.vb: Public Shared Function Equal(aValue0 As Double, aValue1 As Double, aMaxDelta As Double = 0.001) As Boolean
  overload: UltraForce.Library.NetStandard.Tools.UFMath.Equal*
  nameWithType.vb: UFMath.Equal(Double, Double, Double)
  fullName.vb: UltraForce.Library.NetStandard.Tools.UFMath.Equal(Double, Double, Double)
  name.vb: Equal(Double, Double, Double)
- uid: UltraForce.Library.NetStandard.Tools.UFMath.Equal(System.Single,System.Single,System.Single)
  commentId: M:UltraForce.Library.NetStandard.Tools.UFMath.Equal(System.Single,System.Single,System.Single)
  id: Equal(System.Single,System.Single,System.Single)
  parent: UltraForce.Library.NetStandard.Tools.UFMath
  langs:
  - csharp
  - vb
  name: Equal(float, float, float)
  nameWithType: UFMath.Equal(float, float, float)
  fullName: UltraForce.Library.NetStandard.Tools.UFMath.Equal(float, float, float)
  type: Method
  source:
    id: Equal
    path: D:\projects\ultraforce.com\csharp\NuGetPackages\UltraForce.Library.NetStandard\UltraForce.Library.NetStandard\Tools\UFMath.cs
    startLine: 282
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Tools
  summary: Checks if two double are equal when their difference is less then a certain value.
  example: []
  syntax:
    content: public static bool Equal(float aValue0, float aValue1, float aMaxDelta = 0.001)
    parameters:
    - id: aValue0
      type: System.Single
      description: First value to compare
    - id: aValue1
      type: System.Single
      description: Second value to compare
    - id: aMaxDelta
      type: System.Single
      description: Max difference between values to be considered equal
    return:
      type: System.Boolean
      description: True if the difference between the two values is equal or less then specified maximum difference
    content.vb: Public Shared Function Equal(aValue0 As Single, aValue1 As Single, aMaxDelta As Single = 0.001) As Boolean
  overload: UltraForce.Library.NetStandard.Tools.UFMath.Equal*
  nameWithType.vb: UFMath.Equal(Single, Single, Single)
  fullName.vb: UltraForce.Library.NetStandard.Tools.UFMath.Equal(Single, Single, Single)
  name.vb: Equal(Single, Single, Single)
- uid: UltraForce.Library.NetStandard.Tools.UFMath.GetPercentage(System.String)
  commentId: M:UltraForce.Library.NetStandard.Tools.UFMath.GetPercentage(System.String)
  id: GetPercentage(System.String)
  parent: UltraForce.Library.NetStandard.Tools.UFMath
  langs:
  - csharp
  - vb
  name: GetPercentage(string)
  nameWithType: UFMath.GetPercentage(string)
  fullName: UltraForce.Library.NetStandard.Tools.UFMath.GetPercentage(string)
  type: Method
  source:
    id: GetPercentage
    path: D:\projects\ultraforce.com\csharp\NuGetPackages\UltraForce.Library.NetStandard\UltraForce.Library.NetStandard\Tools\UFMath.cs
    startLine: 292
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Tools
  summary: Gets the percentage value from a value that contains a % (either %xxx.xx or xxx.xx%)
  example: []
  syntax:
    content: public static float GetPercentage(string aValue)
    parameters:
    - id: aValue
      type: System.String
      description: Value to get percentage from
    return:
      type: System.Single
      description: Percentage or 0.0f if no '%' was found or value without '%' is an invalid number
    content.vb: Public Shared Function GetPercentage(aValue As String) As Single
  overload: UltraForce.Library.NetStandard.Tools.UFMath.GetPercentage*
  nameWithType.vb: UFMath.GetPercentage(String)
  fullName.vb: UltraForce.Library.NetStandard.Tools.UFMath.GetPercentage(String)
  name.vb: GetPercentage(String)
references:
- uid: UltraForce.Library.NetStandard.Tools
  commentId: N:UltraForce.Library.NetStandard.Tools
  href: UltraForce.html
  name: UltraForce.Library.NetStandard.Tools
  nameWithType: UltraForce.Library.NetStandard.Tools
  fullName: UltraForce.Library.NetStandard.Tools
  spec.csharp:
  - uid: UltraForce
    name: UltraForce
    href: UltraForce.html
  - name: .
  - uid: UltraForce.Library
    name: Library
    href: UltraForce.Library.html
  - name: .
  - uid: UltraForce.Library.NetStandard
    name: NetStandard
    href: UltraForce.Library.NetStandard.html
  - name: .
  - uid: UltraForce.Library.NetStandard.Tools
    name: Tools
    href: UltraForce.Library.NetStandard.Tools.html
  spec.vb:
  - uid: UltraForce
    name: UltraForce
    href: UltraForce.html
  - name: .
  - uid: UltraForce.Library
    name: Library
    href: UltraForce.Library.html
  - name: .
  - uid: UltraForce.Library.NetStandard
    name: NetStandard
    href: UltraForce.Library.NetStandard.html
  - name: .
  - uid: UltraForce.Library.NetStandard.Tools
    name: Tools
    href: UltraForce.Library.NetStandard.Tools.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: UltraForce.Library.NetStandard.Tools.UFMath.Max*
  commentId: Overload:UltraForce.Library.NetStandard.Tools.UFMath.Max
  href: UltraForce.Library.NetStandard.Tools.UFMath.html#UltraForce_Library_NetStandard_Tools_UFMath_Max__1___0___
  name: Max
  nameWithType: UFMath.Max
  fullName: UltraForce.Library.NetStandard.Tools.UFMath.Max
- uid: '{T}[]'
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  nameWithType.vb: T()
  fullName.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
  - name: '['
  - name: ']'
  spec.vb:
  - name: T
  - name: (
  - name: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: UltraForce.Library.NetStandard.Tools.UFMath.Min*
  commentId: Overload:UltraForce.Library.NetStandard.Tools.UFMath.Min
  href: UltraForce.Library.NetStandard.Tools.UFMath.html#UltraForce_Library_NetStandard_Tools_UFMath_Min__1___0___
  name: Min
  nameWithType: UFMath.Min
  fullName: UltraForce.Library.NetStandard.Tools.UFMath.Min
- uid: UltraForce.Library.NetStandard.Tools.UFMath.MoveTo*
  commentId: Overload:UltraForce.Library.NetStandard.Tools.UFMath.MoveTo
  href: UltraForce.Library.NetStandard.Tools.UFMath.html#UltraForce_Library_NetStandard_Tools_UFMath_MoveTo_System_Int32_System_Int32_System_Int32_
  name: MoveTo
  nameWithType: UFMath.MoveTo
  fullName: UltraForce.Library.NetStandard.Tools.UFMath.MoveTo
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.double
  name: double
  nameWithType: double
  fullName: double
  nameWithType.vb: Double
  fullName.vb: Double
  name.vb: Double
- uid: UltraForce.Library.NetStandard.Tools.UFMath.NormalizeAngle*
  commentId: Overload:UltraForce.Library.NetStandard.Tools.UFMath.NormalizeAngle
  href: UltraForce.Library.NetStandard.Tools.UFMath.html#UltraForce_Library_NetStandard_Tools_UFMath_NormalizeAngle_System_Single_
  name: NormalizeAngle
  nameWithType: UFMath.NormalizeAngle
  fullName: UltraForce.Library.NetStandard.Tools.UFMath.NormalizeAngle
- uid: UltraForce.Library.NetStandard.Tools.UFMath.NormalizeAngleAroundZero*
  commentId: Overload:UltraForce.Library.NetStandard.Tools.UFMath.NormalizeAngleAroundZero
  href: UltraForce.Library.NetStandard.Tools.UFMath.html#UltraForce_Library_NetStandard_Tools_UFMath_NormalizeAngleAroundZero_System_Single_
  name: NormalizeAngleAroundZero
  nameWithType: UFMath.NormalizeAngleAroundZero
  fullName: UltraForce.Library.NetStandard.Tools.UFMath.NormalizeAngleAroundZero
- uid: UltraForce.Library.NetStandard.Tools.UFMath.MoveToAngle*
  commentId: Overload:UltraForce.Library.NetStandard.Tools.UFMath.MoveToAngle
  href: UltraForce.Library.NetStandard.Tools.UFMath.html#UltraForce_Library_NetStandard_Tools_UFMath_MoveToAngle_System_Single_System_Single_System_Single_
  name: MoveToAngle
  nameWithType: UFMath.MoveToAngle
  fullName: UltraForce.Library.NetStandard.Tools.UFMath.MoveToAngle
- uid: UltraForce.Library.NetStandard.Tools.UFMath.DistanceOnCircle*
  commentId: Overload:UltraForce.Library.NetStandard.Tools.UFMath.DistanceOnCircle
  href: UltraForce.Library.NetStandard.Tools.UFMath.html#UltraForce_Library_NetStandard_Tools_UFMath_DistanceOnCircle_System_Single_System_Single_
  name: DistanceOnCircle
  nameWithType: UFMath.DistanceOnCircle
  fullName: UltraForce.Library.NetStandard.Tools.UFMath.DistanceOnCircle
- uid: UltraForce.Library.NetStandard.Tools.UFMath.NormalizeAngle(System.Single)
  commentId: M:UltraForce.Library.NetStandard.Tools.UFMath.NormalizeAngle(System.Single)
  isExternal: true
  href: UltraForce.Library.NetStandard.Tools.UFMath.html#UltraForce_Library_NetStandard_Tools_UFMath_NormalizeAngle_System_Single_
  name: NormalizeAngle(float)
  nameWithType: UFMath.NormalizeAngle(float)
  fullName: UltraForce.Library.NetStandard.Tools.UFMath.NormalizeAngle(float)
  nameWithType.vb: UFMath.NormalizeAngle(Single)
  fullName.vb: UltraForce.Library.NetStandard.Tools.UFMath.NormalizeAngle(Single)
  name.vb: NormalizeAngle(Single)
  spec.csharp:
  - uid: UltraForce.Library.NetStandard.Tools.UFMath.NormalizeAngle(System.Single)
    name: NormalizeAngle
    href: UltraForce.Library.NetStandard.Tools.UFMath.html#UltraForce_Library_NetStandard_Tools_UFMath_NormalizeAngle_System_Single_
  - name: (
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
  spec.vb:
  - uid: UltraForce.Library.NetStandard.Tools.UFMath.NormalizeAngle(System.Single)
    name: NormalizeAngle
    href: UltraForce.Library.NetStandard.Tools.UFMath.html#UltraForce_Library_NetStandard_Tools_UFMath_NormalizeAngle_System_Single_
  - name: (
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
- uid: UltraForce.Library.NetStandard.Tools.UFMath.ClampAngle*
  commentId: Overload:UltraForce.Library.NetStandard.Tools.UFMath.ClampAngle
  href: UltraForce.Library.NetStandard.Tools.UFMath.html#UltraForce_Library_NetStandard_Tools_UFMath_ClampAngle_System_Single_System_Single_System_Single_
  name: ClampAngle
  nameWithType: UFMath.ClampAngle
  fullName: UltraForce.Library.NetStandard.Tools.UFMath.ClampAngle
- uid: UltraForce.Library.NetStandard.Tools.UFMath.Equal*
  commentId: Overload:UltraForce.Library.NetStandard.Tools.UFMath.Equal
  href: UltraForce.Library.NetStandard.Tools.UFMath.html#UltraForce_Library_NetStandard_Tools_UFMath_Equal_System_Double_System_Double_System_Double_
  name: Equal
  nameWithType: UFMath.Equal
  fullName: UltraForce.Library.NetStandard.Tools.UFMath.Equal
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: UltraForce.Library.NetStandard.Tools.UFMath.GetPercentage*
  commentId: Overload:UltraForce.Library.NetStandard.Tools.UFMath.GetPercentage
  href: UltraForce.Library.NetStandard.Tools.UFMath.html#UltraForce_Library_NetStandard_Tools_UFMath_GetPercentage_System_String_
  name: GetPercentage
  nameWithType: UFMath.GetPercentage
  fullName: UltraForce.Library.NetStandard.Tools.UFMath.GetPercentage
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
