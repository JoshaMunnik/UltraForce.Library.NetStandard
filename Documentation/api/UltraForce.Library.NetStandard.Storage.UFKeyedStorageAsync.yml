### YamlMime:ManagedReference
items:
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync
  commentId: T:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync
  id: UFKeyedStorageAsync
  parent: UltraForce.Library.NetStandard.Storage
  children:
  - UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.#ctor
  - UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.DeleteAllAsync
  - UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.DeleteKeyAsync(System.String)
  - UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.DeserializeObjectAsync(System.String,System.Type)
  - UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetBoolAsync(System.String)
  - UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetBoolAsync(System.String,System.Boolean)
  - UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetByteAsync(System.String)
  - UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetByteAsync(System.String,System.Byte)
  - UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetBytesAsync(System.String)
  - UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetBytesAsync(System.String,System.Byte[])
  - UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetCharAsync(System.String)
  - UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetCharAsync(System.String,System.Char)
  - UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetDateTimeAsync(System.String)
  - UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetDateTimeAsync(System.String,System.DateTime)
  - UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetDoubleAsync(System.String)
  - UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetDoubleAsync(System.String,System.Double)
  - UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetFloatAsync(System.String)
  - UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetFloatAsync(System.String,System.Single)
  - UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetGuidAsync(System.String)
  - UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetGuidAsync(System.String,System.Guid)
  - UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetIntAsync(System.String)
  - UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetIntAsync(System.String,System.Int32)
  - UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetLongAsync(System.String)
  - UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetLongAsync(System.String,System.Int64)
  - UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetObjectAsync(System.String,System.Type)
  - UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetObjectAsync``1(System.String)
  - UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetSByteAsync(System.String)
  - UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetSByteAsync(System.String,System.SByte)
  - UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetShortAsync(System.String)
  - UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetShortAsync(System.String,System.Int16)
  - UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetStorableObjectAsync(System.String,UltraForce.Library.NetStandard.Storage.IUFStorableObject)
  - UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetStringAsync(System.String)
  - UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetStringAsync(System.String,System.String)
  - UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetUIntAsync(System.String)
  - UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetUIntAsync(System.String,System.UInt32)
  - UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetULongAsync(System.String)
  - UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetULongAsync(System.String,System.UInt64)
  - UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetUShortAsync(System.String)
  - UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetUShortAsync(System.String,System.UInt16)
  - UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.HasKeyAsync(System.String)
  - UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SerializeObjectAsync(System.String,System.Object)
  - UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetBoolAsync(System.String,System.Boolean)
  - UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetByteAsync(System.String,System.Byte)
  - UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetBytesAsync(System.String,System.Byte[])
  - UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetCharAsync(System.String,System.Char)
  - UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetDateTimeAsync(System.String,System.DateTime)
  - UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetDoubleAsync(System.String,System.Double)
  - UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetFloatAsync(System.String,System.Single)
  - UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetGuidAsync(System.String,System.Guid)
  - UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetIntAsync(System.String,System.Int32)
  - UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetLongAsync(System.String,System.Int64)
  - UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetObjectAsync(System.String,System.Object)
  - UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetObjectAsync(System.String,System.Object,System.Type)
  - UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetObjectAsync``1(System.String,``0)
  - UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetSByteAsync(System.String,System.SByte)
  - UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetShortAsync(System.String,System.Int16)
  - UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetStorableObjectAsync(System.String,UltraForce.Library.NetStandard.Storage.IUFStorableObject)
  - UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetStringAsync(System.String,System.String)
  - UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetUIntAsync(System.String,System.UInt32)
  - UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetULongAsync(System.String,System.UInt64)
  - UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetUShortAsync(System.String,System.UInt16)
  langs:
  - csharp
  - vb
  name: UFKeyedStorageAsync
  nameWithType: UFKeyedStorageAsync
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync
  type: Class
  source:
    remote:
      path: UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: UFKeyedStorageAsync
    path: ../UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
    startLine: 60
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Storage
  summary: >-
    <xref href="UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync" data-throw-if-not-resolved="false"></xref> is a base class for storage classes

    that store different type of values using unique keys.
  remarks: It is a async version of <xref href="UltraForce.Library.NetStandard.Storage.UFKeyedStorage" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public abstract class UFKeyedStorageAsync
    content.vb: Public MustInherit Class UFKeyedStorageAsync
  inheritance:
  - System.Object
  derivedClasses:
  - UltraForce.Library.NetStandard.Storage.UFCachedStorageAsync
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.#ctor
  commentId: M:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.#ctor
  id: '#ctor'
  parent: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync
  langs:
  - csharp
  - vb
  name: UFKeyedStorageAsync()
  nameWithType: UFKeyedStorageAsync.UFKeyedStorageAsync()
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.UFKeyedStorageAsync()
  type: Constructor
  source:
    remote:
      path: UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: .ctor
    path: ../UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
    startLine: 68
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Storage
  summary: Constructs an instance of <xref href="UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync" data-throw-if-not-resolved="false"></xref>
  example: []
  syntax:
    content: protected UFKeyedStorageAsync()
    content.vb: Protected Sub New()
  overload: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.#ctor*
  nameWithType.vb: UFKeyedStorageAsync.New()
  fullName.vb: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.New()
  name.vb: New()
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetStringAsync(System.String,System.String)
  commentId: M:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetStringAsync(System.String,System.String)
  id: GetStringAsync(System.String,System.String)
  parent: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync
  langs:
  - csharp
  - vb
  name: GetStringAsync(string, string)
  nameWithType: UFKeyedStorageAsync.GetStringAsync(string, string)
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetStringAsync(string, string)
  type: Method
  source:
    remote:
      path: UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: GetStringAsync
    path: ../UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
    startLine: 84
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Storage
  summary: Gets a string.
  example: []
  syntax:
    content: public abstract Task<string> GetStringAsync(string aKey, string aDefault)
    parameters:
    - id: aKey
      type: System.String
      description: A key to get the string for.
    - id: aDefault
      type: System.String
      description: A default value to use when there is no string stored for the key.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: The stored string or aDefault.
    content.vb: Public MustOverride Function GetStringAsync(aKey As String, aDefault As String) As Task(Of String)
  overload: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetStringAsync*
  nameWithType.vb: UFKeyedStorageAsync.GetStringAsync(String, String)
  fullName.vb: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetStringAsync(String, String)
  name.vb: GetStringAsync(String, String)
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetStringAsync(System.String)
  commentId: M:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetStringAsync(System.String)
  id: GetStringAsync(System.String)
  parent: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync
  langs:
  - csharp
  - vb
  name: GetStringAsync(string)
  nameWithType: UFKeyedStorageAsync.GetStringAsync(string)
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetStringAsync(string)
  type: Method
  source:
    remote:
      path: UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: GetStringAsync
    path: ../UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
    startLine: 91
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Storage
  summary: Gets a string.
  example: []
  syntax:
    content: public Task<string> GetStringAsync(string aKey)
    parameters:
    - id: aKey
      type: System.String
      description: A key to get the string for.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: The stored string or "" if none could be found.
    content.vb: Public Function GetStringAsync(aKey As String) As Task(Of String)
  overload: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetStringAsync*
  nameWithType.vb: UFKeyedStorageAsync.GetStringAsync(String)
  fullName.vb: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetStringAsync(String)
  name.vb: GetStringAsync(String)
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetStringAsync(System.String,System.String)
  commentId: M:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetStringAsync(System.String,System.String)
  id: SetStringAsync(System.String,System.String)
  parent: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync
  langs:
  - csharp
  - vb
  name: SetStringAsync(string, string)
  nameWithType: UFKeyedStorageAsync.SetStringAsync(string, string)
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetStringAsync(string, string)
  type: Method
  source:
    remote:
      path: UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: SetStringAsync
    path: ../UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
    startLine: 101
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Storage
  summary: Stores a string in the storage.
  example: []
  syntax:
    content: public abstract Task SetStringAsync(string aKey, string aValue)
    parameters:
    - id: aKey
      type: System.String
      description: Key to store value for.
    - id: aValue
      type: System.String
      description: A value to store.
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public MustOverride Function SetStringAsync(aKey As String, aValue As String) As Task
  overload: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetStringAsync*
  nameWithType.vb: UFKeyedStorageAsync.SetStringAsync(String, String)
  fullName.vb: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetStringAsync(String, String)
  name.vb: SetStringAsync(String, String)
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetByteAsync(System.String,System.Byte)
  commentId: M:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetByteAsync(System.String,System.Byte)
  id: GetByteAsync(System.String,System.Byte)
  parent: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync
  langs:
  - csharp
  - vb
  name: GetByteAsync(string, byte)
  nameWithType: UFKeyedStorageAsync.GetByteAsync(string, byte)
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetByteAsync(string, byte)
  type: Method
  source:
    remote:
      path: UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: GetByteAsync
    path: ../UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
    startLine: 114
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Storage
  summary: >-
    Gets a byte.

    <p>

    The default implementation calls <xref href="UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetIntAsync(System.String)" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public virtual Task<byte> GetByteAsync(string aKey, byte aDefault)
    parameters:
    - id: aKey
      type: System.String
      description: A key to get the byte for.
    - id: aDefault
      type: System.Byte
      description: A default value to use when there is no byte stored for the key.
    return:
      type: System.Threading.Tasks.Task{System.Byte}
      description: The stored byte or aDefault.
    content.vb: Public Overridable Function GetByteAsync(aKey As String, aDefault As Byte) As Task(Of Byte)
  overload: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetByteAsync*
  nameWithType.vb: UFKeyedStorageAsync.GetByteAsync(String, Byte)
  fullName.vb: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetByteAsync(String, Byte)
  name.vb: GetByteAsync(String, Byte)
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetByteAsync(System.String)
  commentId: M:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetByteAsync(System.String)
  id: GetByteAsync(System.String)
  parent: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync
  langs:
  - csharp
  - vb
  name: GetByteAsync(string)
  nameWithType: UFKeyedStorageAsync.GetByteAsync(string)
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetByteAsync(string)
  type: Method
  source:
    remote:
      path: UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: GetByteAsync
    path: ../UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
    startLine: 128
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Storage
  summary: Gets a byte.
  example: []
  syntax:
    content: public Task<byte> GetByteAsync(string aKey)
    parameters:
    - id: aKey
      type: System.String
      description: A key to get the byte for.
    return:
      type: System.Threading.Tasks.Task{System.Byte}
      description: The stored byte or 0 if none could be found.
    content.vb: Public Function GetByteAsync(aKey As String) As Task(Of Byte)
  overload: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetByteAsync*
  nameWithType.vb: UFKeyedStorageAsync.GetByteAsync(String)
  fullName.vb: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetByteAsync(String)
  name.vb: GetByteAsync(String)
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetByteAsync(System.String,System.Byte)
  commentId: M:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetByteAsync(System.String,System.Byte)
  id: SetByteAsync(System.String,System.Byte)
  parent: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync
  langs:
  - csharp
  - vb
  name: SetByteAsync(string, byte)
  nameWithType: UFKeyedStorageAsync.SetByteAsync(string, byte)
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetByteAsync(string, byte)
  type: Method
  source:
    remote:
      path: UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: SetByteAsync
    path: ../UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
    startLine: 145
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Storage
  summary: >-
    Stores a byte in the storage.

    <p>

    The default implementation calls <xref href="UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetIntAsync(System.String%2cSystem.Int32)" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public virtual Task SetByteAsync(string aKey, byte aValue)
    parameters:
    - id: aKey
      type: System.String
      description: Key to store value for.
    - id: aValue
      type: System.Byte
      description: A value to store.
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Overridable Function SetByteAsync(aKey As String, aValue As Byte) As Task
  overload: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetByteAsync*
  nameWithType.vb: UFKeyedStorageAsync.SetByteAsync(String, Byte)
  fullName.vb: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetByteAsync(String, Byte)
  name.vb: SetByteAsync(String, Byte)
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetSByteAsync(System.String,System.SByte)
  commentId: M:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetSByteAsync(System.String,System.SByte)
  id: GetSByteAsync(System.String,System.SByte)
  parent: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync
  langs:
  - csharp
  - vb
  name: GetSByteAsync(string, sbyte)
  nameWithType: UFKeyedStorageAsync.GetSByteAsync(string, sbyte)
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetSByteAsync(string, sbyte)
  type: Method
  source:
    remote:
      path: UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: GetSByteAsync
    path: ../UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
    startLine: 165
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Storage
  summary: >-
    Gets a sbyte.

    <p>

    The default implementation calls <xref href="UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetIntAsync(System.String)" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public virtual Task<sbyte> GetSByteAsync(string aKey, sbyte aDefault)
    parameters:
    - id: aKey
      type: System.String
      description: A key to get the sbyte for.
    - id: aDefault
      type: System.SByte
      description: A default value to use when there is no sbyte stored for the key.
    return:
      type: System.Threading.Tasks.Task{System.SByte}
      description: The stored sbyte or aDefault.
    content.vb: Public Overridable Function GetSByteAsync(aKey As String, aDefault As SByte) As Task(Of SByte)
  overload: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetSByteAsync*
  nameWithType.vb: UFKeyedStorageAsync.GetSByteAsync(String, SByte)
  fullName.vb: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetSByteAsync(String, SByte)
  name.vb: GetSByteAsync(String, SByte)
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetSByteAsync(System.String)
  commentId: M:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetSByteAsync(System.String)
  id: GetSByteAsync(System.String)
  parent: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync
  langs:
  - csharp
  - vb
  name: GetSByteAsync(string)
  nameWithType: UFKeyedStorageAsync.GetSByteAsync(string)
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetSByteAsync(string)
  type: Method
  source:
    remote:
      path: UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: GetSByteAsync
    path: ../UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
    startLine: 179
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Storage
  summary: Gets a sbyte.
  example: []
  syntax:
    content: public Task<sbyte> GetSByteAsync(string aKey)
    parameters:
    - id: aKey
      type: System.String
      description: A key to get the sbyte for.
    return:
      type: System.Threading.Tasks.Task{System.SByte}
      description: The stored sbyte or 0 if none could be found.
    content.vb: Public Function GetSByteAsync(aKey As String) As Task(Of SByte)
  overload: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetSByteAsync*
  nameWithType.vb: UFKeyedStorageAsync.GetSByteAsync(String)
  fullName.vb: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetSByteAsync(String)
  name.vb: GetSByteAsync(String)
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetSByteAsync(System.String,System.SByte)
  commentId: M:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetSByteAsync(System.String,System.SByte)
  id: SetSByteAsync(System.String,System.SByte)
  parent: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync
  langs:
  - csharp
  - vb
  name: SetSByteAsync(string, sbyte)
  nameWithType: UFKeyedStorageAsync.SetSByteAsync(string, sbyte)
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetSByteAsync(string, sbyte)
  type: Method
  source:
    remote:
      path: UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: SetSByteAsync
    path: ../UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
    startLine: 196
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Storage
  summary: >-
    Stores a sbyte in the storage.

    <p>

    The default implementation calls <xref href="UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetIntAsync(System.String%2cSystem.Int32)" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public virtual Task SetSByteAsync(string aKey, sbyte aValue)
    parameters:
    - id: aKey
      type: System.String
      description: Key to store value for.
    - id: aValue
      type: System.SByte
      description: A value to store.
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Overridable Function SetSByteAsync(aKey As String, aValue As SByte) As Task
  overload: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetSByteAsync*
  nameWithType.vb: UFKeyedStorageAsync.SetSByteAsync(String, SByte)
  fullName.vb: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetSByteAsync(String, SByte)
  name.vb: SetSByteAsync(String, SByte)
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetShortAsync(System.String,System.Int16)
  commentId: M:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetShortAsync(System.String,System.Int16)
  id: GetShortAsync(System.String,System.Int16)
  parent: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync
  langs:
  - csharp
  - vb
  name: GetShortAsync(string, short)
  nameWithType: UFKeyedStorageAsync.GetShortAsync(string, short)
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetShortAsync(string, short)
  type: Method
  source:
    remote:
      path: UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: GetShortAsync
    path: ../UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
    startLine: 216
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Storage
  summary: >-
    Gets a short.

    <p>

    The default implementation calls <xref href="UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetIntAsync(System.String)" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public virtual Task<short> GetShortAsync(string aKey, short aDefault)
    parameters:
    - id: aKey
      type: System.String
      description: A key to get the short for.
    - id: aDefault
      type: System.Int16
      description: A default value to use when there is no short stored for the key.
    return:
      type: System.Threading.Tasks.Task{System.Int16}
      description: The stored short or aDefault.
    content.vb: Public Overridable Function GetShortAsync(aKey As String, aDefault As Short) As Task(Of Short)
  overload: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetShortAsync*
  nameWithType.vb: UFKeyedStorageAsync.GetShortAsync(String, Short)
  fullName.vb: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetShortAsync(String, Short)
  name.vb: GetShortAsync(String, Short)
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetShortAsync(System.String)
  commentId: M:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetShortAsync(System.String)
  id: GetShortAsync(System.String)
  parent: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync
  langs:
  - csharp
  - vb
  name: GetShortAsync(string)
  nameWithType: UFKeyedStorageAsync.GetShortAsync(string)
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetShortAsync(string)
  type: Method
  source:
    remote:
      path: UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: GetShortAsync
    path: ../UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
    startLine: 235
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Storage
  summary: Gets a short.
  example: []
  syntax:
    content: public Task<short> GetShortAsync(string aKey)
    parameters:
    - id: aKey
      type: System.String
      description: A key to get the short for.
    return:
      type: System.Threading.Tasks.Task{System.Int16}
      description: The stored short or 0 if none could be found.
    content.vb: Public Function GetShortAsync(aKey As String) As Task(Of Short)
  overload: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetShortAsync*
  nameWithType.vb: UFKeyedStorageAsync.GetShortAsync(String)
  fullName.vb: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetShortAsync(String)
  name.vb: GetShortAsync(String)
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetShortAsync(System.String,System.Int16)
  commentId: M:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetShortAsync(System.String,System.Int16)
  id: SetShortAsync(System.String,System.Int16)
  parent: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync
  langs:
  - csharp
  - vb
  name: SetShortAsync(string, short)
  nameWithType: UFKeyedStorageAsync.SetShortAsync(string, short)
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetShortAsync(string, short)
  type: Method
  source:
    remote:
      path: UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: SetShortAsync
    path: ../UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
    startLine: 252
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Storage
  summary: >-
    Stores a short in the storage.

    <p>

    The default implementation calls <xref href="UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetIntAsync(System.String%2cSystem.Int32)" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public virtual Task SetShortAsync(string aKey, short aValue)
    parameters:
    - id: aKey
      type: System.String
      description: Key to store value for.
    - id: aValue
      type: System.Int16
      description: A value to store.
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Overridable Function SetShortAsync(aKey As String, aValue As Short) As Task
  overload: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetShortAsync*
  nameWithType.vb: UFKeyedStorageAsync.SetShortAsync(String, Short)
  fullName.vb: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetShortAsync(String, Short)
  name.vb: SetShortAsync(String, Short)
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetUShortAsync(System.String,System.UInt16)
  commentId: M:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetUShortAsync(System.String,System.UInt16)
  id: GetUShortAsync(System.String,System.UInt16)
  parent: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync
  langs:
  - csharp
  - vb
  name: GetUShortAsync(string, ushort)
  nameWithType: UFKeyedStorageAsync.GetUShortAsync(string, ushort)
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetUShortAsync(string, ushort)
  type: Method
  source:
    remote:
      path: UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: GetUShortAsync
    path: ../UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
    startLine: 272
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Storage
  summary: >-
    Gets a ushort.

    <p>

    The default implementation calls <xref href="UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetIntAsync(System.String)" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public virtual Task<ushort> GetUShortAsync(string aKey, ushort aDefault)
    parameters:
    - id: aKey
      type: System.String
      description: A key to get the ushort for.
    - id: aDefault
      type: System.UInt16
      description: A default value to use when there is no ushort stored for the key.
    return:
      type: System.Threading.Tasks.Task{System.UInt16}
      description: The stored ushort or aDefault.
    content.vb: Public Overridable Function GetUShortAsync(aKey As String, aDefault As UShort) As Task(Of UShort)
  overload: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetUShortAsync*
  nameWithType.vb: UFKeyedStorageAsync.GetUShortAsync(String, UShort)
  fullName.vb: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetUShortAsync(String, UShort)
  name.vb: GetUShortAsync(String, UShort)
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetUShortAsync(System.String)
  commentId: M:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetUShortAsync(System.String)
  id: GetUShortAsync(System.String)
  parent: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync
  langs:
  - csharp
  - vb
  name: GetUShortAsync(string)
  nameWithType: UFKeyedStorageAsync.GetUShortAsync(string)
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetUShortAsync(string)
  type: Method
  source:
    remote:
      path: UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: GetUShortAsync
    path: ../UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
    startLine: 289
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Storage
  summary: Gets a ushort.
  example: []
  syntax:
    content: public Task<ushort> GetUShortAsync(string aKey)
    parameters:
    - id: aKey
      type: System.String
      description: A key to get the ushort for.
    return:
      type: System.Threading.Tasks.Task{System.UInt16}
      description: The stored ushort or 0 if none could be found.
    content.vb: Public Function GetUShortAsync(aKey As String) As Task(Of UShort)
  overload: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetUShortAsync*
  nameWithType.vb: UFKeyedStorageAsync.GetUShortAsync(String)
  fullName.vb: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetUShortAsync(String)
  name.vb: GetUShortAsync(String)
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetUShortAsync(System.String,System.UInt16)
  commentId: M:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetUShortAsync(System.String,System.UInt16)
  id: SetUShortAsync(System.String,System.UInt16)
  parent: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync
  langs:
  - csharp
  - vb
  name: SetUShortAsync(string, ushort)
  nameWithType: UFKeyedStorageAsync.SetUShortAsync(string, ushort)
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetUShortAsync(string, ushort)
  type: Method
  source:
    remote:
      path: UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: SetUShortAsync
    path: ../UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
    startLine: 306
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Storage
  summary: >-
    Stores a ushort in the storage.

    <p>

    The default implementation calls <xref href="UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetIntAsync(System.String%2cSystem.Int32)" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public virtual Task SetUShortAsync(string aKey, ushort aValue)
    parameters:
    - id: aKey
      type: System.String
      description: Key to store value for.
    - id: aValue
      type: System.UInt16
      description: A value to store.
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Overridable Function SetUShortAsync(aKey As String, aValue As UShort) As Task
  overload: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetUShortAsync*
  nameWithType.vb: UFKeyedStorageAsync.SetUShortAsync(String, UShort)
  fullName.vb: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetUShortAsync(String, UShort)
  name.vb: SetUShortAsync(String, UShort)
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetIntAsync(System.String,System.Int32)
  commentId: M:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetIntAsync(System.String,System.Int32)
  id: GetIntAsync(System.String,System.Int32)
  parent: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync
  langs:
  - csharp
  - vb
  name: GetIntAsync(string, int)
  nameWithType: UFKeyedStorageAsync.GetIntAsync(string, int)
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetIntAsync(string, int)
  type: Method
  source:
    remote:
      path: UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: GetIntAsync
    path: ../UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
    startLine: 328
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Storage
  summary: >-
    Gets an integer.

    <p>

    The default implementation uses <xref href="UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetStringAsync(System.String)" data-throw-if-not-resolved="false"></xref> 

    and uses <xref href="System.Int32.Parse(System.String)" data-throw-if-not-resolved="false"></xref> to convert it back to

    a integer.

    </p>
  example: []
  syntax:
    content: public virtual Task<int> GetIntAsync(string aKey, int aDefault)
    parameters:
    - id: aKey
      type: System.String
      description: A key to get the integer for.
    - id: aDefault
      type: System.Int32
      description: A default value to use when there is no integer stored for the key.
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: The stored integer or aDefault.
    content.vb: Public Overridable Function GetIntAsync(aKey As String, aDefault As Integer) As Task(Of Integer)
  overload: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetIntAsync*
  nameWithType.vb: UFKeyedStorageAsync.GetIntAsync(String, Integer)
  fullName.vb: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetIntAsync(String, Integer)
  name.vb: GetIntAsync(String, Integer)
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetIntAsync(System.String)
  commentId: M:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetIntAsync(System.String)
  id: GetIntAsync(System.String)
  parent: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync
  langs:
  - csharp
  - vb
  name: GetIntAsync(string)
  nameWithType: UFKeyedStorageAsync.GetIntAsync(string)
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetIntAsync(string)
  type: Method
  source:
    remote:
      path: UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: GetIntAsync
    path: ../UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
    startLine: 342
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Storage
  summary: Gets an integer.
  example: []
  syntax:
    content: public Task<int> GetIntAsync(string aKey)
    parameters:
    - id: aKey
      type: System.String
      description: A key to get the integer for.
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: The stored integer or 0 if none could be found.
    content.vb: Public Function GetIntAsync(aKey As String) As Task(Of Integer)
  overload: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetIntAsync*
  nameWithType.vb: UFKeyedStorageAsync.GetIntAsync(String)
  fullName.vb: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetIntAsync(String)
  name.vb: GetIntAsync(String)
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetIntAsync(System.String,System.Int32)
  commentId: M:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetIntAsync(System.String,System.Int32)
  id: SetIntAsync(System.String,System.Int32)
  parent: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync
  langs:
  - csharp
  - vb
  name: SetIntAsync(string, int)
  nameWithType: UFKeyedStorageAsync.SetIntAsync(string, int)
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetIntAsync(string, int)
  type: Method
  source:
    remote:
      path: UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: SetIntAsync
    path: ../UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
    startLine: 360
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Storage
  summary: >-
    Stores an integer in the storage.

    <p>

    The default implementation convert the value to a string and uses

    <xref href="UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetStringAsync(System.String%2cSystem.String)" data-throw-if-not-resolved="false"></xref> to store it.

    </p>
  example: []
  syntax:
    content: public virtual Task SetIntAsync(string aKey, int aValue)
    parameters:
    - id: aKey
      type: System.String
      description: Key to store value for.
    - id: aValue
      type: System.Int32
      description: A value to store.
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Overridable Function SetIntAsync(aKey As String, aValue As Integer) As Task
  overload: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetIntAsync*
  nameWithType.vb: UFKeyedStorageAsync.SetIntAsync(String, Integer)
  fullName.vb: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetIntAsync(String, Integer)
  name.vb: SetIntAsync(String, Integer)
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetUIntAsync(System.String,System.UInt32)
  commentId: M:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetUIntAsync(System.String,System.UInt32)
  id: GetUIntAsync(System.String,System.UInt32)
  parent: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync
  langs:
  - csharp
  - vb
  name: GetUIntAsync(string, uint)
  nameWithType: UFKeyedStorageAsync.GetUIntAsync(string, uint)
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetUIntAsync(string, uint)
  type: Method
  source:
    remote:
      path: UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: GetUIntAsync
    path: ../UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
    startLine: 383
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Storage
  summary: >-
    Gets an unsigned integer.

    <p>

    The default implementation uses <xref href="UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetStringAsync(System.String)" data-throw-if-not-resolved="false"></xref> 

    and uses <xref href="System.UInt32.Parse(System.String)" data-throw-if-not-resolved="false"></xref> to convert it back to an

    unsigned integer.

    </p>
  example: []
  syntax:
    content: public virtual Task<uint> GetUIntAsync(string aKey, uint aDefault)
    parameters:
    - id: aKey
      type: System.String
      description: A key to get the unsigned integer for.
    - id: aDefault
      type: System.UInt32
      description: >-
        A default value to use when there is no unsigned integer stored for 

        the key.
    return:
      type: System.Threading.Tasks.Task{System.UInt32}
      description: The stored unsigned integer or aDefault.
    content.vb: Public Overridable Function GetUIntAsync(aKey As String, aDefault As UInteger) As Task(Of UInteger)
  overload: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetUIntAsync*
  nameWithType.vb: UFKeyedStorageAsync.GetUIntAsync(String, UInteger)
  fullName.vb: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetUIntAsync(String, UInteger)
  name.vb: GetUIntAsync(String, UInteger)
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetUIntAsync(System.String)
  commentId: M:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetUIntAsync(System.String)
  id: GetUIntAsync(System.String)
  parent: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync
  langs:
  - csharp
  - vb
  name: GetUIntAsync(string)
  nameWithType: UFKeyedStorageAsync.GetUIntAsync(string)
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetUIntAsync(string)
  type: Method
  source:
    remote:
      path: UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: GetUIntAsync
    path: ../UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
    startLine: 397
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Storage
  summary: Gets an unsigned integer.
  example: []
  syntax:
    content: public Task<uint> GetUIntAsync(string aKey)
    parameters:
    - id: aKey
      type: System.String
      description: A key to get the unsigned integer for.
    return:
      type: System.Threading.Tasks.Task{System.UInt32}
      description: The stored unsigned integer or 0 if none could be found.
    content.vb: Public Function GetUIntAsync(aKey As String) As Task(Of UInteger)
  overload: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetUIntAsync*
  nameWithType.vb: UFKeyedStorageAsync.GetUIntAsync(String)
  fullName.vb: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetUIntAsync(String)
  name.vb: GetUIntAsync(String)
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetUIntAsync(System.String,System.UInt32)
  commentId: M:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetUIntAsync(System.String,System.UInt32)
  id: SetUIntAsync(System.String,System.UInt32)
  parent: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync
  langs:
  - csharp
  - vb
  name: SetUIntAsync(string, uint)
  nameWithType: UFKeyedStorageAsync.SetUIntAsync(string, uint)
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetUIntAsync(string, uint)
  type: Method
  source:
    remote:
      path: UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: SetUIntAsync
    path: ../UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
    startLine: 415
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Storage
  summary: >-
    Stores an unsigned integer in the storage.

    <p>

    The default implementation convert the value to a string and uses

    <xref href="UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetStringAsync(System.String%2cSystem.String)" data-throw-if-not-resolved="false"></xref> to store it.

    </p>
  example: []
  syntax:
    content: public virtual Task SetUIntAsync(string aKey, uint aValue)
    parameters:
    - id: aKey
      type: System.String
      description: Key to store value for.
    - id: aValue
      type: System.UInt32
      description: A value to store.
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Overridable Function SetUIntAsync(aKey As String, aValue As UInteger) As Task
  overload: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetUIntAsync*
  nameWithType.vb: UFKeyedStorageAsync.SetUIntAsync(String, UInteger)
  fullName.vb: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetUIntAsync(String, UInteger)
  name.vb: SetUIntAsync(String, UInteger)
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetLongAsync(System.String,System.Int64)
  commentId: M:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetLongAsync(System.String,System.Int64)
  id: GetLongAsync(System.String,System.Int64)
  parent: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync
  langs:
  - csharp
  - vb
  name: GetLongAsync(string, long)
  nameWithType: UFKeyedStorageAsync.GetLongAsync(string, long)
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetLongAsync(string, long)
  type: Method
  source:
    remote:
      path: UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: GetLongAsync
    path: ../UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
    startLine: 436
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Storage
  summary: >-
    Gets a long.

    <p>

    The default implementation uses <xref href="UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetStringAsync(System.String)" data-throw-if-not-resolved="false"></xref> 

    and uses <xref href="System.Int64.Parse(System.String)" data-throw-if-not-resolved="false"></xref> to convert it back to a long.

    </p>
  example: []
  syntax:
    content: public virtual Task<long> GetLongAsync(string aKey, long aDefault)
    parameters:
    - id: aKey
      type: System.String
      description: A key to get the long for.
    - id: aDefault
      type: System.Int64
      description: A default value to use when there is no long stored for the key.
    return:
      type: System.Threading.Tasks.Task{System.Int64}
      description: The stored long or aDefault.
    content.vb: Public Overridable Function GetLongAsync(aKey As String, aDefault As Long) As Task(Of Long)
  overload: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetLongAsync*
  nameWithType.vb: UFKeyedStorageAsync.GetLongAsync(String, Long)
  fullName.vb: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetLongAsync(String, Long)
  name.vb: GetLongAsync(String, Long)
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetLongAsync(System.String)
  commentId: M:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetLongAsync(System.String)
  id: GetLongAsync(System.String)
  parent: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync
  langs:
  - csharp
  - vb
  name: GetLongAsync(string)
  nameWithType: UFKeyedStorageAsync.GetLongAsync(string)
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetLongAsync(string)
  type: Method
  source:
    remote:
      path: UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: GetLongAsync
    path: ../UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
    startLine: 450
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Storage
  summary: Gets a long.
  example: []
  syntax:
    content: public Task<long> GetLongAsync(string aKey)
    parameters:
    - id: aKey
      type: System.String
      description: A key to get the long for.
    return:
      type: System.Threading.Tasks.Task{System.Int64}
      description: The stored long or 0 if none could be found.
    content.vb: Public Function GetLongAsync(aKey As String) As Task(Of Long)
  overload: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetLongAsync*
  nameWithType.vb: UFKeyedStorageAsync.GetLongAsync(String)
  fullName.vb: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetLongAsync(String)
  name.vb: GetLongAsync(String)
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetLongAsync(System.String,System.Int64)
  commentId: M:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetLongAsync(System.String,System.Int64)
  id: SetLongAsync(System.String,System.Int64)
  parent: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync
  langs:
  - csharp
  - vb
  name: SetLongAsync(string, long)
  nameWithType: UFKeyedStorageAsync.SetLongAsync(string, long)
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetLongAsync(string, long)
  type: Method
  source:
    remote:
      path: UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: SetLongAsync
    path: ../UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
    startLine: 468
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Storage
  summary: >-
    Stores a long in the storage.

    <p>

    The default implementation convert the value to a string and uses

    <xref href="UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetStringAsync(System.String%2cSystem.String)" data-throw-if-not-resolved="false"></xref> to store it.

    </p>
  example: []
  syntax:
    content: public virtual Task SetLongAsync(string aKey, long aValue)
    parameters:
    - id: aKey
      type: System.String
      description: Key to store value for.
    - id: aValue
      type: System.Int64
      description: A value to store.
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Overridable Function SetLongAsync(aKey As String, aValue As Long) As Task
  overload: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetLongAsync*
  nameWithType.vb: UFKeyedStorageAsync.SetLongAsync(String, Long)
  fullName.vb: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetLongAsync(String, Long)
  name.vb: SetLongAsync(String, Long)
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetULongAsync(System.String,System.UInt64)
  commentId: M:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetULongAsync(System.String,System.UInt64)
  id: GetULongAsync(System.String,System.UInt64)
  parent: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync
  langs:
  - csharp
  - vb
  name: GetULongAsync(string, ulong)
  nameWithType: UFKeyedStorageAsync.GetULongAsync(string, ulong)
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetULongAsync(string, ulong)
  type: Method
  source:
    remote:
      path: UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: GetULongAsync
    path: ../UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
    startLine: 490
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Storage
  summary: >-
    Gets a ulong.

    <p>

    The default implementation uses <xref href="UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetStringAsync(System.String)" data-throw-if-not-resolved="false"></xref> 

    and uses <xref href="System.UInt64.Parse(System.String)" data-throw-if-not-resolved="false"></xref> to convert it back to 

    a ulong.

    </p>
  example: []
  syntax:
    content: public virtual Task<ulong> GetULongAsync(string aKey, ulong aDefault)
    parameters:
    - id: aKey
      type: System.String
      description: A key to get the ulong for.
    - id: aDefault
      type: System.UInt64
      description: A default value to use when there is no ulong stored for the key.
    return:
      type: System.Threading.Tasks.Task{System.UInt64}
      description: The stored ulong or aDefault.
    content.vb: Public Overridable Function GetULongAsync(aKey As String, aDefault As ULong) As Task(Of ULong)
  overload: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetULongAsync*
  nameWithType.vb: UFKeyedStorageAsync.GetULongAsync(String, ULong)
  fullName.vb: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetULongAsync(String, ULong)
  name.vb: GetULongAsync(String, ULong)
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetULongAsync(System.String)
  commentId: M:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetULongAsync(System.String)
  id: GetULongAsync(System.String)
  parent: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync
  langs:
  - csharp
  - vb
  name: GetULongAsync(string)
  nameWithType: UFKeyedStorageAsync.GetULongAsync(string)
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetULongAsync(string)
  type: Method
  source:
    remote:
      path: UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: GetULongAsync
    path: ../UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
    startLine: 504
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Storage
  summary: Gets a ulong.
  example: []
  syntax:
    content: public Task<ulong> GetULongAsync(string aKey)
    parameters:
    - id: aKey
      type: System.String
      description: A key to get the ulong for.
    return:
      type: System.Threading.Tasks.Task{System.UInt64}
      description: The stored ulong or 0 if none could be found.
    content.vb: Public Function GetULongAsync(aKey As String) As Task(Of ULong)
  overload: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetULongAsync*
  nameWithType.vb: UFKeyedStorageAsync.GetULongAsync(String)
  fullName.vb: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetULongAsync(String)
  name.vb: GetULongAsync(String)
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetULongAsync(System.String,System.UInt64)
  commentId: M:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetULongAsync(System.String,System.UInt64)
  id: SetULongAsync(System.String,System.UInt64)
  parent: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync
  langs:
  - csharp
  - vb
  name: SetULongAsync(string, ulong)
  nameWithType: UFKeyedStorageAsync.SetULongAsync(string, ulong)
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetULongAsync(string, ulong)
  type: Method
  source:
    remote:
      path: UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: SetULongAsync
    path: ../UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
    startLine: 522
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Storage
  summary: >-
    Stores a ulong in the storage.

    <p>

    The default implementation convert the value to a string and uses

    <xref href="UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetStringAsync(System.String%2cSystem.String)" data-throw-if-not-resolved="false"></xref> to store it.

    </p>
  example: []
  syntax:
    content: public virtual Task SetULongAsync(string aKey, ulong aValue)
    parameters:
    - id: aKey
      type: System.String
      description: Key to store value for.
    - id: aValue
      type: System.UInt64
      description: A value to store.
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Overridable Function SetULongAsync(aKey As String, aValue As ULong) As Task
  overload: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetULongAsync*
  nameWithType.vb: UFKeyedStorageAsync.SetULongAsync(String, ULong)
  fullName.vb: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetULongAsync(String, ULong)
  name.vb: SetULongAsync(String, ULong)
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetFloatAsync(System.String,System.Single)
  commentId: M:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetFloatAsync(System.String,System.Single)
  id: GetFloatAsync(System.String,System.Single)
  parent: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync
  langs:
  - csharp
  - vb
  name: GetFloatAsync(string, float)
  nameWithType: UFKeyedStorageAsync.GetFloatAsync(string, float)
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetFloatAsync(string, float)
  type: Method
  source:
    remote:
      path: UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: GetFloatAsync
    path: ../UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
    startLine: 545
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Storage
  summary: >-
    Gets a floating number.

    <p>

    The default implementation just calls 

    <xref href="UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetDoubleAsync(System.String)" data-throw-if-not-resolved="false"></xref> and typecast the value back to 

    float.

    </p>
  example: []
  syntax:
    content: public virtual Task<float> GetFloatAsync(string aKey, float aDefault)
    parameters:
    - id: aKey
      type: System.String
      description: A key to get the floating number for.
    - id: aDefault
      type: System.Single
      description: >-
        A default value to use when there is no floating number stored for

        the key.
    return:
      type: System.Threading.Tasks.Task{System.Single}
      description: The stored floating number or aDefault.
    content.vb: Public Overridable Function GetFloatAsync(aKey As String, aDefault As Single) As Task(Of Single)
  overload: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetFloatAsync*
  nameWithType.vb: UFKeyedStorageAsync.GetFloatAsync(String, Single)
  fullName.vb: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetFloatAsync(String, Single)
  name.vb: GetFloatAsync(String, Single)
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetFloatAsync(System.String)
  commentId: M:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetFloatAsync(System.String)
  id: GetFloatAsync(System.String)
  parent: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync
  langs:
  - csharp
  - vb
  name: GetFloatAsync(string)
  nameWithType: UFKeyedStorageAsync.GetFloatAsync(string)
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetFloatAsync(string)
  type: Method
  source:
    remote:
      path: UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: GetFloatAsync
    path: ../UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
    startLine: 559
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Storage
  summary: Gets a floating number.
  example: []
  syntax:
    content: public Task<float> GetFloatAsync(string aKey)
    parameters:
    - id: aKey
      type: System.String
      description: A key to get the floating number for.
    return:
      type: System.Threading.Tasks.Task{System.Single}
      description: The stored floating number or 0.0 when missing.
    content.vb: Public Function GetFloatAsync(aKey As String) As Task(Of Single)
  overload: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetFloatAsync*
  nameWithType.vb: UFKeyedStorageAsync.GetFloatAsync(String)
  fullName.vb: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetFloatAsync(String)
  name.vb: GetFloatAsync(String)
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetFloatAsync(System.String,System.Single)
  commentId: M:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetFloatAsync(System.String,System.Single)
  id: SetFloatAsync(System.String,System.Single)
  parent: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync
  langs:
  - csharp
  - vb
  name: SetFloatAsync(string, float)
  nameWithType: UFKeyedStorageAsync.SetFloatAsync(string, float)
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetFloatAsync(string, float)
  type: Method
  source:
    remote:
      path: UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: SetFloatAsync
    path: ../UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
    startLine: 576
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Storage
  summary: >-
    Stores a floating number in the storage.

    <p>

    The default implementation calls <xref href="UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetDoubleAsync(System.String%2cSystem.Double)" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public virtual Task SetFloatAsync(string aKey, float aValue)
    parameters:
    - id: aKey
      type: System.String
      description: Key to store value for.
    - id: aValue
      type: System.Single
      description: A value to store.
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Overridable Function SetFloatAsync(aKey As String, aValue As Single) As Task
  overload: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetFloatAsync*
  nameWithType.vb: UFKeyedStorageAsync.SetFloatAsync(String, Single)
  fullName.vb: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetFloatAsync(String, Single)
  name.vb: SetFloatAsync(String, Single)
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetDoubleAsync(System.String,System.Double)
  commentId: M:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetDoubleAsync(System.String,System.Double)
  id: GetDoubleAsync(System.String,System.Double)
  parent: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync
  langs:
  - csharp
  - vb
  name: GetDoubleAsync(string, double)
  nameWithType: UFKeyedStorageAsync.GetDoubleAsync(string, double)
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetDoubleAsync(string, double)
  type: Method
  source:
    remote:
      path: UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: GetDoubleAsync
    path: ../UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
    startLine: 599
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Storage
  summary: >-
    Gets a double number.

    <p>

    The default implementation uses <xref href="UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetStringAsync(System.String)" data-throw-if-not-resolved="false"></xref> 

    and uses <xref href="System.Double.Parse(System.String)" data-throw-if-not-resolved="false"></xref> to convert it back to 

    a double.

    </p>
  example: []
  syntax:
    content: public virtual Task<double> GetDoubleAsync(string aKey, double aDefault)
    parameters:
    - id: aKey
      type: System.String
      description: A key to get the double number for.
    - id: aDefault
      type: System.Double
      description: >-
        A default value to use when there is no double number stored for

        the key.
    return:
      type: System.Threading.Tasks.Task{System.Double}
      description: The stored floating number or aDefault.
    content.vb: Public Overridable Function GetDoubleAsync(aKey As String, aDefault As Double) As Task(Of Double)
  overload: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetDoubleAsync*
  nameWithType.vb: UFKeyedStorageAsync.GetDoubleAsync(String, Double)
  fullName.vb: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetDoubleAsync(String, Double)
  name.vb: GetDoubleAsync(String, Double)
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetDoubleAsync(System.String)
  commentId: M:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetDoubleAsync(System.String)
  id: GetDoubleAsync(System.String)
  parent: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync
  langs:
  - csharp
  - vb
  name: GetDoubleAsync(string)
  nameWithType: UFKeyedStorageAsync.GetDoubleAsync(string)
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetDoubleAsync(string)
  type: Method
  source:
    remote:
      path: UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: GetDoubleAsync
    path: ../UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
    startLine: 616
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Storage
  summary: Gets a double number.
  example: []
  syntax:
    content: public Task<double> GetDoubleAsync(string aKey)
    parameters:
    - id: aKey
      type: System.String
      description: A key to get the double number for.
    return:
      type: System.Threading.Tasks.Task{System.Double}
      description: The stored double number or 0.0 when missing.
    content.vb: Public Function GetDoubleAsync(aKey As String) As Task(Of Double)
  overload: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetDoubleAsync*
  nameWithType.vb: UFKeyedStorageAsync.GetDoubleAsync(String)
  fullName.vb: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetDoubleAsync(String)
  name.vb: GetDoubleAsync(String)
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetDoubleAsync(System.String,System.Double)
  commentId: M:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetDoubleAsync(System.String,System.Double)
  id: SetDoubleAsync(System.String,System.Double)
  parent: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync
  langs:
  - csharp
  - vb
  name: SetDoubleAsync(string, double)
  nameWithType: UFKeyedStorageAsync.SetDoubleAsync(string, double)
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetDoubleAsync(string, double)
  type: Method
  source:
    remote:
      path: UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: SetDoubleAsync
    path: ../UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
    startLine: 634
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Storage
  summary: >-
    Stores a double number in the storage.

    <p>

    The default implementation convert the value to a string and uses

    <xref href="UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetStringAsync(System.String%2cSystem.String)" data-throw-if-not-resolved="false"></xref> to store it.

    </p>
  example: []
  syntax:
    content: public virtual Task SetDoubleAsync(string aKey, double aValue)
    parameters:
    - id: aKey
      type: System.String
      description: Key to store value for.
    - id: aValue
      type: System.Double
      description: A value to store.
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Overridable Function SetDoubleAsync(aKey As String, aValue As Double) As Task
  overload: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetDoubleAsync*
  nameWithType.vb: UFKeyedStorageAsync.SetDoubleAsync(String, Double)
  fullName.vb: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetDoubleAsync(String, Double)
  name.vb: SetDoubleAsync(String, Double)
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetBoolAsync(System.String,System.Boolean)
  commentId: M:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetBoolAsync(System.String,System.Boolean)
  id: GetBoolAsync(System.String,System.Boolean)
  parent: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync
  langs:
  - csharp
  - vb
  name: GetBoolAsync(string, bool)
  nameWithType: UFKeyedStorageAsync.GetBoolAsync(string, bool)
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetBoolAsync(string, bool)
  type: Method
  source:
    remote:
      path: UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: GetBoolAsync
    path: ../UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
    startLine: 658
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Storage
  summary: >-
    Gets a bool.

    <p>

    The default implementation uses <xref href="UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetStringAsync(System.String)" data-throw-if-not-resolved="false"></xref> 

    and converts its value back to a bool.

    </p>
  example: []
  syntax:
    content: public virtual Task<bool> GetBoolAsync(string aKey, bool aDefault)
    parameters:
    - id: aKey
      type: System.String
      description: A key to get the bool for.
    - id: aDefault
      type: System.Boolean
      description: A default value to use when there is no bool stored for the key.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: The stored bool or aDefault.
    content.vb: Public Overridable Function GetBoolAsync(aKey As String, aDefault As Boolean) As Task(Of Boolean)
  overload: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetBoolAsync*
  nameWithType.vb: UFKeyedStorageAsync.GetBoolAsync(String, Boolean)
  fullName.vb: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetBoolAsync(String, Boolean)
  name.vb: GetBoolAsync(String, Boolean)
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetBoolAsync(System.String)
  commentId: M:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetBoolAsync(System.String)
  id: GetBoolAsync(System.String)
  parent: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync
  langs:
  - csharp
  - vb
  name: GetBoolAsync(string)
  nameWithType: UFKeyedStorageAsync.GetBoolAsync(string)
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetBoolAsync(string)
  type: Method
  source:
    remote:
      path: UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: GetBoolAsync
    path: ../UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
    startLine: 672
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Storage
  summary: Gets a bool.
  example: []
  syntax:
    content: public Task<bool> GetBoolAsync(string aKey)
    parameters:
    - id: aKey
      type: System.String
      description: A key to get the bool for.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: The stored bool or true when missing.
    content.vb: Public Function GetBoolAsync(aKey As String) As Task(Of Boolean)
  overload: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetBoolAsync*
  nameWithType.vb: UFKeyedStorageAsync.GetBoolAsync(String)
  fullName.vb: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetBoolAsync(String)
  name.vb: GetBoolAsync(String)
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetBoolAsync(System.String,System.Boolean)
  commentId: M:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetBoolAsync(System.String,System.Boolean)
  id: SetBoolAsync(System.String,System.Boolean)
  parent: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync
  langs:
  - csharp
  - vb
  name: SetBoolAsync(string, bool)
  nameWithType: UFKeyedStorageAsync.SetBoolAsync(string, bool)
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetBoolAsync(string, bool)
  type: Method
  source:
    remote:
      path: UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: SetBoolAsync
    path: ../UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
    startLine: 690
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Storage
  summary: >-
    Stores a bool in the storage.

    <p>

    The default implementation convert the value to a string and uses

    <xref href="UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetStringAsync(System.String%2cSystem.String)" data-throw-if-not-resolved="false"></xref> to store it.

    </p>
  example: []
  syntax:
    content: public virtual Task SetBoolAsync(string aKey, bool aValue)
    parameters:
    - id: aKey
      type: System.String
      description: Key to store value for.
    - id: aValue
      type: System.Boolean
      description: A value to store.
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Overridable Function SetBoolAsync(aKey As String, aValue As Boolean) As Task
  overload: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetBoolAsync*
  nameWithType.vb: UFKeyedStorageAsync.SetBoolAsync(String, Boolean)
  fullName.vb: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetBoolAsync(String, Boolean)
  name.vb: SetBoolAsync(String, Boolean)
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetCharAsync(System.String,System.Char)
  commentId: M:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetCharAsync(System.String,System.Char)
  id: GetCharAsync(System.String,System.Char)
  parent: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync
  langs:
  - csharp
  - vb
  name: GetCharAsync(string, char)
  nameWithType: UFKeyedStorageAsync.GetCharAsync(string, char)
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetCharAsync(string, char)
  type: Method
  source:
    remote:
      path: UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: GetCharAsync
    path: ../UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
    startLine: 711
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Storage
  summary: >-
    Gets a char.

    <p>

    The default implementation uses <xref href="UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetStringAsync(System.String)" data-throw-if-not-resolved="false"></xref> 

    to get the stored character.

    </p>
  example: []
  syntax:
    content: public virtual Task<char> GetCharAsync(string aKey, char aDefault)
    parameters:
    - id: aKey
      type: System.String
      description: A key to get the char for.
    - id: aDefault
      type: System.Char
      description: A default value to use when there is no char stored for the key.
    return:
      type: System.Threading.Tasks.Task{System.Char}
      description: The stored char or aDefault.
    content.vb: Public Overridable Function GetCharAsync(aKey As String, aDefault As Char) As Task(Of Char)
  overload: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetCharAsync*
  nameWithType.vb: UFKeyedStorageAsync.GetCharAsync(String, Char)
  fullName.vb: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetCharAsync(String, Char)
  name.vb: GetCharAsync(String, Char)
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetCharAsync(System.String)
  commentId: M:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetCharAsync(System.String)
  id: GetCharAsync(System.String)
  parent: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync
  langs:
  - csharp
  - vb
  name: GetCharAsync(string)
  nameWithType: UFKeyedStorageAsync.GetCharAsync(string)
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetCharAsync(string)
  type: Method
  source:
    remote:
      path: UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: GetCharAsync
    path: ../UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
    startLine: 725
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Storage
  summary: Gets a char.
  example: []
  syntax:
    content: public Task<char> GetCharAsync(string aKey)
    parameters:
    - id: aKey
      type: System.String
      description: A key to get the char for.
    return:
      type: System.Threading.Tasks.Task{System.Char}
      description: The stored char or '\0' when missing.
    content.vb: Public Function GetCharAsync(aKey As String) As Task(Of Char)
  overload: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetCharAsync*
  nameWithType.vb: UFKeyedStorageAsync.GetCharAsync(String)
  fullName.vb: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetCharAsync(String)
  name.vb: GetCharAsync(String)
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetCharAsync(System.String,System.Char)
  commentId: M:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetCharAsync(System.String,System.Char)
  id: SetCharAsync(System.String,System.Char)
  parent: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync
  langs:
  - csharp
  - vb
  name: SetCharAsync(string, char)
  nameWithType: UFKeyedStorageAsync.SetCharAsync(string, char)
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetCharAsync(string, char)
  type: Method
  source:
    remote:
      path: UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: SetCharAsync
    path: ../UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
    startLine: 743
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Storage
  summary: >-
    Stores a char in the storage.

    <p>

    The default implementation just uses <xref href="UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetStringAsync(System.String%2cSystem.String)" data-throw-if-not-resolved="false"></xref> to 

    store the value.

    </p>
  example: []
  syntax:
    content: public virtual Task SetCharAsync(string aKey, char aValue)
    parameters:
    - id: aKey
      type: System.String
      description: Key to store value for.
    - id: aValue
      type: System.Char
      description: A value to store.
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Overridable Function SetCharAsync(aKey As String, aValue As Char) As Task
  overload: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetCharAsync*
  nameWithType.vb: UFKeyedStorageAsync.SetCharAsync(String, Char)
  fullName.vb: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetCharAsync(String, Char)
  name.vb: SetCharAsync(String, Char)
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetBytesAsync(System.String,System.Byte[])
  commentId: M:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetBytesAsync(System.String,System.Byte[])
  id: GetBytesAsync(System.String,System.Byte[])
  parent: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync
  langs:
  - csharp
  - vb
  name: GetBytesAsync(string, byte[]?)
  nameWithType: UFKeyedStorageAsync.GetBytesAsync(string, byte[]?)
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetBytesAsync(string, byte[]?)
  type: Method
  source:
    remote:
      path: UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: GetBytesAsync
    path: ../UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
    startLine: 764
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Storage
  summary: >-
    Gets an array of bytes.

    <p> 

    The default implementation uses <xref href="UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetStringAsync(System.String)" data-throw-if-not-resolved="false"></xref> 

    and assumes the data is is a base64 encoded string.

    </p>
  example: []
  syntax:
    content: public virtual Task<byte[]?> GetBytesAsync(string aKey, byte[]? aDefault)
    parameters:
    - id: aKey
      type: System.String
      description: Key to get array for
    - id: aDefault
      type: System.Byte[]
      description: Default value to use when no data exists for aKey
    return:
      type: System.Threading.Tasks.Task{System.Byte[]}
      description: Array of byte or aDefault
    content.vb: Public Overridable Function GetBytesAsync(aKey As String, aDefault As Byte()) As Task(Of Byte())
  overload: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetBytesAsync*
  nameWithType.vb: UFKeyedStorageAsync.GetBytesAsync(String, Byte())
  fullName.vb: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetBytesAsync(String, Byte())
  name.vb: GetBytesAsync(String, Byte())
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetBytesAsync(System.String)
  commentId: M:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetBytesAsync(System.String)
  id: GetBytesAsync(System.String)
  parent: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync
  langs:
  - csharp
  - vb
  name: GetBytesAsync(string)
  nameWithType: UFKeyedStorageAsync.GetBytesAsync(string)
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetBytesAsync(string)
  type: Method
  source:
    remote:
      path: UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: GetBytesAsync
    path: ../UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
    startLine: 783
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Storage
  summary: Gets an array of bytes.
  example: []
  syntax:
    content: public Task<byte[]?> GetBytesAsync(string aKey)
    parameters:
    - id: aKey
      type: System.String
      description: Key to get array for
    return:
      type: System.Threading.Tasks.Task{System.Byte[]}
      description: Array of byte or null when missing
    content.vb: Public Function GetBytesAsync(aKey As String) As Task(Of Byte())
  overload: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetBytesAsync*
  nameWithType.vb: UFKeyedStorageAsync.GetBytesAsync(String)
  fullName.vb: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetBytesAsync(String)
  name.vb: GetBytesAsync(String)
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetBytesAsync(System.String,System.Byte[])
  commentId: M:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetBytesAsync(System.String,System.Byte[])
  id: SetBytesAsync(System.String,System.Byte[])
  parent: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync
  langs:
  - csharp
  - vb
  name: SetBytesAsync(string, byte[])
  nameWithType: UFKeyedStorageAsync.SetBytesAsync(string, byte[])
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetBytesAsync(string, byte[])
  type: Method
  source:
    remote:
      path: UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: SetBytesAsync
    path: ../UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
    startLine: 801
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Storage
  summary: >-
    Stores an array of bytes to the storage. 

    <p>

    The default implementation converts the array to a base64 encoded

    string and uses <xref href="UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetStringAsync(System.String%2cSystem.String)" data-throw-if-not-resolved="false"></xref> to store it.

    </p>
  example: []
  syntax:
    content: public virtual Task SetBytesAsync(string aKey, byte[] aValue)
    parameters:
    - id: aKey
      type: System.String
      description: Key to store value for
    - id: aValue
      type: System.Byte[]
      description: Array of byte to store
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Overridable Function SetBytesAsync(aKey As String, aValue As Byte()) As Task
  overload: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetBytesAsync*
  nameWithType.vb: UFKeyedStorageAsync.SetBytesAsync(String, Byte())
  fullName.vb: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetBytesAsync(String, Byte())
  name.vb: SetBytesAsync(String, Byte())
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetDateTimeAsync(System.String,System.DateTime)
  commentId: M:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetDateTimeAsync(System.String,System.DateTime)
  id: GetDateTimeAsync(System.String,System.DateTime)
  parent: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync
  langs:
  - csharp
  - vb
  name: GetDateTimeAsync(string, DateTime)
  nameWithType: UFKeyedStorageAsync.GetDateTimeAsync(string, DateTime)
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetDateTimeAsync(string, System.DateTime)
  type: Method
  source:
    remote:
      path: UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: GetDateTimeAsync
    path: ../UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
    startLine: 814
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Storage
  summary: >-
    Gets a <xref href="System.DateTime" data-throw-if-not-resolved="false"></xref> value using 

    <xref href="UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetLongAsync(System.String)" data-throw-if-not-resolved="false"></xref> and 

    <xref href="System.DateTime.FromBinary(System.Int64)" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public virtual Task<DateTime> GetDateTimeAsync(string aKey, DateTime aDefault)
    parameters:
    - id: aKey
      type: System.String
      description: Key to get date and time for
    - id: aDefault
      type: System.DateTime
      description: Default value to use
    return:
      type: System.Threading.Tasks.Task{System.DateTime}
      description: Store value or aDefault
    content.vb: Public Overridable Function GetDateTimeAsync(aKey As String, aDefault As Date) As Task(Of Date)
  overload: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetDateTimeAsync*
  nameWithType.vb: UFKeyedStorageAsync.GetDateTimeAsync(String, Date)
  fullName.vb: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetDateTimeAsync(String, Date)
  name.vb: GetDateTimeAsync(String, Date)
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetDateTimeAsync(System.String)
  commentId: M:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetDateTimeAsync(System.String)
  id: GetDateTimeAsync(System.String)
  parent: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync
  langs:
  - csharp
  - vb
  name: GetDateTimeAsync(string)
  nameWithType: UFKeyedStorageAsync.GetDateTimeAsync(string)
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetDateTimeAsync(string)
  type: Method
  source:
    remote:
      path: UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: GetDateTimeAsync
    path: ../UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
    startLine: 829
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Storage
  summary: Gets a date and time.
  example: []
  syntax:
    content: public Task<DateTime> GetDateTimeAsync(string aKey)
    parameters:
    - id: aKey
      type: System.String
      description: Key to get date and time for
    return:
      type: System.Threading.Tasks.Task{System.DateTime}
      description: Date and time or <xref href="System.DateTime.Now" data-throw-if-not-resolved="false"></xref> when missing
    content.vb: Public Function GetDateTimeAsync(aKey As String) As Task(Of Date)
  overload: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetDateTimeAsync*
  nameWithType.vb: UFKeyedStorageAsync.GetDateTimeAsync(String)
  fullName.vb: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetDateTimeAsync(String)
  name.vb: GetDateTimeAsync(String)
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetDateTimeAsync(System.String,System.DateTime)
  commentId: M:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetDateTimeAsync(System.String,System.DateTime)
  id: SetDateTimeAsync(System.String,System.DateTime)
  parent: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync
  langs:
  - csharp
  - vb
  name: SetDateTimeAsync(string, DateTime)
  nameWithType: UFKeyedStorageAsync.SetDateTimeAsync(string, DateTime)
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetDateTimeAsync(string, System.DateTime)
  type: Method
  source:
    remote:
      path: UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: SetDateTimeAsync
    path: ../UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
    startLine: 840
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Storage
  summary: >-
    Stores a date and time using <xref href="UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetLongAsync(System.String%2cSystem.Int64)" data-throw-if-not-resolved="false"></xref> and

    <xref href="System.DateTime.ToBinary" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public virtual Task SetDateTimeAsync(string aKey, DateTime aValue)
    parameters:
    - id: aKey
      type: System.String
      description: Key to store value for
    - id: aValue
      type: System.DateTime
      description: Value to store
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Overridable Function SetDateTimeAsync(aKey As String, aValue As Date) As Task
  overload: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetDateTimeAsync*
  nameWithType.vb: UFKeyedStorageAsync.SetDateTimeAsync(String, Date)
  fullName.vb: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetDateTimeAsync(String, Date)
  name.vb: SetDateTimeAsync(String, Date)
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetGuidAsync(System.String,System.Guid)
  commentId: M:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetGuidAsync(System.String,System.Guid)
  id: GetGuidAsync(System.String,System.Guid)
  parent: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync
  langs:
  - csharp
  - vb
  name: GetGuidAsync(string, Guid)
  nameWithType: UFKeyedStorageAsync.GetGuidAsync(string, Guid)
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetGuidAsync(string, System.Guid)
  type: Method
  source:
    remote:
      path: UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: GetGuidAsync
    path: ../UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
    startLine: 851
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Storage
  summary: Gets a guid using <xref href="UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetBytesAsync(System.String)" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public virtual Task<Guid> GetGuidAsync(string aKey, Guid aDefault)
    parameters:
    - id: aKey
      type: System.String
      description: Key to get value for
    - id: aDefault
      type: System.Guid
      description: Default value to use
    return:
      type: System.Threading.Tasks.Task{System.Guid}
      description: Stored value or aDefault
    content.vb: Public Overridable Function GetGuidAsync(aKey As String, aDefault As Guid) As Task(Of Guid)
  overload: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetGuidAsync*
  nameWithType.vb: UFKeyedStorageAsync.GetGuidAsync(String, Guid)
  fullName.vb: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetGuidAsync(String, System.Guid)
  name.vb: GetGuidAsync(String, Guid)
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetGuidAsync(System.String)
  commentId: M:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetGuidAsync(System.String)
  id: GetGuidAsync(System.String)
  parent: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync
  langs:
  - csharp
  - vb
  name: GetGuidAsync(string)
  nameWithType: UFKeyedStorageAsync.GetGuidAsync(string)
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetGuidAsync(string)
  type: Method
  source:
    remote:
      path: UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: GetGuidAsync
    path: ../UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
    startLine: 868
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Storage
  summary: Gets a guid.
  example: []
  syntax:
    content: public Task<Guid> GetGuidAsync(string aKey)
    parameters:
    - id: aKey
      type: System.String
      description: Key to get value for
    return:
      type: System.Threading.Tasks.Task{System.Guid}
      description: Stored value or <xref href="System.Guid.Empty" data-throw-if-not-resolved="false"></xref> when missing
    content.vb: Public Function GetGuidAsync(aKey As String) As Task(Of Guid)
  overload: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetGuidAsync*
  nameWithType.vb: UFKeyedStorageAsync.GetGuidAsync(String)
  fullName.vb: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetGuidAsync(String)
  name.vb: GetGuidAsync(String)
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetGuidAsync(System.String,System.Guid)
  commentId: M:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetGuidAsync(System.String,System.Guid)
  id: SetGuidAsync(System.String,System.Guid)
  parent: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync
  langs:
  - csharp
  - vb
  name: SetGuidAsync(string, Guid)
  nameWithType: UFKeyedStorageAsync.SetGuidAsync(string, Guid)
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetGuidAsync(string, System.Guid)
  type: Method
  source:
    remote:
      path: UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: SetGuidAsync
    path: ../UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
    startLine: 879
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Storage
  summary: >-
    Stores a guid using <xref href="UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetBytesAsync(System.String%2cSystem.Byte%5b%5d)" data-throw-if-not-resolved="false"></xref> and 

    <xref href="System.Guid.ToByteArray" data-throw-if-not-resolved="false"></xref>
  example: []
  syntax:
    content: public virtual Task SetGuidAsync(string aKey, Guid aValue)
    parameters:
    - id: aKey
      type: System.String
      description: Key to store value for
    - id: aValue
      type: System.Guid
      description: Value to store
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Overridable Function SetGuidAsync(aKey As String, aValue As Guid) As Task
  overload: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetGuidAsync*
  nameWithType.vb: UFKeyedStorageAsync.SetGuidAsync(String, Guid)
  fullName.vb: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetGuidAsync(String, System.Guid)
  name.vb: SetGuidAsync(String, Guid)
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetStorableObjectAsync(System.String,UltraForce.Library.NetStandard.Storage.IUFStorableObject)
  commentId: M:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetStorableObjectAsync(System.String,UltraForce.Library.NetStandard.Storage.IUFStorableObject)
  id: GetStorableObjectAsync(System.String,UltraForce.Library.NetStandard.Storage.IUFStorableObject)
  parent: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync
  langs:
  - csharp
  - vb
  name: GetStorableObjectAsync(string, IUFStorableObject)
  nameWithType: UFKeyedStorageAsync.GetStorableObjectAsync(string, IUFStorableObject)
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetStorableObjectAsync(string, UltraForce.Library.NetStandard.Storage.IUFStorableObject)
  type: Method
  source:
    remote:
      path: UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: GetStorableObjectAsync
    path: ../UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
    startLine: 895
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Storage
  summary: >-
    Gets the data by loading it into an object that implements the

    <xref href="UltraForce.Library.NetStandard.Storage.IUFStorableObject" data-throw-if-not-resolved="false"></xref> interface.
  example: []
  syntax:
    content: public virtual Task<IUFStorableObject> GetStorableObjectAsync(string aKey, IUFStorableObject anObject)
    parameters:
    - id: aKey
      type: System.String
      description: Key to get data for
    - id: anObject
      type: UltraForce.Library.NetStandard.Storage.IUFStorableObject
      description: Object to load from the storage
    return:
      type: System.Threading.Tasks.Task{UltraForce.Library.NetStandard.Storage.IUFStorableObject}
      description: Value of <code>anObject</code>
    content.vb: Public Overridable Function GetStorableObjectAsync(aKey As String, anObject As IUFStorableObject) As Task(Of IUFStorableObject)
  overload: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetStorableObjectAsync*
  nameWithType.vb: UFKeyedStorageAsync.GetStorableObjectAsync(String, IUFStorableObject)
  fullName.vb: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetStorableObjectAsync(String, UltraForce.Library.NetStandard.Storage.IUFStorableObject)
  name.vb: GetStorableObjectAsync(String, IUFStorableObject)
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetStorableObjectAsync(System.String,UltraForce.Library.NetStandard.Storage.IUFStorableObject)
  commentId: M:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetStorableObjectAsync(System.String,UltraForce.Library.NetStandard.Storage.IUFStorableObject)
  id: SetStorableObjectAsync(System.String,UltraForce.Library.NetStandard.Storage.IUFStorableObject)
  parent: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync
  langs:
  - csharp
  - vb
  name: SetStorableObjectAsync(string, IUFStorableObject)
  nameWithType: UFKeyedStorageAsync.SetStorableObjectAsync(string, IUFStorableObject)
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetStorableObjectAsync(string, UltraForce.Library.NetStandard.Storage.IUFStorableObject)
  type: Method
  source:
    remote:
      path: UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: SetStorableObjectAsync
    path: ../UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
    startLine: 919
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Storage
  summary: >-
    Sets the data by saving it from an object that implements the

    <xref href="UltraForce.Library.NetStandard.Storage.IUFStorableObject" data-throw-if-not-resolved="false"></xref> interface.

    <p>

    The default implementation uses a <xref href="UltraForce.Library.NetStandard.Storage.UFDictionaryStorage" data-throw-if-not-resolved="false"></xref>

    to store the data as string.

    </p>
  example: []
  syntax:
    content: public virtual Task SetStorableObjectAsync(string aKey, IUFStorableObject anObject)
    parameters:
    - id: aKey
      type: System.String
      description: Key to set data for
    - id: anObject
      type: UltraForce.Library.NetStandard.Storage.IUFStorableObject
      description: Object to save to the storage
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Overridable Function SetStorableObjectAsync(aKey As String, anObject As IUFStorableObject) As Task
  overload: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetStorableObjectAsync*
  nameWithType.vb: UFKeyedStorageAsync.SetStorableObjectAsync(String, IUFStorableObject)
  fullName.vb: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetStorableObjectAsync(String, UltraForce.Library.NetStandard.Storage.IUFStorableObject)
  name.vb: SetStorableObjectAsync(String, IUFStorableObject)
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetObjectAsync(System.String,System.Type)
  commentId: M:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetObjectAsync(System.String,System.Type)
  id: GetObjectAsync(System.String,System.Type)
  parent: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync
  langs:
  - csharp
  - vb
  name: GetObjectAsync(string, Type?)
  nameWithType: UFKeyedStorageAsync.GetObjectAsync(string, Type?)
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetObjectAsync(string, System.Type?)
  type: Method
  source:
    remote:
      path: UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: GetObjectAsync
    path: ../UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
    startLine: 967
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Storage
  summary: Gets an object of a specific type.
  remarks: >-
    The default implementation checks for certain type situations.

    <p>

    If the object is a primitive type, its value gets retrieved with one

    of the GetXXXX methods.

    </p>

    <p>

    If the object implements the <xref href="UltraForce.Library.NetStandard.Storage.IUFStorableObject" data-throw-if-not-resolved="false"></xref> interface

    the method uses <xref href="UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetStorableObjectAsync(System.String%2cUltraForce.Library.NetStandard.Storage.IUFStorableObject)" data-throw-if-not-resolved="false"></xref> using aKey.

    </p>

    <p>

    If the object is a <xref href="System.DateTime" data-throw-if-not-resolved="false"></xref> the data is retrieved via

    <xref href="UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetDateTimeAsync(System.String)" data-throw-if-not-resolved="false"></xref>.

    </p>

    <p>

    If the object is a <xref href="System.Guid" data-throw-if-not-resolved="false"></xref> the data is retrieved via

    <xref href="UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetGuidAsync(System.String)" data-throw-if-not-resolved="false"></xref>.

    </p>

    <p>

    If the object is a <xref href="System.String" data-throw-if-not-resolved="false"></xref> the method uses 

    <xref href="UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetStringAsync(System.String)" data-throw-if-not-resolved="false"></xref> to get its value.

    </p>

    <p>

    If the object is a nullable value, the method will return null if

    no data exists (null values are not stored) or will call itself

    recursively using the underlying type.

    </p>

    <p>

    If none of the above fits, the method will call 

    <xref href="UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.DeserializeObjectAsync(System.String%2cSystem.Type)" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public virtual Task<object?> GetObjectAsync(string aKey, Type? aType)
    parameters:
    - id: aKey
      type: System.String
      description: Key to get object for
    - id: aType
      type: System.Type
      description: Type of object or null if type is unknown
    return:
      type: System.Threading.Tasks.Task{System.Object}
      description: Object instance or null if none was found
    content.vb: Public Overridable Function GetObjectAsync(aKey As String, aType As Type) As Task(Of Object)
  overload: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetObjectAsync*
  nameWithType.vb: UFKeyedStorageAsync.GetObjectAsync(String, Type)
  fullName.vb: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetObjectAsync(String, System.Type)
  name.vb: GetObjectAsync(String, Type)
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetObjectAsync``1(System.String)
  commentId: M:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetObjectAsync``1(System.String)
  id: GetObjectAsync``1(System.String)
  parent: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync
  langs:
  - csharp
  - vb
  name: GetObjectAsync<T>(string)
  nameWithType: UFKeyedStorageAsync.GetObjectAsync<T>(string)
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetObjectAsync<T>(string)
  type: Method
  source:
    remote:
      path: UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: GetObjectAsync
    path: ../UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
    startLine: 1032
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Storage
  summary: A generic version of <xref href="UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetObjectAsync(System.String%2cSystem.Type)" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public Task<T?> GetObjectAsync<T>(string aKey)
    parameters:
    - id: aKey
      type: System.String
      description: Key to get object for
    typeParameters:
    - id: T
      description: Type of object to get
    return:
      type: System.Threading.Tasks.Task{{T}}
      description: object
    content.vb: Public Function GetObjectAsync(Of T)(aKey As String) As Task(Of T)
  overload: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetObjectAsync*
  nameWithType.vb: UFKeyedStorageAsync.GetObjectAsync(Of T)(String)
  fullName.vb: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetObjectAsync(Of T)(String)
  name.vb: GetObjectAsync(Of T)(String)
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetObjectAsync(System.String,System.Object,System.Type)
  commentId: M:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetObjectAsync(System.String,System.Object,System.Type)
  id: SetObjectAsync(System.String,System.Object,System.Type)
  parent: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync
  langs:
  - csharp
  - vb
  name: SetObjectAsync(string, object?, Type?)
  nameWithType: UFKeyedStorageAsync.SetObjectAsync(string, object?, Type?)
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetObjectAsync(string, object?, System.Type?)
  type: Method
  source:
    remote:
      path: UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: SetObjectAsync
    path: ../UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
    startLine: 1079
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Storage
  summary: Stores an object to the storage.
  remarks: >-
    The default implementation checks for certain type situations.

    <p>

    If the object is null, the method will remove the data stored with

    the key value by calling <xref href="UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.DeleteKeyAsync(System.String)" data-throw-if-not-resolved="false"></xref>

    </p>

    <p>

    If the object is a primitive type, its value gets stored with one

    of the SetXXXX methods.

    </p>

    <p>

    If the object implements the <xref href="UltraForce.Library.NetStandard.Storage.IUFStorableObject" data-throw-if-not-resolved="false"></xref> interface

    the method uses <xref href="UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetStorableObjectAsync(System.String%2cUltraForce.Library.NetStandard.Storage.IUFStorableObject)" data-throw-if-not-resolved="false"></xref>.

    </p>

    <p>

    If the object is a <xref href="System.DateTime" data-throw-if-not-resolved="false"></xref> the data is stored via

    <xref href="UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetDateTimeAsync(System.String%2cSystem.DateTime)" data-throw-if-not-resolved="false"></xref>.

    </p>

    <p>

    If the object is a <xref href="System.Guid" data-throw-if-not-resolved="false"></xref> the data is stored via

    <xref href="UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetGuidAsync(System.String%2cSystem.Guid)" data-throw-if-not-resolved="false"></xref>.

    </p>

    <p>

    If the object is a <xref href="System.String" data-throw-if-not-resolved="false"></xref> the method uses 

    <xref href="UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetStringAsync(System.String%2cSystem.String)" data-throw-if-not-resolved="false"></xref> to store its value.

    </p>

    <p>

    If the object is a nullable value, the method will remove any value

    stored with aKey if the object is null else it will call itself

    recursively using the underlying type.

    </p>

    <p>

    If none of the above fits, the method will call 

    <xref href="UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SerializeObjectAsync(System.String%2cSystem.Object)" data-throw-if-not-resolved="false"></xref>.

    </p>
  example: []
  syntax:
    content: public virtual Task SetObjectAsync(string aKey, object? anObject, Type? aType)
    parameters:
    - id: aKey
      type: System.String
      description: ''
    - id: anObject
      type: System.Object
      description: ''
    - id: aType
      type: System.Type
      description: ''
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Overridable Function SetObjectAsync(aKey As String, anObject As Object, aType As Type) As Task
  overload: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetObjectAsync*
  nameWithType.vb: UFKeyedStorageAsync.SetObjectAsync(String, Object, Type)
  fullName.vb: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetObjectAsync(String, Object, System.Type)
  name.vb: SetObjectAsync(String, Object, Type)
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetObjectAsync(System.String,System.Object)
  commentId: M:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetObjectAsync(System.String,System.Object)
  id: SetObjectAsync(System.String,System.Object)
  parent: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync
  langs:
  - csharp
  - vb
  name: SetObjectAsync(string, object?)
  nameWithType: UFKeyedStorageAsync.SetObjectAsync(string, object?)
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetObjectAsync(string, object?)
  type: Method
  source:
    remote:
      path: UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: SetObjectAsync
    path: ../UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
    startLine: 1156
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Storage
  summary: Stores an object.
  example: []
  syntax:
    content: public Task SetObjectAsync(string aKey, object? anObject)
    parameters:
    - id: aKey
      type: System.String
      description: Key to store object for
    - id: anObject
      type: System.Object
      description: Object to store
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function SetObjectAsync(aKey As String, anObject As Object) As Task
  overload: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetObjectAsync*
  nameWithType.vb: UFKeyedStorageAsync.SetObjectAsync(String, Object)
  fullName.vb: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetObjectAsync(String, Object)
  name.vb: SetObjectAsync(String, Object)
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetObjectAsync``1(System.String,``0)
  commentId: M:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetObjectAsync``1(System.String,``0)
  id: SetObjectAsync``1(System.String,``0)
  parent: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync
  langs:
  - csharp
  - vb
  name: SetObjectAsync<T>(string, T)
  nameWithType: UFKeyedStorageAsync.SetObjectAsync<T>(string, T)
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetObjectAsync<T>(string, T)
  type: Method
  source:
    remote:
      path: UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: SetObjectAsync
    path: ../UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
    startLine: 1167
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Storage
  summary: Generic version of <xref href="UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetObjectAsync(System.String%2cSystem.Object%2cSystem.Type)" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public Task SetObjectAsync<T>(string aKey, T anObject)
    parameters:
    - id: aKey
      type: System.String
      description: Key to store object for
    - id: anObject
      type: '{T}'
      description: Object to store
    typeParameters:
    - id: T
      description: Type to store
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function SetObjectAsync(Of T)(aKey As String, anObject As T) As Task
  overload: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetObjectAsync*
  nameWithType.vb: UFKeyedStorageAsync.SetObjectAsync(Of T)(String, T)
  fullName.vb: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetObjectAsync(Of T)(String, T)
  name.vb: SetObjectAsync(Of T)(String, T)
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.DeleteAllAsync
  commentId: M:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.DeleteAllAsync
  id: DeleteAllAsync
  parent: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync
  langs:
  - csharp
  - vb
  name: DeleteAllAsync()
  nameWithType: UFKeyedStorageAsync.DeleteAllAsync()
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.DeleteAllAsync()
  type: Method
  source:
    remote:
      path: UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: DeleteAllAsync
    path: ../UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
    startLine: 1181
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Storage
  summary: >-
    Deletes all stored data.

    <p>

    The default implemetnation does nothing.

    </p>
  example: []
  syntax:
    content: public virtual Task DeleteAllAsync()
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Overridable Function DeleteAllAsync() As Task
  overload: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.DeleteAllAsync*
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.DeleteKeyAsync(System.String)
  commentId: M:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.DeleteKeyAsync(System.String)
  id: DeleteKeyAsync(System.String)
  parent: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync
  langs:
  - csharp
  - vb
  name: DeleteKeyAsync(string)
  nameWithType: UFKeyedStorageAsync.DeleteKeyAsync(string)
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.DeleteKeyAsync(string)
  type: Method
  source:
    remote:
      path: UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: DeleteKeyAsync
    path: ../UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
    startLine: 1192
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Storage
  summary: Deletes the data for specific key.
  example: []
  syntax:
    content: public abstract Task DeleteKeyAsync(string aKey)
    parameters:
    - id: aKey
      type: System.String
      description: A key to Delete the data for.
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public MustOverride Function DeleteKeyAsync(aKey As String) As Task
  overload: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.DeleteKeyAsync*
  nameWithType.vb: UFKeyedStorageAsync.DeleteKeyAsync(String)
  fullName.vb: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.DeleteKeyAsync(String)
  name.vb: DeleteKeyAsync(String)
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.HasKeyAsync(System.String)
  commentId: M:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.HasKeyAsync(System.String)
  id: HasKeyAsync(System.String)
  parent: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync
  langs:
  - csharp
  - vb
  name: HasKeyAsync(string)
  nameWithType: UFKeyedStorageAsync.HasKeyAsync(string)
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.HasKeyAsync(string)
  type: Method
  source:
    remote:
      path: UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: HasKeyAsync
    path: ../UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
    startLine: 1203
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Storage
  summary: Checks if there is a locally stored data for a specific key.
  example: []
  syntax:
    content: public abstract Task<bool> HasKeyAsync(string aKey)
    parameters:
    - id: aKey
      type: System.String
      description: A key to check.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: True if has there is data for the key; otherwise, false.
    content.vb: Public MustOverride Function HasKeyAsync(aKey As String) As Task(Of Boolean)
  overload: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.HasKeyAsync*
  nameWithType.vb: UFKeyedStorageAsync.HasKeyAsync(String)
  fullName.vb: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.HasKeyAsync(String)
  name.vb: HasKeyAsync(String)
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SerializeObjectAsync(System.String,System.Object)
  commentId: M:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SerializeObjectAsync(System.String,System.Object)
  id: SerializeObjectAsync(System.String,System.Object)
  parent: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync
  langs:
  - csharp
  - vb
  name: SerializeObjectAsync(string, object)
  nameWithType: UFKeyedStorageAsync.SerializeObjectAsync(string, object)
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SerializeObjectAsync(string, object)
  type: Method
  source:
    remote:
      path: UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: SerializeObjectAsync
    path: ../UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
    startLine: 1218
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Storage
  summary: >-
    Serializes an object. This method is called when the class can not

    store the object in any other way.

    <p>

    The default implementation throws an exception. 

    </p>
  example: []
  syntax:
    content: protected virtual Task SerializeObjectAsync(string aKey, object anObject)
    parameters:
    - id: aKey
      type: System.String
      description: Key to store serializes object with
    - id: anObject
      type: System.Object
      description: Object to store
    return:
      type: System.Threading.Tasks.Task
    content.vb: Protected Overridable Function SerializeObjectAsync(aKey As String, anObject As Object) As Task
  overload: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SerializeObjectAsync*
  nameWithType.vb: UFKeyedStorageAsync.SerializeObjectAsync(String, Object)
  fullName.vb: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SerializeObjectAsync(String, Object)
  name.vb: SerializeObjectAsync(String, Object)
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.DeserializeObjectAsync(System.String,System.Type)
  commentId: M:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.DeserializeObjectAsync(System.String,System.Type)
  id: DeserializeObjectAsync(System.String,System.Type)
  parent: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync
  langs:
  - csharp
  - vb
  name: DeserializeObjectAsync(string, Type?)
  nameWithType: UFKeyedStorageAsync.DeserializeObjectAsync(string, Type?)
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.DeserializeObjectAsync(string, System.Type?)
  type: Method
  source:
    remote:
      path: UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: DeserializeObjectAsync
    path: ../UltraForce.Library.NetStandard/Storage/UFKeyedStorageAsync.cs
    startLine: 1235
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Storage
  summary: >-
    Deserializes an object that was stored previously with 

    <xref href="UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SerializeObjectAsync(System.String%2cSystem.Object)" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: protected virtual Task<object> DeserializeObjectAsync(string aKey, Type? aType)
    parameters:
    - id: aKey
      type: System.String
      description: Key to retrieve serialized object with
    - id: aType
      type: System.Type
      description: Type of object to create (might be null)
    return:
      type: System.Threading.Tasks.Task{System.Object}
      description: Retrieved object
    content.vb: Protected Overridable Function DeserializeObjectAsync(aKey As String, aType As Type) As Task(Of Object)
  overload: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.DeserializeObjectAsync*
  nameWithType.vb: UFKeyedStorageAsync.DeserializeObjectAsync(String, Type)
  fullName.vb: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.DeserializeObjectAsync(String, System.Type)
  name.vb: DeserializeObjectAsync(String, Type)
references:
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync
  commentId: T:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync
  parent: UltraForce.Library.NetStandard.Storage
  href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html
  name: UFKeyedStorageAsync
  nameWithType: UFKeyedStorageAsync
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorage
  commentId: T:UltraForce.Library.NetStandard.Storage.UFKeyedStorage
  parent: UltraForce.Library.NetStandard.Storage
  href: UltraForce.Library.NetStandard.Storage.UFKeyedStorage.html
  name: UFKeyedStorage
  nameWithType: UFKeyedStorage
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorage
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetStringAsync(System.String)
  commentId: M:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetStringAsync(System.String)
  parent: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync
  isExternal: true
  href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_GetStringAsync_System_String_
  name: GetStringAsync(string)
  nameWithType: UFKeyedStorageAsync.GetStringAsync(string)
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetStringAsync(string)
  nameWithType.vb: UFKeyedStorageAsync.GetStringAsync(String)
  fullName.vb: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetStringAsync(String)
  name.vb: GetStringAsync(String)
  spec.csharp:
  - uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetStringAsync(System.String)
    name: GetStringAsync
    href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_GetStringAsync_System_String_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetStringAsync(System.String)
    name: GetStringAsync
    href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_GetStringAsync_System_String_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetStringAsync(System.String,System.String)
  commentId: M:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetStringAsync(System.String,System.String)
  parent: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync
  isExternal: true
  href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_SetStringAsync_System_String_System_String_
  name: SetStringAsync(string, string)
  nameWithType: UFKeyedStorageAsync.SetStringAsync(string, string)
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetStringAsync(string, string)
  nameWithType.vb: UFKeyedStorageAsync.SetStringAsync(String, String)
  fullName.vb: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetStringAsync(String, String)
  name.vb: SetStringAsync(String, String)
  spec.csharp:
  - uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetStringAsync(System.String,System.String)
    name: SetStringAsync
    href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_SetStringAsync_System_String_System_String_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetStringAsync(System.String,System.String)
    name: SetStringAsync
    href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_SetStringAsync_System_String_System_String_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetStringAsync(System.String,System.String)
  commentId: M:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetStringAsync(System.String,System.String)
  parent: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync
  isExternal: true
  href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_GetStringAsync_System_String_System_String_
  name: GetStringAsync(string, string)
  nameWithType: UFKeyedStorageAsync.GetStringAsync(string, string)
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetStringAsync(string, string)
  nameWithType.vb: UFKeyedStorageAsync.GetStringAsync(String, String)
  fullName.vb: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetStringAsync(String, String)
  name.vb: GetStringAsync(String, String)
  spec.csharp:
  - uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetStringAsync(System.String,System.String)
    name: GetStringAsync
    href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_GetStringAsync_System_String_System_String_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetStringAsync(System.String,System.String)
    name: GetStringAsync
    href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_GetStringAsync_System_String_System_String_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.HasKeyAsync(System.String)
  commentId: M:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.HasKeyAsync(System.String)
  parent: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync
  isExternal: true
  href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_HasKeyAsync_System_String_
  name: HasKeyAsync(string)
  nameWithType: UFKeyedStorageAsync.HasKeyAsync(string)
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.HasKeyAsync(string)
  nameWithType.vb: UFKeyedStorageAsync.HasKeyAsync(String)
  fullName.vb: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.HasKeyAsync(String)
  name.vb: HasKeyAsync(String)
  spec.csharp:
  - uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.HasKeyAsync(System.String)
    name: HasKeyAsync
    href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_HasKeyAsync_System_String_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.HasKeyAsync(System.String)
    name: HasKeyAsync
    href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_HasKeyAsync_System_String_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.DeleteKeyAsync(System.String)
  commentId: M:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.DeleteKeyAsync(System.String)
  parent: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync
  isExternal: true
  href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_DeleteKeyAsync_System_String_
  name: DeleteKeyAsync(string)
  nameWithType: UFKeyedStorageAsync.DeleteKeyAsync(string)
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.DeleteKeyAsync(string)
  nameWithType.vb: UFKeyedStorageAsync.DeleteKeyAsync(String)
  fullName.vb: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.DeleteKeyAsync(String)
  name.vb: DeleteKeyAsync(String)
  spec.csharp:
  - uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.DeleteKeyAsync(System.String)
    name: DeleteKeyAsync
    href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_DeleteKeyAsync_System_String_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.DeleteKeyAsync(System.String)
    name: DeleteKeyAsync
    href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_DeleteKeyAsync_System_String_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.DeleteAllAsync
  commentId: M:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.DeleteAllAsync
  parent: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync
  href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_DeleteAllAsync
  name: DeleteAllAsync()
  nameWithType: UFKeyedStorageAsync.DeleteAllAsync()
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.DeleteAllAsync()
  spec.csharp:
  - uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.DeleteAllAsync
    name: DeleteAllAsync
    href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_DeleteAllAsync
  - name: (
  - name: )
  spec.vb:
  - uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.DeleteAllAsync
    name: DeleteAllAsync
    href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_DeleteAllAsync
  - name: (
  - name: )
- uid: UltraForce.Library.NetStandard.Storage
  commentId: N:UltraForce.Library.NetStandard.Storage
  href: UltraForce.html
  name: UltraForce.Library.NetStandard.Storage
  nameWithType: UltraForce.Library.NetStandard.Storage
  fullName: UltraForce.Library.NetStandard.Storage
  spec.csharp:
  - uid: UltraForce
    name: UltraForce
    href: UltraForce.html
  - name: .
  - uid: UltraForce.Library
    name: Library
    href: UltraForce.Library.html
  - name: .
  - uid: UltraForce.Library.NetStandard
    name: NetStandard
    href: UltraForce.Library.NetStandard.html
  - name: .
  - uid: UltraForce.Library.NetStandard.Storage
    name: Storage
    href: UltraForce.Library.NetStandard.Storage.html
  spec.vb:
  - uid: UltraForce
    name: UltraForce
    href: UltraForce.html
  - name: .
  - uid: UltraForce.Library
    name: Library
    href: UltraForce.Library.html
  - name: .
  - uid: UltraForce.Library.NetStandard
    name: NetStandard
    href: UltraForce.Library.NetStandard.html
  - name: .
  - uid: UltraForce.Library.NetStandard.Storage
    name: Storage
    href: UltraForce.Library.NetStandard.Storage.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.#ctor*
  commentId: Overload:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.#ctor
  href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync__ctor
  name: UFKeyedStorageAsync
  nameWithType: UFKeyedStorageAsync.UFKeyedStorageAsync
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.UFKeyedStorageAsync
  nameWithType.vb: UFKeyedStorageAsync.New
  fullName.vb: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.New
  name.vb: New
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetStringAsync*
  commentId: Overload:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetStringAsync
  href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_GetStringAsync_System_String_System_String_
  name: GetStringAsync
  nameWithType: UFKeyedStorageAsync.GetStringAsync
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetStringAsync
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.Threading.Tasks.Task{System.String}
  commentId: T:System.Threading.Tasks.Task{System.String}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<string>
  nameWithType: Task<string>
  fullName: System.Threading.Tasks.Task<string>
  nameWithType.vb: Task(Of String)
  fullName.vb: System.Threading.Tasks.Task(Of String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetStringAsync*
  commentId: Overload:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetStringAsync
  href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_SetStringAsync_System_String_System_String_
  name: SetStringAsync
  nameWithType: UFKeyedStorageAsync.SetStringAsync
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetStringAsync
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetIntAsync(System.String)
  commentId: M:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetIntAsync(System.String)
  parent: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync
  isExternal: true
  href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_GetIntAsync_System_String_
  name: GetIntAsync(string)
  nameWithType: UFKeyedStorageAsync.GetIntAsync(string)
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetIntAsync(string)
  nameWithType.vb: UFKeyedStorageAsync.GetIntAsync(String)
  fullName.vb: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetIntAsync(String)
  name.vb: GetIntAsync(String)
  spec.csharp:
  - uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetIntAsync(System.String)
    name: GetIntAsync
    href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_GetIntAsync_System_String_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetIntAsync(System.String)
    name: GetIntAsync
    href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_GetIntAsync_System_String_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetByteAsync*
  commentId: Overload:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetByteAsync
  href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_GetByteAsync_System_String_System_Byte_
  name: GetByteAsync
  nameWithType: UFKeyedStorageAsync.GetByteAsync
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetByteAsync
- uid: System.Byte
  commentId: T:System.Byte
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.byte
  name: byte
  nameWithType: byte
  fullName: byte
  nameWithType.vb: Byte
  fullName.vb: Byte
  name.vb: Byte
- uid: System.Threading.Tasks.Task{System.Byte}
  commentId: T:System.Threading.Tasks.Task{System.Byte}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<byte>
  nameWithType: Task<byte>
  fullName: System.Threading.Tasks.Task<byte>
  nameWithType.vb: Task(Of Byte)
  fullName.vb: System.Threading.Tasks.Task(Of Byte)
  name.vb: Task(Of Byte)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Byte
    name: byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Byte
    name: Byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: )
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetIntAsync(System.String,System.Int32)
  commentId: M:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetIntAsync(System.String,System.Int32)
  parent: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync
  isExternal: true
  href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_SetIntAsync_System_String_System_Int32_
  name: SetIntAsync(string, int)
  nameWithType: UFKeyedStorageAsync.SetIntAsync(string, int)
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetIntAsync(string, int)
  nameWithType.vb: UFKeyedStorageAsync.SetIntAsync(String, Integer)
  fullName.vb: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetIntAsync(String, Integer)
  name.vb: SetIntAsync(String, Integer)
  spec.csharp:
  - uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetIntAsync(System.String,System.Int32)
    name: SetIntAsync
    href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_SetIntAsync_System_String_System_Int32_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetIntAsync(System.String,System.Int32)
    name: SetIntAsync
    href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_SetIntAsync_System_String_System_Int32_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetByteAsync*
  commentId: Overload:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetByteAsync
  href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_SetByteAsync_System_String_System_Byte_
  name: SetByteAsync
  nameWithType: UFKeyedStorageAsync.SetByteAsync
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetByteAsync
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetSByteAsync*
  commentId: Overload:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetSByteAsync
  href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_GetSByteAsync_System_String_System_SByte_
  name: GetSByteAsync
  nameWithType: UFKeyedStorageAsync.GetSByteAsync
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetSByteAsync
- uid: System.SByte
  commentId: T:System.SByte
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.sbyte
  name: sbyte
  nameWithType: sbyte
  fullName: sbyte
  nameWithType.vb: SByte
  fullName.vb: SByte
  name.vb: SByte
- uid: System.Threading.Tasks.Task{System.SByte}
  commentId: T:System.Threading.Tasks.Task{System.SByte}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<sbyte>
  nameWithType: Task<sbyte>
  fullName: System.Threading.Tasks.Task<sbyte>
  nameWithType.vb: Task(Of SByte)
  fullName.vb: System.Threading.Tasks.Task(Of SByte)
  name.vb: Task(Of SByte)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.SByte
    name: sbyte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.sbyte
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.SByte
    name: SByte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.sbyte
  - name: )
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetSByteAsync*
  commentId: Overload:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetSByteAsync
  href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_SetSByteAsync_System_String_System_SByte_
  name: SetSByteAsync
  nameWithType: UFKeyedStorageAsync.SetSByteAsync
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetSByteAsync
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetShortAsync*
  commentId: Overload:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetShortAsync
  href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_GetShortAsync_System_String_System_Int16_
  name: GetShortAsync
  nameWithType: UFKeyedStorageAsync.GetShortAsync
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetShortAsync
- uid: System.Int16
  commentId: T:System.Int16
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int16
  name: short
  nameWithType: short
  fullName: short
  nameWithType.vb: Short
  fullName.vb: Short
  name.vb: Short
- uid: System.Threading.Tasks.Task{System.Int16}
  commentId: T:System.Threading.Tasks.Task{System.Int16}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<short>
  nameWithType: Task<short>
  fullName: System.Threading.Tasks.Task<short>
  nameWithType.vb: Task(Of Short)
  fullName.vb: System.Threading.Tasks.Task(Of Short)
  name.vb: Task(Of Short)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Int16
    name: short
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int16
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Int16
    name: Short
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int16
  - name: )
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetShortAsync*
  commentId: Overload:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetShortAsync
  href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_SetShortAsync_System_String_System_Int16_
  name: SetShortAsync
  nameWithType: UFKeyedStorageAsync.SetShortAsync
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetShortAsync
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetUShortAsync*
  commentId: Overload:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetUShortAsync
  href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_GetUShortAsync_System_String_System_UInt16_
  name: GetUShortAsync
  nameWithType: UFKeyedStorageAsync.GetUShortAsync
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetUShortAsync
- uid: System.UInt16
  commentId: T:System.UInt16
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.uint16
  name: ushort
  nameWithType: ushort
  fullName: ushort
  nameWithType.vb: UShort
  fullName.vb: UShort
  name.vb: UShort
- uid: System.Threading.Tasks.Task{System.UInt16}
  commentId: T:System.Threading.Tasks.Task{System.UInt16}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<ushort>
  nameWithType: Task<ushort>
  fullName: System.Threading.Tasks.Task<ushort>
  nameWithType.vb: Task(Of UShort)
  fullName.vb: System.Threading.Tasks.Task(Of UShort)
  name.vb: Task(Of UShort)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.UInt16
    name: ushort
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint16
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.UInt16
    name: UShort
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint16
  - name: )
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetUShortAsync*
  commentId: Overload:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetUShortAsync
  href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_SetUShortAsync_System_String_System_UInt16_
  name: SetUShortAsync
  nameWithType: UFKeyedStorageAsync.SetUShortAsync
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetUShortAsync
- uid: System.Int32.Parse(System.String)
  commentId: M:System.Int32.Parse(System.String)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32.parse#system-int32-parse(system-string)
  name: Parse(string)
  nameWithType: int.Parse(string)
  fullName: int.Parse(string)
  nameWithType.vb: Integer.Parse(String)
  fullName.vb: Integer.Parse(String)
  name.vb: Parse(String)
  spec.csharp:
  - uid: System.Int32.Parse(System.String)
    name: Parse
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32.parse#system-int32-parse(system-string)
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: System.Int32.Parse(System.String)
    name: Parse
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32.parse#system-int32-parse(system-string)
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetIntAsync*
  commentId: Overload:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetIntAsync
  href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_GetIntAsync_System_String_System_Int32_
  name: GetIntAsync
  nameWithType: UFKeyedStorageAsync.GetIntAsync
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetIntAsync
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System.Threading.Tasks.Task{System.Int32}
  commentId: T:System.Threading.Tasks.Task{System.Int32}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<int>
  nameWithType: Task<int>
  fullName: System.Threading.Tasks.Task<int>
  nameWithType.vb: Task(Of Integer)
  fullName.vb: System.Threading.Tasks.Task(Of Integer)
  name.vb: Task(Of Integer)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetIntAsync*
  commentId: Overload:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetIntAsync
  href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_SetIntAsync_System_String_System_Int32_
  name: SetIntAsync
  nameWithType: UFKeyedStorageAsync.SetIntAsync
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetIntAsync
- uid: System.UInt32.Parse(System.String)
  commentId: M:System.UInt32.Parse(System.String)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.uint32.parse#system-uint32-parse(system-string)
  name: Parse(string)
  nameWithType: uint.Parse(string)
  fullName: uint.Parse(string)
  nameWithType.vb: UInteger.Parse(String)
  fullName.vb: UInteger.Parse(String)
  name.vb: Parse(String)
  spec.csharp:
  - uid: System.UInt32.Parse(System.String)
    name: Parse
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint32.parse#system-uint32-parse(system-string)
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: System.UInt32.Parse(System.String)
    name: Parse
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint32.parse#system-uint32-parse(system-string)
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetUIntAsync*
  commentId: Overload:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetUIntAsync
  href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_GetUIntAsync_System_String_System_UInt32_
  name: GetUIntAsync
  nameWithType: UFKeyedStorageAsync.GetUIntAsync
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetUIntAsync
- uid: System.UInt32
  commentId: T:System.UInt32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.uint32
  name: uint
  nameWithType: uint
  fullName: uint
  nameWithType.vb: UInteger
  fullName.vb: UInteger
  name.vb: UInteger
- uid: System.Threading.Tasks.Task{System.UInt32}
  commentId: T:System.Threading.Tasks.Task{System.UInt32}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<uint>
  nameWithType: Task<uint>
  fullName: System.Threading.Tasks.Task<uint>
  nameWithType.vb: Task(Of UInteger)
  fullName.vb: System.Threading.Tasks.Task(Of UInteger)
  name.vb: Task(Of UInteger)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.UInt32
    name: uint
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint32
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.UInt32
    name: UInteger
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint32
  - name: )
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetUIntAsync*
  commentId: Overload:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetUIntAsync
  href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_SetUIntAsync_System_String_System_UInt32_
  name: SetUIntAsync
  nameWithType: UFKeyedStorageAsync.SetUIntAsync
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetUIntAsync
- uid: System.Int64.Parse(System.String)
  commentId: M:System.Int64.Parse(System.String)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int64.parse#system-int64-parse(system-string)
  name: Parse(string)
  nameWithType: long.Parse(string)
  fullName: long.Parse(string)
  nameWithType.vb: Long.Parse(String)
  fullName.vb: Long.Parse(String)
  name.vb: Parse(String)
  spec.csharp:
  - uid: System.Int64.Parse(System.String)
    name: Parse
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int64.parse#system-int64-parse(system-string)
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: System.Int64.Parse(System.String)
    name: Parse
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int64.parse#system-int64-parse(system-string)
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetLongAsync*
  commentId: Overload:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetLongAsync
  href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_GetLongAsync_System_String_System_Int64_
  name: GetLongAsync
  nameWithType: UFKeyedStorageAsync.GetLongAsync
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetLongAsync
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int64
  name: long
  nameWithType: long
  fullName: long
  nameWithType.vb: Long
  fullName.vb: Long
  name.vb: Long
- uid: System.Threading.Tasks.Task{System.Int64}
  commentId: T:System.Threading.Tasks.Task{System.Int64}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<long>
  nameWithType: Task<long>
  fullName: System.Threading.Tasks.Task<long>
  nameWithType.vb: Task(Of Long)
  fullName.vb: System.Threading.Tasks.Task(Of Long)
  name.vb: Task(Of Long)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Int64
    name: long
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int64
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Int64
    name: Long
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int64
  - name: )
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetLongAsync*
  commentId: Overload:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetLongAsync
  href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_SetLongAsync_System_String_System_Int64_
  name: SetLongAsync
  nameWithType: UFKeyedStorageAsync.SetLongAsync
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetLongAsync
- uid: System.UInt64.Parse(System.String)
  commentId: M:System.UInt64.Parse(System.String)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.uint64.parse#system-uint64-parse(system-string)
  name: Parse(string)
  nameWithType: ulong.Parse(string)
  fullName: ulong.Parse(string)
  nameWithType.vb: ULong.Parse(String)
  fullName.vb: ULong.Parse(String)
  name.vb: Parse(String)
  spec.csharp:
  - uid: System.UInt64.Parse(System.String)
    name: Parse
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64.parse#system-uint64-parse(system-string)
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: System.UInt64.Parse(System.String)
    name: Parse
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64.parse#system-uint64-parse(system-string)
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetULongAsync*
  commentId: Overload:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetULongAsync
  href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_GetULongAsync_System_String_System_UInt64_
  name: GetULongAsync
  nameWithType: UFKeyedStorageAsync.GetULongAsync
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetULongAsync
- uid: System.UInt64
  commentId: T:System.UInt64
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.uint64
  name: ulong
  nameWithType: ulong
  fullName: ulong
  nameWithType.vb: ULong
  fullName.vb: ULong
  name.vb: ULong
- uid: System.Threading.Tasks.Task{System.UInt64}
  commentId: T:System.Threading.Tasks.Task{System.UInt64}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<ulong>
  nameWithType: Task<ulong>
  fullName: System.Threading.Tasks.Task<ulong>
  nameWithType.vb: Task(Of ULong)
  fullName.vb: System.Threading.Tasks.Task(Of ULong)
  name.vb: Task(Of ULong)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.UInt64
    name: ulong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.UInt64
    name: ULong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: )
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetULongAsync*
  commentId: Overload:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetULongAsync
  href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_SetULongAsync_System_String_System_UInt64_
  name: SetULongAsync
  nameWithType: UFKeyedStorageAsync.SetULongAsync
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetULongAsync
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetDoubleAsync(System.String)
  commentId: M:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetDoubleAsync(System.String)
  parent: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync
  isExternal: true
  href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_GetDoubleAsync_System_String_
  name: GetDoubleAsync(string)
  nameWithType: UFKeyedStorageAsync.GetDoubleAsync(string)
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetDoubleAsync(string)
  nameWithType.vb: UFKeyedStorageAsync.GetDoubleAsync(String)
  fullName.vb: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetDoubleAsync(String)
  name.vb: GetDoubleAsync(String)
  spec.csharp:
  - uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetDoubleAsync(System.String)
    name: GetDoubleAsync
    href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_GetDoubleAsync_System_String_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetDoubleAsync(System.String)
    name: GetDoubleAsync
    href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_GetDoubleAsync_System_String_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetFloatAsync*
  commentId: Overload:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetFloatAsync
  href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_GetFloatAsync_System_String_System_Single_
  name: GetFloatAsync
  nameWithType: UFKeyedStorageAsync.GetFloatAsync
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetFloatAsync
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: System.Threading.Tasks.Task{System.Single}
  commentId: T:System.Threading.Tasks.Task{System.Single}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<float>
  nameWithType: Task<float>
  fullName: System.Threading.Tasks.Task<float>
  nameWithType.vb: Task(Of Single)
  fullName.vb: System.Threading.Tasks.Task(Of Single)
  name.vb: Task(Of Single)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetDoubleAsync(System.String,System.Double)
  commentId: M:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetDoubleAsync(System.String,System.Double)
  parent: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync
  isExternal: true
  href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_SetDoubleAsync_System_String_System_Double_
  name: SetDoubleAsync(string, double)
  nameWithType: UFKeyedStorageAsync.SetDoubleAsync(string, double)
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetDoubleAsync(string, double)
  nameWithType.vb: UFKeyedStorageAsync.SetDoubleAsync(String, Double)
  fullName.vb: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetDoubleAsync(String, Double)
  name.vb: SetDoubleAsync(String, Double)
  spec.csharp:
  - uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetDoubleAsync(System.String,System.Double)
    name: SetDoubleAsync
    href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_SetDoubleAsync_System_String_System_Double_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Double
    name: double
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.double
  - name: )
  spec.vb:
  - uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetDoubleAsync(System.String,System.Double)
    name: SetDoubleAsync
    href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_SetDoubleAsync_System_String_System_Double_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Double
    name: Double
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.double
  - name: )
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetFloatAsync*
  commentId: Overload:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetFloatAsync
  href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_SetFloatAsync_System_String_System_Single_
  name: SetFloatAsync
  nameWithType: UFKeyedStorageAsync.SetFloatAsync
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetFloatAsync
- uid: System.Double.Parse(System.String)
  commentId: M:System.Double.Parse(System.String)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.double.parse#system-double-parse(system-string)
  name: Parse(string)
  nameWithType: double.Parse(string)
  fullName: double.Parse(string)
  nameWithType.vb: Double.Parse(String)
  fullName.vb: Double.Parse(String)
  name.vb: Parse(String)
  spec.csharp:
  - uid: System.Double.Parse(System.String)
    name: Parse
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.double.parse#system-double-parse(system-string)
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: System.Double.Parse(System.String)
    name: Parse
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.double.parse#system-double-parse(system-string)
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetDoubleAsync*
  commentId: Overload:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetDoubleAsync
  href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_GetDoubleAsync_System_String_System_Double_
  name: GetDoubleAsync
  nameWithType: UFKeyedStorageAsync.GetDoubleAsync
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetDoubleAsync
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.double
  name: double
  nameWithType: double
  fullName: double
  nameWithType.vb: Double
  fullName.vb: Double
  name.vb: Double
- uid: System.Threading.Tasks.Task{System.Double}
  commentId: T:System.Threading.Tasks.Task{System.Double}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<double>
  nameWithType: Task<double>
  fullName: System.Threading.Tasks.Task<double>
  nameWithType.vb: Task(Of Double)
  fullName.vb: System.Threading.Tasks.Task(Of Double)
  name.vb: Task(Of Double)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Double
    name: double
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.double
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Double
    name: Double
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.double
  - name: )
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetDoubleAsync*
  commentId: Overload:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetDoubleAsync
  href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_SetDoubleAsync_System_String_System_Double_
  name: SetDoubleAsync
  nameWithType: UFKeyedStorageAsync.SetDoubleAsync
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetDoubleAsync
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetBoolAsync*
  commentId: Overload:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetBoolAsync
  href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_GetBoolAsync_System_String_System_Boolean_
  name: GetBoolAsync
  nameWithType: UFKeyedStorageAsync.GetBoolAsync
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetBoolAsync
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<bool>
  nameWithType: Task<bool>
  fullName: System.Threading.Tasks.Task<bool>
  nameWithType.vb: Task(Of Boolean)
  fullName.vb: System.Threading.Tasks.Task(Of Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetBoolAsync*
  commentId: Overload:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetBoolAsync
  href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_SetBoolAsync_System_String_System_Boolean_
  name: SetBoolAsync
  nameWithType: UFKeyedStorageAsync.SetBoolAsync
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetBoolAsync
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetCharAsync*
  commentId: Overload:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetCharAsync
  href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_GetCharAsync_System_String_System_Char_
  name: GetCharAsync
  nameWithType: UFKeyedStorageAsync.GetCharAsync
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetCharAsync
- uid: System.Char
  commentId: T:System.Char
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.char
  name: char
  nameWithType: char
  fullName: char
  nameWithType.vb: Char
  fullName.vb: Char
  name.vb: Char
- uid: System.Threading.Tasks.Task{System.Char}
  commentId: T:System.Threading.Tasks.Task{System.Char}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<char>
  nameWithType: Task<char>
  fullName: System.Threading.Tasks.Task<char>
  nameWithType.vb: Task(Of Char)
  fullName.vb: System.Threading.Tasks.Task(Of Char)
  name.vb: Task(Of Char)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Char
    name: char
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.char
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Char
    name: Char
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.char
  - name: )
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetCharAsync*
  commentId: Overload:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetCharAsync
  href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_SetCharAsync_System_String_System_Char_
  name: SetCharAsync
  nameWithType: UFKeyedStorageAsync.SetCharAsync
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetCharAsync
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetBytesAsync*
  commentId: Overload:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetBytesAsync
  href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_GetBytesAsync_System_String_System_Byte___
  name: GetBytesAsync
  nameWithType: UFKeyedStorageAsync.GetBytesAsync
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetBytesAsync
- uid: System.Byte[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.byte
  name: byte[]
  nameWithType: byte[]
  fullName: byte[]
  nameWithType.vb: Byte()
  fullName.vb: Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Byte
    name: Byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: (
  - name: )
- uid: System.Threading.Tasks.Task{System.Byte[]}
  commentId: T:System.Threading.Tasks.Task{System.Byte[]}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<byte[]>
  nameWithType: Task<byte[]>
  fullName: System.Threading.Tasks.Task<byte[]>
  nameWithType.vb: Task(Of Byte())
  fullName.vb: System.Threading.Tasks.Task(Of Byte())
  name.vb: Task(Of Byte())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Byte
    name: byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: '['
  - name: ']'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Byte
    name: Byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: (
  - name: )
  - name: )
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetBytesAsync*
  commentId: Overload:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetBytesAsync
  href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_SetBytesAsync_System_String_System_Byte___
  name: SetBytesAsync
  nameWithType: UFKeyedStorageAsync.SetBytesAsync
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetBytesAsync
- uid: System.DateTime
  commentId: T:System.DateTime
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.datetime
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
  nameWithType.vb: Date
  fullName.vb: Date
  name.vb: Date
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetLongAsync(System.String)
  commentId: M:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetLongAsync(System.String)
  parent: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync
  isExternal: true
  href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_GetLongAsync_System_String_
  name: GetLongAsync(string)
  nameWithType: UFKeyedStorageAsync.GetLongAsync(string)
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetLongAsync(string)
  nameWithType.vb: UFKeyedStorageAsync.GetLongAsync(String)
  fullName.vb: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetLongAsync(String)
  name.vb: GetLongAsync(String)
  spec.csharp:
  - uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetLongAsync(System.String)
    name: GetLongAsync
    href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_GetLongAsync_System_String_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetLongAsync(System.String)
    name: GetLongAsync
    href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_GetLongAsync_System_String_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: System.DateTime.FromBinary(System.Int64)
  commentId: M:System.DateTime.FromBinary(System.Int64)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.datetime.frombinary
  name: FromBinary(long)
  nameWithType: DateTime.FromBinary(long)
  fullName: System.DateTime.FromBinary(long)
  nameWithType.vb: Date.FromBinary(Long)
  fullName.vb: Date.FromBinary(Long)
  name.vb: FromBinary(Long)
  spec.csharp:
  - uid: System.DateTime.FromBinary(System.Int64)
    name: FromBinary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.datetime.frombinary
  - name: (
  - uid: System.Int64
    name: long
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int64
  - name: )
  spec.vb:
  - uid: System.DateTime.FromBinary(System.Int64)
    name: FromBinary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.datetime.frombinary
  - name: (
  - uid: System.Int64
    name: Long
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int64
  - name: )
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetDateTimeAsync*
  commentId: Overload:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetDateTimeAsync
  href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_GetDateTimeAsync_System_String_System_DateTime_
  name: GetDateTimeAsync
  nameWithType: UFKeyedStorageAsync.GetDateTimeAsync
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetDateTimeAsync
- uid: System.Threading.Tasks.Task{System.DateTime}
  commentId: T:System.Threading.Tasks.Task{System.DateTime}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<DateTime>
  nameWithType: Task<DateTime>
  fullName: System.Threading.Tasks.Task<System.DateTime>
  nameWithType.vb: Task(Of Date)
  fullName.vb: System.Threading.Tasks.Task(Of Date)
  name.vb: Task(Of Date)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.DateTime
    name: DateTime
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.datetime
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.DateTime
    name: Date
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.datetime
  - name: )
- uid: System.DateTime.Now
  commentId: P:System.DateTime.Now
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.datetime.now
  name: Now
  nameWithType: DateTime.Now
  fullName: System.DateTime.Now
  nameWithType.vb: Date.Now
  fullName.vb: Date.Now
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetLongAsync(System.String,System.Int64)
  commentId: M:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetLongAsync(System.String,System.Int64)
  parent: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync
  isExternal: true
  href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_SetLongAsync_System_String_System_Int64_
  name: SetLongAsync(string, long)
  nameWithType: UFKeyedStorageAsync.SetLongAsync(string, long)
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetLongAsync(string, long)
  nameWithType.vb: UFKeyedStorageAsync.SetLongAsync(String, Long)
  fullName.vb: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetLongAsync(String, Long)
  name.vb: SetLongAsync(String, Long)
  spec.csharp:
  - uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetLongAsync(System.String,System.Int64)
    name: SetLongAsync
    href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_SetLongAsync_System_String_System_Int64_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Int64
    name: long
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int64
  - name: )
  spec.vb:
  - uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetLongAsync(System.String,System.Int64)
    name: SetLongAsync
    href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_SetLongAsync_System_String_System_Int64_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Int64
    name: Long
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int64
  - name: )
- uid: System.DateTime.ToBinary
  commentId: M:System.DateTime.ToBinary
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.datetime.tobinary
  name: ToBinary()
  nameWithType: DateTime.ToBinary()
  fullName: System.DateTime.ToBinary()
  nameWithType.vb: Date.ToBinary()
  fullName.vb: Date.ToBinary()
  spec.csharp:
  - uid: System.DateTime.ToBinary
    name: ToBinary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.datetime.tobinary
  - name: (
  - name: )
  spec.vb:
  - uid: System.DateTime.ToBinary
    name: ToBinary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.datetime.tobinary
  - name: (
  - name: )
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetDateTimeAsync*
  commentId: Overload:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetDateTimeAsync
  href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_SetDateTimeAsync_System_String_System_DateTime_
  name: SetDateTimeAsync
  nameWithType: UFKeyedStorageAsync.SetDateTimeAsync
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetDateTimeAsync
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetBytesAsync(System.String)
  commentId: M:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetBytesAsync(System.String)
  parent: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync
  isExternal: true
  href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_GetBytesAsync_System_String_
  name: GetBytesAsync(string)
  nameWithType: UFKeyedStorageAsync.GetBytesAsync(string)
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetBytesAsync(string)
  nameWithType.vb: UFKeyedStorageAsync.GetBytesAsync(String)
  fullName.vb: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetBytesAsync(String)
  name.vb: GetBytesAsync(String)
  spec.csharp:
  - uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetBytesAsync(System.String)
    name: GetBytesAsync
    href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_GetBytesAsync_System_String_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetBytesAsync(System.String)
    name: GetBytesAsync
    href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_GetBytesAsync_System_String_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetGuidAsync*
  commentId: Overload:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetGuidAsync
  href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_GetGuidAsync_System_String_System_Guid_
  name: GetGuidAsync
  nameWithType: UFKeyedStorageAsync.GetGuidAsync
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetGuidAsync
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.guid
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Threading.Tasks.Task{System.Guid}
  commentId: T:System.Threading.Tasks.Task{System.Guid}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<Guid>
  nameWithType: Task<Guid>
  fullName: System.Threading.Tasks.Task<System.Guid>
  nameWithType.vb: Task(Of Guid)
  fullName.vb: System.Threading.Tasks.Task(Of System.Guid)
  name.vb: Task(Of Guid)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Guid
    name: Guid
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.guid
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Guid
    name: Guid
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.guid
  - name: )
- uid: System.Guid.Empty
  commentId: F:System.Guid.Empty
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.guid.empty
  name: Empty
  nameWithType: Guid.Empty
  fullName: System.Guid.Empty
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetBytesAsync(System.String,System.Byte[])
  commentId: M:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetBytesAsync(System.String,System.Byte[])
  parent: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync
  isExternal: true
  href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_SetBytesAsync_System_String_System_Byte___
  name: SetBytesAsync(string, byte[])
  nameWithType: UFKeyedStorageAsync.SetBytesAsync(string, byte[])
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetBytesAsync(string, byte[])
  nameWithType.vb: UFKeyedStorageAsync.SetBytesAsync(String, Byte())
  fullName.vb: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetBytesAsync(String, Byte())
  name.vb: SetBytesAsync(String, Byte())
  spec.csharp:
  - uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetBytesAsync(System.String,System.Byte[])
    name: SetBytesAsync
    href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_SetBytesAsync_System_String_System_Byte___
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Byte
    name: byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: '['
  - name: ']'
  - name: )
  spec.vb:
  - uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetBytesAsync(System.String,System.Byte[])
    name: SetBytesAsync
    href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_SetBytesAsync_System_String_System_Byte___
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Byte
    name: Byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: (
  - name: )
  - name: )
- uid: System.Guid.ToByteArray
  commentId: M:System.Guid.ToByteArray
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.guid.tobytearray
  name: ToByteArray()
  nameWithType: Guid.ToByteArray()
  fullName: System.Guid.ToByteArray()
  spec.csharp:
  - uid: System.Guid.ToByteArray
    name: ToByteArray
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.guid.tobytearray
  - name: (
  - name: )
  spec.vb:
  - uid: System.Guid.ToByteArray
    name: ToByteArray
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.guid.tobytearray
  - name: (
  - name: )
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetGuidAsync*
  commentId: Overload:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetGuidAsync
  href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_SetGuidAsync_System_String_System_Guid_
  name: SetGuidAsync
  nameWithType: UFKeyedStorageAsync.SetGuidAsync
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetGuidAsync
- uid: UltraForce.Library.NetStandard.Storage.IUFStorableObject
  commentId: T:UltraForce.Library.NetStandard.Storage.IUFStorableObject
  parent: UltraForce.Library.NetStandard.Storage
  href: UltraForce.Library.NetStandard.Storage.IUFStorableObject.html
  name: IUFStorableObject
  nameWithType: IUFStorableObject
  fullName: UltraForce.Library.NetStandard.Storage.IUFStorableObject
- uid: UltraForce.Library.NetStandard.Storage.UFDictionaryStorage
  commentId: T:UltraForce.Library.NetStandard.Storage.UFDictionaryStorage
  href: UltraForce.Library.NetStandard.Storage.UFDictionaryStorage.html
  name: UFDictionaryStorage
  nameWithType: UFDictionaryStorage
  fullName: UltraForce.Library.NetStandard.Storage.UFDictionaryStorage
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetStorableObjectAsync*
  commentId: Overload:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetStorableObjectAsync
  href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_GetStorableObjectAsync_System_String_UltraForce_Library_NetStandard_Storage_IUFStorableObject_
  name: GetStorableObjectAsync
  nameWithType: UFKeyedStorageAsync.GetStorableObjectAsync
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetStorableObjectAsync
- uid: System.Threading.Tasks.Task{UltraForce.Library.NetStandard.Storage.IUFStorableObject}
  commentId: T:System.Threading.Tasks.Task{UltraForce.Library.NetStandard.Storage.IUFStorableObject}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<IUFStorableObject>
  nameWithType: Task<IUFStorableObject>
  fullName: System.Threading.Tasks.Task<UltraForce.Library.NetStandard.Storage.IUFStorableObject>
  nameWithType.vb: Task(Of IUFStorableObject)
  fullName.vb: System.Threading.Tasks.Task(Of UltraForce.Library.NetStandard.Storage.IUFStorableObject)
  name.vb: Task(Of IUFStorableObject)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: UltraForce.Library.NetStandard.Storage.IUFStorableObject
    name: IUFStorableObject
    href: UltraForce.Library.NetStandard.Storage.IUFStorableObject.html
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: UltraForce.Library.NetStandard.Storage.IUFStorableObject
    name: IUFStorableObject
    href: UltraForce.Library.NetStandard.Storage.IUFStorableObject.html
  - name: )
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetStorableObjectAsync*
  commentId: Overload:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetStorableObjectAsync
  href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_SetStorableObjectAsync_System_String_UltraForce_Library_NetStandard_Storage_IUFStorableObject_
  name: SetStorableObjectAsync
  nameWithType: UFKeyedStorageAsync.SetStorableObjectAsync
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetStorableObjectAsync
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetStorableObjectAsync(System.String,UltraForce.Library.NetStandard.Storage.IUFStorableObject)
  commentId: M:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetStorableObjectAsync(System.String,UltraForce.Library.NetStandard.Storage.IUFStorableObject)
  parent: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync
  isExternal: true
  href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_GetStorableObjectAsync_System_String_UltraForce_Library_NetStandard_Storage_IUFStorableObject_
  name: GetStorableObjectAsync(string, IUFStorableObject)
  nameWithType: UFKeyedStorageAsync.GetStorableObjectAsync(string, IUFStorableObject)
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetStorableObjectAsync(string, UltraForce.Library.NetStandard.Storage.IUFStorableObject)
  nameWithType.vb: UFKeyedStorageAsync.GetStorableObjectAsync(String, IUFStorableObject)
  fullName.vb: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetStorableObjectAsync(String, UltraForce.Library.NetStandard.Storage.IUFStorableObject)
  name.vb: GetStorableObjectAsync(String, IUFStorableObject)
  spec.csharp:
  - uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetStorableObjectAsync(System.String,UltraForce.Library.NetStandard.Storage.IUFStorableObject)
    name: GetStorableObjectAsync
    href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_GetStorableObjectAsync_System_String_UltraForce_Library_NetStandard_Storage_IUFStorableObject_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: UltraForce.Library.NetStandard.Storage.IUFStorableObject
    name: IUFStorableObject
    href: UltraForce.Library.NetStandard.Storage.IUFStorableObject.html
  - name: )
  spec.vb:
  - uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetStorableObjectAsync(System.String,UltraForce.Library.NetStandard.Storage.IUFStorableObject)
    name: GetStorableObjectAsync
    href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_GetStorableObjectAsync_System_String_UltraForce_Library_NetStandard_Storage_IUFStorableObject_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: UltraForce.Library.NetStandard.Storage.IUFStorableObject
    name: IUFStorableObject
    href: UltraForce.Library.NetStandard.Storage.IUFStorableObject.html
  - name: )
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetDateTimeAsync(System.String)
  commentId: M:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetDateTimeAsync(System.String)
  parent: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync
  isExternal: true
  href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_GetDateTimeAsync_System_String_
  name: GetDateTimeAsync(string)
  nameWithType: UFKeyedStorageAsync.GetDateTimeAsync(string)
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetDateTimeAsync(string)
  nameWithType.vb: UFKeyedStorageAsync.GetDateTimeAsync(String)
  fullName.vb: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetDateTimeAsync(String)
  name.vb: GetDateTimeAsync(String)
  spec.csharp:
  - uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetDateTimeAsync(System.String)
    name: GetDateTimeAsync
    href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_GetDateTimeAsync_System_String_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetDateTimeAsync(System.String)
    name: GetDateTimeAsync
    href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_GetDateTimeAsync_System_String_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetGuidAsync(System.String)
  commentId: M:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetGuidAsync(System.String)
  parent: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync
  isExternal: true
  href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_GetGuidAsync_System_String_
  name: GetGuidAsync(string)
  nameWithType: UFKeyedStorageAsync.GetGuidAsync(string)
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetGuidAsync(string)
  nameWithType.vb: UFKeyedStorageAsync.GetGuidAsync(String)
  fullName.vb: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetGuidAsync(String)
  name.vb: GetGuidAsync(String)
  spec.csharp:
  - uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetGuidAsync(System.String)
    name: GetGuidAsync
    href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_GetGuidAsync_System_String_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetGuidAsync(System.String)
    name: GetGuidAsync
    href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_GetGuidAsync_System_String_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.DeserializeObjectAsync(System.String,System.Type)
  commentId: M:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.DeserializeObjectAsync(System.String,System.Type)
  parent: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync
  isExternal: true
  href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_DeserializeObjectAsync_System_String_System_Type_
  name: DeserializeObjectAsync(string, Type)
  nameWithType: UFKeyedStorageAsync.DeserializeObjectAsync(string, Type)
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.DeserializeObjectAsync(string, System.Type)
  nameWithType.vb: UFKeyedStorageAsync.DeserializeObjectAsync(String, Type)
  fullName.vb: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.DeserializeObjectAsync(String, System.Type)
  name.vb: DeserializeObjectAsync(String, Type)
  spec.csharp:
  - uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.DeserializeObjectAsync(System.String,System.Type)
    name: DeserializeObjectAsync
    href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_DeserializeObjectAsync_System_String_System_Type_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: )
  spec.vb:
  - uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.DeserializeObjectAsync(System.String,System.Type)
    name: DeserializeObjectAsync
    href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_DeserializeObjectAsync_System_String_System_Type_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: )
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetObjectAsync*
  commentId: Overload:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetObjectAsync
  href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_GetObjectAsync_System_String_System_Type_
  name: GetObjectAsync
  nameWithType: UFKeyedStorageAsync.GetObjectAsync
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetObjectAsync
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.type
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Threading.Tasks.Task{System.Object}
  commentId: T:System.Threading.Tasks.Task{System.Object}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<object>
  nameWithType: Task<object>
  fullName: System.Threading.Tasks.Task<object>
  nameWithType.vb: Task(Of Object)
  fullName.vb: System.Threading.Tasks.Task(Of Object)
  name.vb: Task(Of Object)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetObjectAsync(System.String,System.Type)
  commentId: M:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetObjectAsync(System.String,System.Type)
  parent: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync
  isExternal: true
  href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_GetObjectAsync_System_String_System_Type_
  name: GetObjectAsync(string, Type)
  nameWithType: UFKeyedStorageAsync.GetObjectAsync(string, Type)
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetObjectAsync(string, System.Type)
  nameWithType.vb: UFKeyedStorageAsync.GetObjectAsync(String, Type)
  fullName.vb: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetObjectAsync(String, System.Type)
  name.vb: GetObjectAsync(String, Type)
  spec.csharp:
  - uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetObjectAsync(System.String,System.Type)
    name: GetObjectAsync
    href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_GetObjectAsync_System_String_System_Type_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: )
  spec.vb:
  - uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.GetObjectAsync(System.String,System.Type)
    name: GetObjectAsync
    href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_GetObjectAsync_System_String_System_Type_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: )
- uid: System.Threading.Tasks.Task{{T}}
  commentId: T:System.Threading.Tasks.Task{``0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<T>
  nameWithType: Task<T>
  fullName: System.Threading.Tasks.Task<T>
  nameWithType.vb: Task(Of T)
  fullName.vb: System.Threading.Tasks.Task(Of T)
  name.vb: Task(Of T)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetStorableObjectAsync(System.String,UltraForce.Library.NetStandard.Storage.IUFStorableObject)
  commentId: M:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetStorableObjectAsync(System.String,UltraForce.Library.NetStandard.Storage.IUFStorableObject)
  parent: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync
  isExternal: true
  href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_SetStorableObjectAsync_System_String_UltraForce_Library_NetStandard_Storage_IUFStorableObject_
  name: SetStorableObjectAsync(string, IUFStorableObject)
  nameWithType: UFKeyedStorageAsync.SetStorableObjectAsync(string, IUFStorableObject)
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetStorableObjectAsync(string, UltraForce.Library.NetStandard.Storage.IUFStorableObject)
  nameWithType.vb: UFKeyedStorageAsync.SetStorableObjectAsync(String, IUFStorableObject)
  fullName.vb: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetStorableObjectAsync(String, UltraForce.Library.NetStandard.Storage.IUFStorableObject)
  name.vb: SetStorableObjectAsync(String, IUFStorableObject)
  spec.csharp:
  - uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetStorableObjectAsync(System.String,UltraForce.Library.NetStandard.Storage.IUFStorableObject)
    name: SetStorableObjectAsync
    href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_SetStorableObjectAsync_System_String_UltraForce_Library_NetStandard_Storage_IUFStorableObject_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: UltraForce.Library.NetStandard.Storage.IUFStorableObject
    name: IUFStorableObject
    href: UltraForce.Library.NetStandard.Storage.IUFStorableObject.html
  - name: )
  spec.vb:
  - uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetStorableObjectAsync(System.String,UltraForce.Library.NetStandard.Storage.IUFStorableObject)
    name: SetStorableObjectAsync
    href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_SetStorableObjectAsync_System_String_UltraForce_Library_NetStandard_Storage_IUFStorableObject_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: UltraForce.Library.NetStandard.Storage.IUFStorableObject
    name: IUFStorableObject
    href: UltraForce.Library.NetStandard.Storage.IUFStorableObject.html
  - name: )
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetDateTimeAsync(System.String,System.DateTime)
  commentId: M:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetDateTimeAsync(System.String,System.DateTime)
  parent: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync
  isExternal: true
  href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_SetDateTimeAsync_System_String_System_DateTime_
  name: SetDateTimeAsync(string, DateTime)
  nameWithType: UFKeyedStorageAsync.SetDateTimeAsync(string, DateTime)
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetDateTimeAsync(string, System.DateTime)
  nameWithType.vb: UFKeyedStorageAsync.SetDateTimeAsync(String, Date)
  fullName.vb: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetDateTimeAsync(String, Date)
  name.vb: SetDateTimeAsync(String, Date)
  spec.csharp:
  - uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetDateTimeAsync(System.String,System.DateTime)
    name: SetDateTimeAsync
    href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_SetDateTimeAsync_System_String_System_DateTime_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.DateTime
    name: DateTime
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.datetime
  - name: )
  spec.vb:
  - uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetDateTimeAsync(System.String,System.DateTime)
    name: SetDateTimeAsync
    href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_SetDateTimeAsync_System_String_System_DateTime_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.DateTime
    name: Date
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.datetime
  - name: )
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetGuidAsync(System.String,System.Guid)
  commentId: M:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetGuidAsync(System.String,System.Guid)
  parent: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync
  isExternal: true
  href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_SetGuidAsync_System_String_System_Guid_
  name: SetGuidAsync(string, Guid)
  nameWithType: UFKeyedStorageAsync.SetGuidAsync(string, Guid)
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetGuidAsync(string, System.Guid)
  nameWithType.vb: UFKeyedStorageAsync.SetGuidAsync(String, Guid)
  fullName.vb: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetGuidAsync(String, System.Guid)
  name.vb: SetGuidAsync(String, Guid)
  spec.csharp:
  - uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetGuidAsync(System.String,System.Guid)
    name: SetGuidAsync
    href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_SetGuidAsync_System_String_System_Guid_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Guid
    name: Guid
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.guid
  - name: )
  spec.vb:
  - uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetGuidAsync(System.String,System.Guid)
    name: SetGuidAsync
    href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_SetGuidAsync_System_String_System_Guid_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Guid
    name: Guid
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.guid
  - name: )
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SerializeObjectAsync(System.String,System.Object)
  commentId: M:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SerializeObjectAsync(System.String,System.Object)
  parent: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync
  isExternal: true
  href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_SerializeObjectAsync_System_String_System_Object_
  name: SerializeObjectAsync(string, object)
  nameWithType: UFKeyedStorageAsync.SerializeObjectAsync(string, object)
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SerializeObjectAsync(string, object)
  nameWithType.vb: UFKeyedStorageAsync.SerializeObjectAsync(String, Object)
  fullName.vb: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SerializeObjectAsync(String, Object)
  name.vb: SerializeObjectAsync(String, Object)
  spec.csharp:
  - uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SerializeObjectAsync(System.String,System.Object)
    name: SerializeObjectAsync
    href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_SerializeObjectAsync_System_String_System_Object_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SerializeObjectAsync(System.String,System.Object)
    name: SerializeObjectAsync
    href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_SerializeObjectAsync_System_String_System_Object_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetObjectAsync*
  commentId: Overload:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetObjectAsync
  href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_SetObjectAsync_System_String_System_Object_System_Type_
  name: SetObjectAsync
  nameWithType: UFKeyedStorageAsync.SetObjectAsync
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetObjectAsync
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetObjectAsync(System.String,System.Object,System.Type)
  commentId: M:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetObjectAsync(System.String,System.Object,System.Type)
  parent: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync
  isExternal: true
  href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_SetObjectAsync_System_String_System_Object_System_Type_
  name: SetObjectAsync(string, object, Type)
  nameWithType: UFKeyedStorageAsync.SetObjectAsync(string, object, Type)
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetObjectAsync(string, object, System.Type)
  nameWithType.vb: UFKeyedStorageAsync.SetObjectAsync(String, Object, Type)
  fullName.vb: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetObjectAsync(String, Object, System.Type)
  name.vb: SetObjectAsync(String, Object, Type)
  spec.csharp:
  - uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetObjectAsync(System.String,System.Object,System.Type)
    name: SetObjectAsync
    href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_SetObjectAsync_System_String_System_Object_System_Type_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: )
  spec.vb:
  - uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SetObjectAsync(System.String,System.Object,System.Type)
    name: SetObjectAsync
    href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_SetObjectAsync_System_String_System_Object_System_Type_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.DeleteAllAsync*
  commentId: Overload:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.DeleteAllAsync
  href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_DeleteAllAsync
  name: DeleteAllAsync
  nameWithType: UFKeyedStorageAsync.DeleteAllAsync
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.DeleteAllAsync
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.DeleteKeyAsync*
  commentId: Overload:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.DeleteKeyAsync
  href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_DeleteKeyAsync_System_String_
  name: DeleteKeyAsync
  nameWithType: UFKeyedStorageAsync.DeleteKeyAsync
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.DeleteKeyAsync
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.HasKeyAsync*
  commentId: Overload:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.HasKeyAsync
  href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_HasKeyAsync_System_String_
  name: HasKeyAsync
  nameWithType: UFKeyedStorageAsync.HasKeyAsync
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.HasKeyAsync
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SerializeObjectAsync*
  commentId: Overload:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SerializeObjectAsync
  href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_SerializeObjectAsync_System_String_System_Object_
  name: SerializeObjectAsync
  nameWithType: UFKeyedStorageAsync.SerializeObjectAsync
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.SerializeObjectAsync
- uid: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.DeserializeObjectAsync*
  commentId: Overload:UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.DeserializeObjectAsync
  href: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html#UltraForce_Library_NetStandard_Storage_UFKeyedStorageAsync_DeserializeObjectAsync_System_String_System_Type_
  name: DeserializeObjectAsync
  nameWithType: UFKeyedStorageAsync.DeserializeObjectAsync
  fullName: UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.DeserializeObjectAsync
