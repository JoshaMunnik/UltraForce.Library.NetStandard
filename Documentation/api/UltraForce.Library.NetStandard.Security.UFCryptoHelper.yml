### YamlMime:ManagedReference
items:
- uid: UltraForce.Library.NetStandard.Security.UFCryptoHelper
  commentId: T:UltraForce.Library.NetStandard.Security.UFCryptoHelper
  id: UFCryptoHelper
  parent: UltraForce.Library.NetStandard.Security
  children:
  - UltraForce.Library.NetStandard.Security.UFCryptoHelper.#ctor(System.Byte[],System.Int32,System.String)
  - UltraForce.Library.NetStandard.Security.UFCryptoHelper.AsymmetricDecrypt(System.String,System.Object)
  - UltraForce.Library.NetStandard.Security.UFCryptoHelper.AsymmetricEncrypt(System.String,System.String)
  - UltraForce.Library.NetStandard.Security.UFCryptoHelper.AsymmetricSign(System.String,System.Object)
  - UltraForce.Library.NetStandard.Security.UFCryptoHelper.CalcHash(System.String)
  - UltraForce.Library.NetStandard.Security.UFCryptoHelper.Encrypt(System.String,System.String)
  - UltraForce.Library.NetStandard.Security.UFCryptoHelper.GetAsymmetricKeys(System.String@,System.Object@)
  - UltraForce.Library.NetStandard.Security.UFCryptoHelper.GetAsymmetricKeysPEM(System.String@,System.Object@)
  - UltraForce.Library.NetStandard.Security.UFCryptoHelper.SymmetricDecrypt(System.String,System.String)
  - UltraForce.Library.NetStandard.Security.UFCryptoHelper.SymmetricEncrypt(System.String,System.String)
  langs:
  - csharp
  - vb
  name: UFCryptoHelper
  nameWithType: UFCryptoHelper
  fullName: UltraForce.Library.NetStandard.Security.UFCryptoHelper
  type: Class
  source:
    remote:
      path: UltraForce.Library.NetStandard/Security/UFCryptoHelper.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: UFCryptoHelper
    path: ../UltraForce.Library.NetStandard/Security/UFCryptoHelper.cs
    startLine: 43
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Security
  summary: >-
    <xref href="UltraForce.Library.NetStandard.Security.UFCryptoHelper" data-throw-if-not-resolved="false"></xref> library is a library that implements

    various encryption and decryption methods.
  example: []
  syntax:
    content: public class UFCryptoHelper
    content.vb: Public Class UFCryptoHelper
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: UltraForce.Library.NetStandard.Security.UFCryptoHelper.#ctor(System.Byte[],System.Int32,System.String)
  commentId: M:UltraForce.Library.NetStandard.Security.UFCryptoHelper.#ctor(System.Byte[],System.Int32,System.String)
  id: '#ctor(System.Byte[],System.Int32,System.String)'
  parent: UltraForce.Library.NetStandard.Security.UFCryptoHelper
  langs:
  - csharp
  - vb
  name: UFCryptoHelper(byte[], int, string)
  nameWithType: UFCryptoHelper.UFCryptoHelper(byte[], int, string)
  fullName: UltraForce.Library.NetStandard.Security.UFCryptoHelper.UFCryptoHelper(byte[], int, string)
  type: Constructor
  source:
    remote:
      path: UltraForce.Library.NetStandard/Security/UFCryptoHelper.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: .ctor
    path: ../UltraForce.Library.NetStandard/Security/UFCryptoHelper.cs
    startLine: 83
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Security
  summary: Constructs an instance of <xref href="UltraForce.Library.NetStandard.Security.UFCryptoHelper" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public UFCryptoHelper(byte[] aSalt, int aDerivationIterations = 1000, string aHashNibbles = "0123456789ABCDEF")
    parameters:
    - id: aSalt
      type: System.Byte[]
      description: Salt to use (must at least be 8 bytes in length)
    - id: aDerivationIterations
      type: System.Int32
      description: Number of derivations to use
    - id: aHashNibbles
      type: System.String
      description: >-
        A string of 16 unique characters to use as nibble values when

        processing 'hex' strings.
    content.vb: Public Sub New(aSalt As Byte(), aDerivationIterations As Integer = 1000, aHashNibbles As String = "0123456789ABCDEF")
  overload: UltraForce.Library.NetStandard.Security.UFCryptoHelper.#ctor*
  nameWithType.vb: UFCryptoHelper.New(Byte(), Integer, String)
  fullName.vb: UltraForce.Library.NetStandard.Security.UFCryptoHelper.New(Byte(), Integer, String)
  name.vb: New(Byte(), Integer, String)
- uid: UltraForce.Library.NetStandard.Security.UFCryptoHelper.CalcHash(System.String)
  commentId: M:UltraForce.Library.NetStandard.Security.UFCryptoHelper.CalcHash(System.String)
  id: CalcHash(System.String)
  parent: UltraForce.Library.NetStandard.Security.UFCryptoHelper
  langs:
  - csharp
  - vb
  name: CalcHash(string)
  nameWithType: UFCryptoHelper.CalcHash(string)
  fullName: UltraForce.Library.NetStandard.Security.UFCryptoHelper.CalcHash(string)
  type: Method
  source:
    remote:
      path: UltraForce.Library.NetStandard/Security/UFCryptoHelper.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: CalcHash
    path: ../UltraForce.Library.NetStandard/Security/UFCryptoHelper.cs
    startLine: 126
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Security
  summary: Generates an hash value using SHA512.
  example: []
  syntax:
    content: public string CalcHash(string aData)
    parameters:
    - id: aData
      type: System.String
      description: Data to get hash from
    return:
      type: System.String
      description: hashed data
    content.vb: Public Function CalcHash(aData As String) As String
  overload: UltraForce.Library.NetStandard.Security.UFCryptoHelper.CalcHash*
  nameWithType.vb: UFCryptoHelper.CalcHash(String)
  fullName.vb: UltraForce.Library.NetStandard.Security.UFCryptoHelper.CalcHash(String)
  name.vb: CalcHash(String)
- uid: UltraForce.Library.NetStandard.Security.UFCryptoHelper.SymmetricEncrypt(System.String,System.String)
  commentId: M:UltraForce.Library.NetStandard.Security.UFCryptoHelper.SymmetricEncrypt(System.String,System.String)
  id: SymmetricEncrypt(System.String,System.String)
  parent: UltraForce.Library.NetStandard.Security.UFCryptoHelper
  langs:
  - csharp
  - vb
  name: SymmetricEncrypt(string, string)
  nameWithType: UFCryptoHelper.SymmetricEncrypt(string, string)
  fullName: UltraForce.Library.NetStandard.Security.UFCryptoHelper.SymmetricEncrypt(string, string)
  type: Method
  source:
    remote:
      path: UltraForce.Library.NetStandard/Security/UFCryptoHelper.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: SymmetricEncrypt
    path: ../UltraForce.Library.NetStandard/Security/UFCryptoHelper.cs
    startLine: 143
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Security
  summary: Encrypt a text with a key.
  remarks: >-
    Based on:

    https://xamarinhelp.com/cryptography-in-xamarin-forms/
  example: []
  syntax:
    content: public string SymmetricEncrypt(string aText, string aKey)
    parameters:
    - id: aText
      type: System.String
      description: Text to encrypt
    - id: aKey
      type: System.String
      description: Key to use
    return:
      type: System.String
      description: Encrypted text (base64 encoded with one ';' character)
    content.vb: Public Function SymmetricEncrypt(aText As String, aKey As String) As String
  overload: UltraForce.Library.NetStandard.Security.UFCryptoHelper.SymmetricEncrypt*
  nameWithType.vb: UFCryptoHelper.SymmetricEncrypt(String, String)
  fullName.vb: UltraForce.Library.NetStandard.Security.UFCryptoHelper.SymmetricEncrypt(String, String)
  name.vb: SymmetricEncrypt(String, String)
- uid: UltraForce.Library.NetStandard.Security.UFCryptoHelper.SymmetricDecrypt(System.String,System.String)
  commentId: M:UltraForce.Library.NetStandard.Security.UFCryptoHelper.SymmetricDecrypt(System.String,System.String)
  id: SymmetricDecrypt(System.String,System.String)
  parent: UltraForce.Library.NetStandard.Security.UFCryptoHelper
  langs:
  - csharp
  - vb
  name: SymmetricDecrypt(string, string)
  nameWithType: UFCryptoHelper.SymmetricDecrypt(string, string)
  fullName: UltraForce.Library.NetStandard.Security.UFCryptoHelper.SymmetricDecrypt(string, string)
  type: Method
  source:
    remote:
      path: UltraForce.Library.NetStandard/Security/UFCryptoHelper.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: SymmetricDecrypt
    path: ../UltraForce.Library.NetStandard/Security/UFCryptoHelper.cs
    startLine: 161
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Security
  summary: Decrypt a text previously encrypted with <xref href="UltraForce.Library.NetStandard.Security.UFCryptoHelper.SymmetricEncrypt(System.String%2cSystem.String)" data-throw-if-not-resolved="false"></xref>.
  remarks: >-
    Based on:

    https://xamarinhelp.com/cryptography-in-xamarin-forms/
  example: []
  syntax:
    content: public string SymmetricDecrypt(string aEncryptedValue, string aKey)
    parameters:
    - id: aEncryptedValue
      type: System.String
      description: Encrypted text
    - id: aKey
      type: System.String
      description: Key used to encrypt
    return:
      type: System.String
      description: Decrypted text
    content.vb: Public Function SymmetricDecrypt(aEncryptedValue As String, aKey As String) As String
  overload: UltraForce.Library.NetStandard.Security.UFCryptoHelper.SymmetricDecrypt*
  nameWithType.vb: UFCryptoHelper.SymmetricDecrypt(String, String)
  fullName.vb: UltraForce.Library.NetStandard.Security.UFCryptoHelper.SymmetricDecrypt(String, String)
  name.vb: SymmetricDecrypt(String, String)
- uid: UltraForce.Library.NetStandard.Security.UFCryptoHelper.AsymmetricEncrypt(System.String,System.String)
  commentId: M:UltraForce.Library.NetStandard.Security.UFCryptoHelper.AsymmetricEncrypt(System.String,System.String)
  id: AsymmetricEncrypt(System.String,System.String)
  parent: UltraForce.Library.NetStandard.Security.UFCryptoHelper
  langs:
  - csharp
  - vb
  name: AsymmetricEncrypt(string, string)
  nameWithType: UFCryptoHelper.AsymmetricEncrypt(string, string)
  fullName: UltraForce.Library.NetStandard.Security.UFCryptoHelper.AsymmetricEncrypt(string, string)
  type: Method
  source:
    remote:
      path: UltraForce.Library.NetStandard/Security/UFCryptoHelper.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: AsymmetricEncrypt
    path: ../UltraForce.Library.NetStandard/Security/UFCryptoHelper.cs
    startLine: 189
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Security
  summary: Encrypts text using asymmetric encryption with RSA.
  remarks: Assumes public key is a base64 encoded key using Pkcs1key format
  example: []
  syntax:
    content: public string AsymmetricEncrypt(string aData, string aPublicKey)
    parameters:
    - id: aData
      type: System.String
      description: Data to encrypt
    - id: aPublicKey
      type: System.String
      description: Key to encrypt with (Pkcs1key format)
    return:
      type: System.String
      description: base64 encoded data
    content.vb: Public Function AsymmetricEncrypt(aData As String, aPublicKey As String) As String
  overload: UltraForce.Library.NetStandard.Security.UFCryptoHelper.AsymmetricEncrypt*
  nameWithType.vb: UFCryptoHelper.AsymmetricEncrypt(String, String)
  fullName.vb: UltraForce.Library.NetStandard.Security.UFCryptoHelper.AsymmetricEncrypt(String, String)
  name.vb: AsymmetricEncrypt(String, String)
- uid: UltraForce.Library.NetStandard.Security.UFCryptoHelper.AsymmetricDecrypt(System.String,System.Object)
  commentId: M:UltraForce.Library.NetStandard.Security.UFCryptoHelper.AsymmetricDecrypt(System.String,System.Object)
  id: AsymmetricDecrypt(System.String,System.Object)
  parent: UltraForce.Library.NetStandard.Security.UFCryptoHelper
  langs:
  - csharp
  - vb
  name: AsymmetricDecrypt(string, object)
  nameWithType: UFCryptoHelper.AsymmetricDecrypt(string, object)
  fullName: UltraForce.Library.NetStandard.Security.UFCryptoHelper.AsymmetricDecrypt(string, object)
  type: Method
  source:
    remote:
      path: UltraForce.Library.NetStandard/Security/UFCryptoHelper.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: AsymmetricDecrypt
    path: ../UltraForce.Library.NetStandard/Security/UFCryptoHelper.cs
    startLine: 206
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Security
  summary: Decrypts text using asymmetric encryption with RSA.
  example: []
  syntax:
    content: public string AsymmetricDecrypt(string aData, object aPrivateKey)
    parameters:
    - id: aData
      type: System.String
      description: Data to decrypt
    - id: aPrivateKey
      type: System.Object
      description: Private key to decrypt with
    return:
      type: System.String
      description: Decrypted data
    content.vb: Public Function AsymmetricDecrypt(aData As String, aPrivateKey As Object) As String
  overload: UltraForce.Library.NetStandard.Security.UFCryptoHelper.AsymmetricDecrypt*
  nameWithType.vb: UFCryptoHelper.AsymmetricDecrypt(String, Object)
  fullName.vb: UltraForce.Library.NetStandard.Security.UFCryptoHelper.AsymmetricDecrypt(String, Object)
  name.vb: AsymmetricDecrypt(String, Object)
- uid: UltraForce.Library.NetStandard.Security.UFCryptoHelper.GetAsymmetricKeys(System.String@,System.Object@)
  commentId: M:UltraForce.Library.NetStandard.Security.UFCryptoHelper.GetAsymmetricKeys(System.String@,System.Object@)
  id: GetAsymmetricKeys(System.String@,System.Object@)
  parent: UltraForce.Library.NetStandard.Security.UFCryptoHelper
  langs:
  - csharp
  - vb
  name: GetAsymmetricKeys(out string, out object)
  nameWithType: UFCryptoHelper.GetAsymmetricKeys(out string, out object)
  fullName: UltraForce.Library.NetStandard.Security.UFCryptoHelper.GetAsymmetricKeys(out string, out object)
  type: Method
  source:
    remote:
      path: UltraForce.Library.NetStandard/Security/UFCryptoHelper.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: GetAsymmetricKeys
    path: ../UltraForce.Library.NetStandard/Security/UFCryptoHelper.cs
    startLine: 220
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Security
  summary: Gets a public and private key pair for RSA encryption.
  example: []
  syntax:
    content: public void GetAsymmetricKeys(out string aPublicKey, out object aPrivateKey)
    parameters:
    - id: aPublicKey
      type: System.String
      description: Public key in private format
    - id: aPrivateKey
      type: System.Object
      description: Private key
    content.vb: Public Sub GetAsymmetricKeys(aPublicKey As String, aPrivateKey As Object)
  overload: UltraForce.Library.NetStandard.Security.UFCryptoHelper.GetAsymmetricKeys*
  nameWithType.vb: UFCryptoHelper.GetAsymmetricKeys(String, Object)
  fullName.vb: UltraForce.Library.NetStandard.Security.UFCryptoHelper.GetAsymmetricKeys(String, Object)
  name.vb: GetAsymmetricKeys(String, Object)
- uid: UltraForce.Library.NetStandard.Security.UFCryptoHelper.GetAsymmetricKeysPEM(System.String@,System.Object@)
  commentId: M:UltraForce.Library.NetStandard.Security.UFCryptoHelper.GetAsymmetricKeysPEM(System.String@,System.Object@)
  id: GetAsymmetricKeysPEM(System.String@,System.Object@)
  parent: UltraForce.Library.NetStandard.Security.UFCryptoHelper
  langs:
  - csharp
  - vb
  name: GetAsymmetricKeysPEM(out string, out object)
  nameWithType: UFCryptoHelper.GetAsymmetricKeysPEM(out string, out object)
  fullName: UltraForce.Library.NetStandard.Security.UFCryptoHelper.GetAsymmetricKeysPEM(out string, out object)
  type: Method
  source:
    remote:
      path: UltraForce.Library.NetStandard/Security/UFCryptoHelper.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: GetAsymmetricKeysPEM
    path: ../UltraForce.Library.NetStandard/Security/UFCryptoHelper.cs
    startLine: 237
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Security
  summary: Gets a public and private key pair for RSA encryption.
  example: []
  syntax:
    content: public void GetAsymmetricKeysPEM(out string aPublicKey, out object aPrivateKey)
    parameters:
    - id: aPublicKey
      type: System.String
      description: Public key in PEM format
    - id: aPrivateKey
      type: System.Object
      description: Private key
    content.vb: Public Sub GetAsymmetricKeysPEM(aPublicKey As String, aPrivateKey As Object)
  overload: UltraForce.Library.NetStandard.Security.UFCryptoHelper.GetAsymmetricKeysPEM*
  nameWithType.vb: UFCryptoHelper.GetAsymmetricKeysPEM(String, Object)
  fullName.vb: UltraForce.Library.NetStandard.Security.UFCryptoHelper.GetAsymmetricKeysPEM(String, Object)
  name.vb: GetAsymmetricKeysPEM(String, Object)
- uid: UltraForce.Library.NetStandard.Security.UFCryptoHelper.AsymmetricSign(System.String,System.Object)
  commentId: M:UltraForce.Library.NetStandard.Security.UFCryptoHelper.AsymmetricSign(System.String,System.Object)
  id: AsymmetricSign(System.String,System.Object)
  parent: UltraForce.Library.NetStandard.Security.UFCryptoHelper
  langs:
  - csharp
  - vb
  name: AsymmetricSign(string, object)
  nameWithType: UFCryptoHelper.AsymmetricSign(string, object)
  fullName: UltraForce.Library.NetStandard.Security.UFCryptoHelper.AsymmetricSign(string, object)
  type: Method
  source:
    remote:
      path: UltraForce.Library.NetStandard/Security/UFCryptoHelper.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: AsymmetricSign
    path: ../UltraForce.Library.NetStandard/Security/UFCryptoHelper.cs
    startLine: 255
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Security
  summary: Generates a signature using an asymmetric key using SHA256.
  example: []
  syntax:
    content: public string AsymmetricSign(string aData, object aPrivateKey)
    parameters:
    - id: aData
      type: System.String
      description: Data to create signature for
    - id: aPrivateKey
      type: System.Object
      description: Private key to sign with
    return:
      type: System.String
      description: Signature base64 encoded
    content.vb: Public Function AsymmetricSign(aData As String, aPrivateKey As Object) As String
  overload: UltraForce.Library.NetStandard.Security.UFCryptoHelper.AsymmetricSign*
  nameWithType.vb: UFCryptoHelper.AsymmetricSign(String, Object)
  fullName.vb: UltraForce.Library.NetStandard.Security.UFCryptoHelper.AsymmetricSign(String, Object)
  name.vb: AsymmetricSign(String, Object)
- uid: UltraForce.Library.NetStandard.Security.UFCryptoHelper.Encrypt(System.String,System.String)
  commentId: M:UltraForce.Library.NetStandard.Security.UFCryptoHelper.Encrypt(System.String,System.String)
  id: Encrypt(System.String,System.String)
  parent: UltraForce.Library.NetStandard.Security.UFCryptoHelper
  langs:
  - csharp
  - vb
  name: Encrypt(string, string)
  nameWithType: UFCryptoHelper.Encrypt(string, string)
  fullName: UltraForce.Library.NetStandard.Security.UFCryptoHelper.Encrypt(string, string)
  type: Method
  source:
    remote:
      path: UltraForce.Library.NetStandard/Security/UFCryptoHelper.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: Encrypt
    path: ../UltraForce.Library.NetStandard/Security/UFCryptoHelper.cs
    startLine: 365
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Security
  summary: Encrypts a value using AES encryption.
  example: []
  syntax:
    content: public string Encrypt(string aValue, string aKey)
    parameters:
    - id: aValue
      type: System.String
      description: Value to encrypt
    - id: aKey
      type: System.String
      description: Key to encrypt with
    return:
      type: System.String
      description: ''
    content.vb: Public Function Encrypt(aValue As String, aKey As String) As String
  overload: UltraForce.Library.NetStandard.Security.UFCryptoHelper.Encrypt*
  nameWithType.vb: UFCryptoHelper.Encrypt(String, String)
  fullName.vb: UltraForce.Library.NetStandard.Security.UFCryptoHelper.Encrypt(String, String)
  name.vb: Encrypt(String, String)
references:
- uid: UltraForce.Library.NetStandard.Security.UFCryptoHelper
  commentId: T:UltraForce.Library.NetStandard.Security.UFCryptoHelper
  href: UltraForce.Library.NetStandard.Security.UFCryptoHelper.html
  name: UFCryptoHelper
  nameWithType: UFCryptoHelper
  fullName: UltraForce.Library.NetStandard.Security.UFCryptoHelper
- uid: UltraForce.Library.NetStandard.Security
  commentId: N:UltraForce.Library.NetStandard.Security
  href: UltraForce.html
  name: UltraForce.Library.NetStandard.Security
  nameWithType: UltraForce.Library.NetStandard.Security
  fullName: UltraForce.Library.NetStandard.Security
  spec.csharp:
  - uid: UltraForce
    name: UltraForce
    href: UltraForce.html
  - name: .
  - uid: UltraForce.Library
    name: Library
    href: UltraForce.Library.html
  - name: .
  - uid: UltraForce.Library.NetStandard
    name: NetStandard
    href: UltraForce.Library.NetStandard.html
  - name: .
  - uid: UltraForce.Library.NetStandard.Security
    name: Security
    href: UltraForce.Library.NetStandard.Security.html
  spec.vb:
  - uid: UltraForce
    name: UltraForce
    href: UltraForce.html
  - name: .
  - uid: UltraForce.Library
    name: Library
    href: UltraForce.Library.html
  - name: .
  - uid: UltraForce.Library.NetStandard
    name: NetStandard
    href: UltraForce.Library.NetStandard.html
  - name: .
  - uid: UltraForce.Library.NetStandard.Security
    name: Security
    href: UltraForce.Library.NetStandard.Security.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: UltraForce.Library.NetStandard.Security.UFCryptoHelper.#ctor*
  commentId: Overload:UltraForce.Library.NetStandard.Security.UFCryptoHelper.#ctor
  href: UltraForce.Library.NetStandard.Security.UFCryptoHelper.html#UltraForce_Library_NetStandard_Security_UFCryptoHelper__ctor_System_Byte___System_Int32_System_String_
  name: UFCryptoHelper
  nameWithType: UFCryptoHelper.UFCryptoHelper
  fullName: UltraForce.Library.NetStandard.Security.UFCryptoHelper.UFCryptoHelper
  nameWithType.vb: UFCryptoHelper.New
  fullName.vb: UltraForce.Library.NetStandard.Security.UFCryptoHelper.New
  name.vb: New
- uid: System.Byte[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.byte
  name: byte[]
  nameWithType: byte[]
  fullName: byte[]
  nameWithType.vb: Byte()
  fullName.vb: Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Byte
    name: Byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: (
  - name: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: UltraForce.Library.NetStandard.Security.UFCryptoHelper.CalcHash*
  commentId: Overload:UltraForce.Library.NetStandard.Security.UFCryptoHelper.CalcHash
  href: UltraForce.Library.NetStandard.Security.UFCryptoHelper.html#UltraForce_Library_NetStandard_Security_UFCryptoHelper_CalcHash_System_String_
  name: CalcHash
  nameWithType: UFCryptoHelper.CalcHash
  fullName: UltraForce.Library.NetStandard.Security.UFCryptoHelper.CalcHash
- uid: UltraForce.Library.NetStandard.Security.UFCryptoHelper.SymmetricEncrypt*
  commentId: Overload:UltraForce.Library.NetStandard.Security.UFCryptoHelper.SymmetricEncrypt
  href: UltraForce.Library.NetStandard.Security.UFCryptoHelper.html#UltraForce_Library_NetStandard_Security_UFCryptoHelper_SymmetricEncrypt_System_String_System_String_
  name: SymmetricEncrypt
  nameWithType: UFCryptoHelper.SymmetricEncrypt
  fullName: UltraForce.Library.NetStandard.Security.UFCryptoHelper.SymmetricEncrypt
- uid: UltraForce.Library.NetStandard.Security.UFCryptoHelper.SymmetricEncrypt(System.String,System.String)
  commentId: M:UltraForce.Library.NetStandard.Security.UFCryptoHelper.SymmetricEncrypt(System.String,System.String)
  isExternal: true
  href: UltraForce.Library.NetStandard.Security.UFCryptoHelper.html#UltraForce_Library_NetStandard_Security_UFCryptoHelper_SymmetricEncrypt_System_String_System_String_
  name: SymmetricEncrypt(string, string)
  nameWithType: UFCryptoHelper.SymmetricEncrypt(string, string)
  fullName: UltraForce.Library.NetStandard.Security.UFCryptoHelper.SymmetricEncrypt(string, string)
  nameWithType.vb: UFCryptoHelper.SymmetricEncrypt(String, String)
  fullName.vb: UltraForce.Library.NetStandard.Security.UFCryptoHelper.SymmetricEncrypt(String, String)
  name.vb: SymmetricEncrypt(String, String)
  spec.csharp:
  - uid: UltraForce.Library.NetStandard.Security.UFCryptoHelper.SymmetricEncrypt(System.String,System.String)
    name: SymmetricEncrypt
    href: UltraForce.Library.NetStandard.Security.UFCryptoHelper.html#UltraForce_Library_NetStandard_Security_UFCryptoHelper_SymmetricEncrypt_System_String_System_String_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: UltraForce.Library.NetStandard.Security.UFCryptoHelper.SymmetricEncrypt(System.String,System.String)
    name: SymmetricEncrypt
    href: UltraForce.Library.NetStandard.Security.UFCryptoHelper.html#UltraForce_Library_NetStandard_Security_UFCryptoHelper_SymmetricEncrypt_System_String_System_String_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: UltraForce.Library.NetStandard.Security.UFCryptoHelper.SymmetricDecrypt*
  commentId: Overload:UltraForce.Library.NetStandard.Security.UFCryptoHelper.SymmetricDecrypt
  href: UltraForce.Library.NetStandard.Security.UFCryptoHelper.html#UltraForce_Library_NetStandard_Security_UFCryptoHelper_SymmetricDecrypt_System_String_System_String_
  name: SymmetricDecrypt
  nameWithType: UFCryptoHelper.SymmetricDecrypt
  fullName: UltraForce.Library.NetStandard.Security.UFCryptoHelper.SymmetricDecrypt
- uid: UltraForce.Library.NetStandard.Security.UFCryptoHelper.AsymmetricEncrypt*
  commentId: Overload:UltraForce.Library.NetStandard.Security.UFCryptoHelper.AsymmetricEncrypt
  href: UltraForce.Library.NetStandard.Security.UFCryptoHelper.html#UltraForce_Library_NetStandard_Security_UFCryptoHelper_AsymmetricEncrypt_System_String_System_String_
  name: AsymmetricEncrypt
  nameWithType: UFCryptoHelper.AsymmetricEncrypt
  fullName: UltraForce.Library.NetStandard.Security.UFCryptoHelper.AsymmetricEncrypt
- uid: UltraForce.Library.NetStandard.Security.UFCryptoHelper.AsymmetricDecrypt*
  commentId: Overload:UltraForce.Library.NetStandard.Security.UFCryptoHelper.AsymmetricDecrypt
  href: UltraForce.Library.NetStandard.Security.UFCryptoHelper.html#UltraForce_Library_NetStandard_Security_UFCryptoHelper_AsymmetricDecrypt_System_String_System_Object_
  name: AsymmetricDecrypt
  nameWithType: UFCryptoHelper.AsymmetricDecrypt
  fullName: UltraForce.Library.NetStandard.Security.UFCryptoHelper.AsymmetricDecrypt
- uid: UltraForce.Library.NetStandard.Security.UFCryptoHelper.GetAsymmetricKeys*
  commentId: Overload:UltraForce.Library.NetStandard.Security.UFCryptoHelper.GetAsymmetricKeys
  href: UltraForce.Library.NetStandard.Security.UFCryptoHelper.html#UltraForce_Library_NetStandard_Security_UFCryptoHelper_GetAsymmetricKeys_System_String__System_Object__
  name: GetAsymmetricKeys
  nameWithType: UFCryptoHelper.GetAsymmetricKeys
  fullName: UltraForce.Library.NetStandard.Security.UFCryptoHelper.GetAsymmetricKeys
- uid: UltraForce.Library.NetStandard.Security.UFCryptoHelper.GetAsymmetricKeysPEM*
  commentId: Overload:UltraForce.Library.NetStandard.Security.UFCryptoHelper.GetAsymmetricKeysPEM
  href: UltraForce.Library.NetStandard.Security.UFCryptoHelper.html#UltraForce_Library_NetStandard_Security_UFCryptoHelper_GetAsymmetricKeysPEM_System_String__System_Object__
  name: GetAsymmetricKeysPEM
  nameWithType: UFCryptoHelper.GetAsymmetricKeysPEM
  fullName: UltraForce.Library.NetStandard.Security.UFCryptoHelper.GetAsymmetricKeysPEM
- uid: UltraForce.Library.NetStandard.Security.UFCryptoHelper.AsymmetricSign*
  commentId: Overload:UltraForce.Library.NetStandard.Security.UFCryptoHelper.AsymmetricSign
  href: UltraForce.Library.NetStandard.Security.UFCryptoHelper.html#UltraForce_Library_NetStandard_Security_UFCryptoHelper_AsymmetricSign_System_String_System_Object_
  name: AsymmetricSign
  nameWithType: UFCryptoHelper.AsymmetricSign
  fullName: UltraForce.Library.NetStandard.Security.UFCryptoHelper.AsymmetricSign
- uid: UltraForce.Library.NetStandard.Security.UFCryptoHelper.Encrypt*
  commentId: Overload:UltraForce.Library.NetStandard.Security.UFCryptoHelper.Encrypt
  href: UltraForce.Library.NetStandard.Security.UFCryptoHelper.html#UltraForce_Library_NetStandard_Security_UFCryptoHelper_Encrypt_System_String_System_String_
  name: Encrypt
  nameWithType: UFCryptoHelper.Encrypt
  fullName: UltraForce.Library.NetStandard.Security.UFCryptoHelper.Encrypt
