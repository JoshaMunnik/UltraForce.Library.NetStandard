### YamlMime:ManagedReference
items:
- uid: UltraForce.Library.NetStandard.Tools.UFListTools
  commentId: T:UltraForce.Library.NetStandard.Tools.UFListTools
  id: UFListTools
  parent: UltraForce.Library.NetStandard.Tools
  children:
  - UltraForce.Library.NetStandard.Tools.UFListTools.Compact``1(System.Collections.Generic.List{``0},System.Func{``0,System.Boolean})
  - UltraForce.Library.NetStandard.Tools.UFListTools.ContainsAll``1(System.Collections.Generic.IList{``0},``0[])
  - UltraForce.Library.NetStandard.Tools.UFListTools.ContainsAny``1(System.Collections.Generic.IList{``0},``0[])
  - UltraForce.Library.NetStandard.Tools.UFListTools.EqualContent``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})
  - UltraForce.Library.NetStandard.Tools.UFListTools.FillAsync``1(System.Int32,System.Func{System.Threading.Tasks.Task{``0}})
  - UltraForce.Library.NetStandard.Tools.UFListTools.Fill``1(System.Collections.Generic.IList{``0},System.Int32)
  - UltraForce.Library.NetStandard.Tools.UFListTools.Fill``1(System.Collections.Generic.List{``0})
  - UltraForce.Library.NetStandard.Tools.UFListTools.Fill``1(System.Int32,System.Func{``0})
  - UltraForce.Library.NetStandard.Tools.UFListTools.IndexOf``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean},System.Int32)
  - UltraForce.Library.NetStandard.Tools.UFListTools.RandomItem``1(System.Collections.Generic.IList{``0})
  - UltraForce.Library.NetStandard.Tools.UFListTools.RandomItem``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)
  - UltraForce.Library.NetStandard.Tools.UFListTools.RemoveRandomItem``1(System.Collections.Generic.IList{``0})
  - UltraForce.Library.NetStandard.Tools.UFListTools.RemoveRandomItem``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)
  - UltraForce.Library.NetStandard.Tools.UFListTools.Shuffle``1(System.Collections.Generic.IList{``0})
  - UltraForce.Library.NetStandard.Tools.UFListTools.Shuffle``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)
  - UltraForce.Library.NetStandard.Tools.UFListTools.Swap``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)
  langs:
  - csharp
  - vb
  name: UFListTools
  nameWithType: UFListTools
  fullName: UltraForce.Library.NetStandard.Tools.UFListTools
  type: Class
  source:
    remote:
      path: UltraForce.Library.NetStandard/Tools/UFListTools.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: UFListTools
    path: ../UltraForce.Library.NetStandard/Tools/UFListTools.cs
    startLine: 39
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Tools
  summary: IList related utility methods.
  example: []
  syntax:
    content: public static class UFListTools
    content.vb: Public Module UFListTools
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: UltraForce.Library.NetStandard.Tools.UFListTools.Shuffle``1(System.Collections.Generic.IList{``0})
  commentId: M:UltraForce.Library.NetStandard.Tools.UFListTools.Shuffle``1(System.Collections.Generic.IList{``0})
  id: Shuffle``1(System.Collections.Generic.IList{``0})
  parent: UltraForce.Library.NetStandard.Tools.UFListTools
  langs:
  - csharp
  - vb
  name: Shuffle<T>(IList<T>)
  nameWithType: UFListTools.Shuffle<T>(IList<T>)
  fullName: UltraForce.Library.NetStandard.Tools.UFListTools.Shuffle<T>(System.Collections.Generic.IList<T>)
  type: Method
  source:
    remote:
      path: UltraForce.Library.NetStandard/Tools/UFListTools.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: Shuffle
    path: ../UltraForce.Library.NetStandard/Tools/UFListTools.cs
    startLine: 48
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Tools
  summary: Shuffles a list.
  example: []
  syntax:
    content: public static IList<T> Shuffle<T>(IList<T> aList)
    parameters:
    - id: aList
      type: System.Collections.Generic.IList{{T}}
      description: The list to shuffle.
    typeParameters:
    - id: T
    return:
      type: System.Collections.Generic.IList{{T}}
      description: The value of the anArray parameter
    content.vb: Public Shared Function Shuffle(Of T)(aList As IList(Of T)) As IList(Of T)
  overload: UltraForce.Library.NetStandard.Tools.UFListTools.Shuffle*
  nameWithType.vb: UFListTools.Shuffle(Of T)(IList(Of T))
  fullName.vb: UltraForce.Library.NetStandard.Tools.UFListTools.Shuffle(Of T)(System.Collections.Generic.IList(Of T))
  name.vb: Shuffle(Of T)(IList(Of T))
- uid: UltraForce.Library.NetStandard.Tools.UFListTools.Shuffle``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)
  commentId: M:UltraForce.Library.NetStandard.Tools.UFListTools.Shuffle``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)
  id: Shuffle``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)
  parent: UltraForce.Library.NetStandard.Tools.UFListTools
  langs:
  - csharp
  - vb
  name: Shuffle<T>(IList<T>, int, int)
  nameWithType: UFListTools.Shuffle<T>(IList<T>, int, int)
  fullName: UltraForce.Library.NetStandard.Tools.UFListTools.Shuffle<T>(System.Collections.Generic.IList<T>, int, int)
  type: Method
  source:
    remote:
      path: UltraForce.Library.NetStandard/Tools/UFListTools.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: Shuffle
    path: ../UltraForce.Library.NetStandard/Tools/UFListTools.cs
    startLine: 75
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Tools
  summary: Shuffles a part of a list.
  example: []
  syntax:
    content: public static IList<T> Shuffle<T>(IList<T> aList, int aStart, int aCount)
    parameters:
    - id: aList
      type: System.Collections.Generic.IList{{T}}
      description: The list to shuffle.
    - id: aStart
      type: System.Int32
      description: Start index
    - id: aCount
      type: System.Int32
      description: Number of elements
    typeParameters:
    - id: T
      description: Item type.
    return:
      type: System.Collections.Generic.IList{{T}}
      description: The value of the anArray parameter
    content.vb: Public Shared Function Shuffle(Of T)(aList As IList(Of T), aStart As Integer, aCount As Integer) As IList(Of T)
  overload: UltraForce.Library.NetStandard.Tools.UFListTools.Shuffle*
  nameWithType.vb: UFListTools.Shuffle(Of T)(IList(Of T), Integer, Integer)
  fullName.vb: UltraForce.Library.NetStandard.Tools.UFListTools.Shuffle(Of T)(System.Collections.Generic.IList(Of T), Integer, Integer)
  name.vb: Shuffle(Of T)(IList(Of T), Integer, Integer)
- uid: UltraForce.Library.NetStandard.Tools.UFListTools.Swap``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)
  commentId: M:UltraForce.Library.NetStandard.Tools.UFListTools.Swap``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)
  id: Swap``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)
  parent: UltraForce.Library.NetStandard.Tools.UFListTools
  langs:
  - csharp
  - vb
  name: Swap<T>(IList<T>, int, int)
  nameWithType: UFListTools.Swap<T>(IList<T>, int, int)
  fullName: UltraForce.Library.NetStandard.Tools.UFListTools.Swap<T>(System.Collections.Generic.IList<T>, int, int)
  type: Method
  source:
    remote:
      path: UltraForce.Library.NetStandard/Tools/UFListTools.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: Swap
    path: ../UltraForce.Library.NetStandard/Tools/UFListTools.cs
    startLine: 102
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Tools
  summary: Swaps two elements in a list.
  example: []
  syntax:
    content: public static IList<T> Swap<T>(IList<T> aList, int anIndex0, int anIndex1)
    parameters:
    - id: aList
      type: System.Collections.Generic.IList{{T}}
      description: An array to update
    - id: anIndex0
      type: System.Int32
      description: First element.
    - id: anIndex1
      type: System.Int32
      description: Second element.
    typeParameters:
    - id: T
      description: Item type.
    return:
      type: System.Collections.Generic.IList{{T}}
      description: The value of the anArray parameter
    content.vb: Public Shared Function Swap(Of T)(aList As IList(Of T), anIndex0 As Integer, anIndex1 As Integer) As IList(Of T)
  overload: UltraForce.Library.NetStandard.Tools.UFListTools.Swap*
  nameWithType.vb: UFListTools.Swap(Of T)(IList(Of T), Integer, Integer)
  fullName.vb: UltraForce.Library.NetStandard.Tools.UFListTools.Swap(Of T)(System.Collections.Generic.IList(Of T), Integer, Integer)
  name.vb: Swap(Of T)(IList(Of T), Integer, Integer)
- uid: UltraForce.Library.NetStandard.Tools.UFListTools.RandomItem``1(System.Collections.Generic.IList{``0})
  commentId: M:UltraForce.Library.NetStandard.Tools.UFListTools.RandomItem``1(System.Collections.Generic.IList{``0})
  id: RandomItem``1(System.Collections.Generic.IList{``0})
  parent: UltraForce.Library.NetStandard.Tools.UFListTools
  langs:
  - csharp
  - vb
  name: RandomItem<T>(IList<T>)
  nameWithType: UFListTools.RandomItem<T>(IList<T>)
  fullName: UltraForce.Library.NetStandard.Tools.UFListTools.RandomItem<T>(System.Collections.Generic.IList<T>)
  type: Method
  source:
    remote:
      path: UltraForce.Library.NetStandard/Tools/UFListTools.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: RandomItem
    path: ../UltraForce.Library.NetStandard/Tools/UFListTools.cs
    startLine: 124
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Tools
  summary: Returns random item from a list.
  example: []
  syntax:
    content: public static T RandomItem<T>(IList<T> aList)
    parameters:
    - id: aList
      type: System.Collections.Generic.IList{{T}}
      description: The list to get a value from.
    typeParameters:
    - id: T
      description: Item type.
    return:
      type: '{T}'
      description: An item from the list.
    content.vb: Public Shared Function RandomItem(Of T)(aList As IList(Of T)) As T
  overload: UltraForce.Library.NetStandard.Tools.UFListTools.RandomItem*
  nameWithType.vb: UFListTools.RandomItem(Of T)(IList(Of T))
  fullName.vb: UltraForce.Library.NetStandard.Tools.UFListTools.RandomItem(Of T)(System.Collections.Generic.IList(Of T))
  name.vb: RandomItem(Of T)(IList(Of T))
- uid: UltraForce.Library.NetStandard.Tools.UFListTools.RandomItem``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)
  commentId: M:UltraForce.Library.NetStandard.Tools.UFListTools.RandomItem``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)
  id: RandomItem``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)
  parent: UltraForce.Library.NetStandard.Tools.UFListTools
  langs:
  - csharp
  - vb
  name: RandomItem<T>(IList<T>, int, int)
  nameWithType: UFListTools.RandomItem<T>(IList<T>, int, int)
  fullName: UltraForce.Library.NetStandard.Tools.UFListTools.RandomItem<T>(System.Collections.Generic.IList<T>, int, int)
  type: Method
  source:
    remote:
      path: UltraForce.Library.NetStandard/Tools/UFListTools.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: RandomItem
    path: ../UltraForce.Library.NetStandard/Tools/UFListTools.cs
    startLine: 147
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Tools
  summary: Returns random item from a part of a list.
  example: []
  syntax:
    content: public static T RandomItem<T>(IList<T> aList, int aStart, int aCount)
    parameters:
    - id: aList
      type: System.Collections.Generic.IList{{T}}
      description: The list to get a value from.
    - id: aStart
      type: System.Int32
      description: Start index
    - id: aCount
      type: System.Int32
      description: Number of elements
    typeParameters:
    - id: T
      description: Item type.
    return:
      type: '{T}'
      description: An item from the list.
    content.vb: Public Shared Function RandomItem(Of T)(aList As IList(Of T), aStart As Integer, aCount As Integer) As T
  overload: UltraForce.Library.NetStandard.Tools.UFListTools.RandomItem*
  nameWithType.vb: UFListTools.RandomItem(Of T)(IList(Of T), Integer, Integer)
  fullName.vb: UltraForce.Library.NetStandard.Tools.UFListTools.RandomItem(Of T)(System.Collections.Generic.IList(Of T), Integer, Integer)
  name.vb: RandomItem(Of T)(IList(Of T), Integer, Integer)
- uid: UltraForce.Library.NetStandard.Tools.UFListTools.RemoveRandomItem``1(System.Collections.Generic.IList{``0})
  commentId: M:UltraForce.Library.NetStandard.Tools.UFListTools.RemoveRandomItem``1(System.Collections.Generic.IList{``0})
  id: RemoveRandomItem``1(System.Collections.Generic.IList{``0})
  parent: UltraForce.Library.NetStandard.Tools.UFListTools
  langs:
  - csharp
  - vb
  name: RemoveRandomItem<T>(IList<T>)
  nameWithType: UFListTools.RemoveRandomItem<T>(IList<T>)
  fullName: UltraForce.Library.NetStandard.Tools.UFListTools.RemoveRandomItem<T>(System.Collections.Generic.IList<T>)
  type: Method
  source:
    remote:
      path: UltraForce.Library.NetStandard/Tools/UFListTools.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: RemoveRandomItem
    path: ../UltraForce.Library.NetStandard/Tools/UFListTools.cs
    startLine: 158
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Tools
  summary: Removes and returns random item from a list.
  example: []
  syntax:
    content: public static T RemoveRandomItem<T>(IList<T> aList)
    parameters:
    - id: aList
      type: System.Collections.Generic.IList{{T}}
      description: The list to get a value from.
    typeParameters:
    - id: T
      description: Item type.
    return:
      type: '{T}'
      description: An item from the list (which is also removed).
    content.vb: Public Shared Function RemoveRandomItem(Of T)(aList As IList(Of T)) As T
  overload: UltraForce.Library.NetStandard.Tools.UFListTools.RemoveRandomItem*
  nameWithType.vb: UFListTools.RemoveRandomItem(Of T)(IList(Of T))
  fullName.vb: UltraForce.Library.NetStandard.Tools.UFListTools.RemoveRandomItem(Of T)(System.Collections.Generic.IList(Of T))
  name.vb: RemoveRandomItem(Of T)(IList(Of T))
- uid: UltraForce.Library.NetStandard.Tools.UFListTools.RemoveRandomItem``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)
  commentId: M:UltraForce.Library.NetStandard.Tools.UFListTools.RemoveRandomItem``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)
  id: RemoveRandomItem``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)
  parent: UltraForce.Library.NetStandard.Tools.UFListTools
  langs:
  - csharp
  - vb
  name: RemoveRandomItem<T>(IList<T>, int, int)
  nameWithType: UFListTools.RemoveRandomItem<T>(IList<T>, int, int)
  fullName: UltraForce.Library.NetStandard.Tools.UFListTools.RemoveRandomItem<T>(System.Collections.Generic.IList<T>, int, int)
  type: Method
  source:
    remote:
      path: UltraForce.Library.NetStandard/Tools/UFListTools.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: RemoveRandomItem
    path: ../UltraForce.Library.NetStandard/Tools/UFListTools.cs
    startLine: 171
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Tools
  summary: Removes and returns random item from a part of a list.
  example: []
  syntax:
    content: public static T RemoveRandomItem<T>(IList<T> aList, int aStart, int aCount)
    parameters:
    - id: aList
      type: System.Collections.Generic.IList{{T}}
      description: The list to get a value from.
    - id: aStart
      type: System.Int32
      description: Start index
    - id: aCount
      type: System.Int32
      description: Number of elements
    typeParameters:
    - id: T
      description: Item type.
    return:
      type: '{T}'
      description: An item from the list.
    content.vb: Public Shared Function RemoveRandomItem(Of T)(aList As IList(Of T), aStart As Integer, aCount As Integer) As T
  overload: UltraForce.Library.NetStandard.Tools.UFListTools.RemoveRandomItem*
  nameWithType.vb: UFListTools.RemoveRandomItem(Of T)(IList(Of T), Integer, Integer)
  fullName.vb: UltraForce.Library.NetStandard.Tools.UFListTools.RemoveRandomItem(Of T)(System.Collections.Generic.IList(Of T), Integer, Integer)
  name.vb: RemoveRandomItem(Of T)(IList(Of T), Integer, Integer)
- uid: UltraForce.Library.NetStandard.Tools.UFListTools.Fill``1(System.Collections.Generic.IList{``0},System.Int32)
  commentId: M:UltraForce.Library.NetStandard.Tools.UFListTools.Fill``1(System.Collections.Generic.IList{``0},System.Int32)
  id: Fill``1(System.Collections.Generic.IList{``0},System.Int32)
  parent: UltraForce.Library.NetStandard.Tools.UFListTools
  langs:
  - csharp
  - vb
  name: Fill<T>(IList<T>, int)
  nameWithType: UFListTools.Fill<T>(IList<T>, int)
  fullName: UltraForce.Library.NetStandard.Tools.UFListTools.Fill<T>(System.Collections.Generic.IList<T>, int)
  type: Method
  source:
    remote:
      path: UltraForce.Library.NetStandard/Tools/UFListTools.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: Fill
    path: ../UltraForce.Library.NetStandard/Tools/UFListTools.cs
    startLine: 189
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Tools
  summary: Fills a list by adding a number of new instances of a certain type.
  remarks: Type <code>T</code> must have a parameterless constructor.
  example: []
  syntax:
    content: public static IList<T> Fill<T>(IList<T> aList, int aCount)
    parameters:
    - id: aList
      type: System.Collections.Generic.IList{{T}}
      description: List to add new instances to
    - id: aCount
      type: System.Int32
      description: Number of new instances to add
    typeParameters:
    - id: T
      description: Type to add
    return:
      type: System.Collections.Generic.IList{{T}}
      description: Value of <code>aList</code>
    content.vb: Public Shared Function Fill(Of T)(aList As IList(Of T), aCount As Integer) As IList(Of T)
  overload: UltraForce.Library.NetStandard.Tools.UFListTools.Fill*
  nameWithType.vb: UFListTools.Fill(Of T)(IList(Of T), Integer)
  fullName.vb: UltraForce.Library.NetStandard.Tools.UFListTools.Fill(Of T)(System.Collections.Generic.IList(Of T), Integer)
  name.vb: Fill(Of T)(IList(Of T), Integer)
- uid: UltraForce.Library.NetStandard.Tools.UFListTools.Fill``1(System.Collections.Generic.List{``0})
  commentId: M:UltraForce.Library.NetStandard.Tools.UFListTools.Fill``1(System.Collections.Generic.List{``0})
  id: Fill``1(System.Collections.Generic.List{``0})
  parent: UltraForce.Library.NetStandard.Tools.UFListTools
  langs:
  - csharp
  - vb
  name: Fill<T>(List<T>)
  nameWithType: UFListTools.Fill<T>(List<T>)
  fullName: UltraForce.Library.NetStandard.Tools.UFListTools.Fill<T>(System.Collections.Generic.List<T>)
  type: Method
  source:
    remote:
      path: UltraForce.Library.NetStandard/Tools/UFListTools.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: Fill
    path: ../UltraForce.Library.NetStandard/Tools/UFListTools.cs
    startLine: 208
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Tools
  summary: >-
    Fills a list by adding <xref href="System.Collections.Generic.List%601.Capacity" data-throw-if-not-resolved="false"></xref> new instances 

    of a certain type.
  remarks: Type <code>T</code> must have a parameterless constructor.
  example: []
  syntax:
    content: public static List<T> Fill<T>(List<T> aList)
    parameters:
    - id: aList
      type: System.Collections.Generic.List{{T}}
      description: List to add new instances to
    typeParameters:
    - id: T
      description: Type to add
    return:
      type: System.Collections.Generic.List{{T}}
      description: Value of <code>aList</code>
    content.vb: Public Shared Function Fill(Of T)(aList As List(Of T)) As List(Of T)
  overload: UltraForce.Library.NetStandard.Tools.UFListTools.Fill*
  nameWithType.vb: UFListTools.Fill(Of T)(List(Of T))
  fullName.vb: UltraForce.Library.NetStandard.Tools.UFListTools.Fill(Of T)(System.Collections.Generic.List(Of T))
  name.vb: Fill(Of T)(List(Of T))
- uid: UltraForce.Library.NetStandard.Tools.UFListTools.Compact``1(System.Collections.Generic.List{``0},System.Func{``0,System.Boolean})
  commentId: M:UltraForce.Library.NetStandard.Tools.UFListTools.Compact``1(System.Collections.Generic.List{``0},System.Func{``0,System.Boolean})
  id: Compact``1(System.Collections.Generic.List{``0},System.Func{``0,System.Boolean})
  parent: UltraForce.Library.NetStandard.Tools.UFListTools
  langs:
  - csharp
  - vb
  name: Compact<T>(List<T>, Func<T, bool>)
  nameWithType: UFListTools.Compact<T>(List<T>, Func<T, bool>)
  fullName: UltraForce.Library.NetStandard.Tools.UFListTools.Compact<T>(System.Collections.Generic.List<T>, System.Func<T, bool>)
  type: Method
  source:
    remote:
      path: UltraForce.Library.NetStandard/Tools/UFListTools.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: Compact
    path: ../UltraForce.Library.NetStandard/Tools/UFListTools.cs
    startLine: 220
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Tools
  summary: Compacts a list by removing items that do not pass a test function.
  example: []
  syntax:
    content: public static List<T> Compact<T>(List<T> aList, Func<T, bool> aTest)
    parameters:
    - id: aList
      type: System.Collections.Generic.List{{T}}
      description: List to compact
    - id: aTest
      type: System.Func{{T},System.Boolean}
      description: Test function
    typeParameters:
    - id: T
      description: Type of list items
    return:
      type: System.Collections.Generic.List{{T}}
      description: value of <code>aList</code>
    content.vb: Public Shared Function Compact(Of T)(aList As List(Of T), aTest As Func(Of T, Boolean)) As List(Of T)
  overload: UltraForce.Library.NetStandard.Tools.UFListTools.Compact*
  nameWithType.vb: UFListTools.Compact(Of T)(List(Of T), Func(Of T, Boolean))
  fullName.vb: UltraForce.Library.NetStandard.Tools.UFListTools.Compact(Of T)(System.Collections.Generic.List(Of T), System.Func(Of T, Boolean))
  name.vb: Compact(Of T)(List(Of T), Func(Of T, Boolean))
- uid: UltraForce.Library.NetStandard.Tools.UFListTools.FillAsync``1(System.Int32,System.Func{System.Threading.Tasks.Task{``0}})
  commentId: M:UltraForce.Library.NetStandard.Tools.UFListTools.FillAsync``1(System.Int32,System.Func{System.Threading.Tasks.Task{``0}})
  id: FillAsync``1(System.Int32,System.Func{System.Threading.Tasks.Task{``0}})
  parent: UltraForce.Library.NetStandard.Tools.UFListTools
  langs:
  - csharp
  - vb
  name: FillAsync<T>(int, Func<Task<T>>)
  nameWithType: UFListTools.FillAsync<T>(int, Func<Task<T>>)
  fullName: UltraForce.Library.NetStandard.Tools.UFListTools.FillAsync<T>(int, System.Func<System.Threading.Tasks.Task<T>>)
  type: Method
  source:
    remote:
      path: UltraForce.Library.NetStandard/Tools/UFListTools.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: FillAsync
    path: ../UltraForce.Library.NetStandard/Tools/UFListTools.cs
    startLine: 247
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Tools
  summary: Creates a list of items by calling a factory function a number of times.
  example: []
  syntax:
    content: public static Task<List<T>> FillAsync<T>(int aCount, Func<Task<T>> aFactory)
    parameters:
    - id: aCount
      type: System.Int32
      description: ''
    - id: aFactory
      type: System.Func{System.Threading.Tasks.Task{{T}}}
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{{T}}}
      description: ''
    content.vb: Public Shared Function FillAsync(Of T)(aCount As Integer, aFactory As Func(Of Task(Of T))) As Task(Of List(Of T))
  overload: UltraForce.Library.NetStandard.Tools.UFListTools.FillAsync*
  nameWithType.vb: UFListTools.FillAsync(Of T)(Integer, Func(Of Task(Of T)))
  fullName.vb: UltraForce.Library.NetStandard.Tools.UFListTools.FillAsync(Of T)(Integer, System.Func(Of System.Threading.Tasks.Task(Of T)))
  name.vb: FillAsync(Of T)(Integer, Func(Of Task(Of T)))
- uid: UltraForce.Library.NetStandard.Tools.UFListTools.Fill``1(System.Int32,System.Func{``0})
  commentId: M:UltraForce.Library.NetStandard.Tools.UFListTools.Fill``1(System.Int32,System.Func{``0})
  id: Fill``1(System.Int32,System.Func{``0})
  parent: UltraForce.Library.NetStandard.Tools.UFListTools
  langs:
  - csharp
  - vb
  name: Fill<T>(int, Func<T>)
  nameWithType: UFListTools.Fill<T>(int, Func<T>)
  fullName: UltraForce.Library.NetStandard.Tools.UFListTools.Fill<T>(int, System.Func<T>)
  type: Method
  source:
    remote:
      path: UltraForce.Library.NetStandard/Tools/UFListTools.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: Fill
    path: ../UltraForce.Library.NetStandard/Tools/UFListTools.cs
    startLine: 264
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Tools
  summary: Creates a list of items by calling a factory function a number of times.
  example: []
  syntax:
    content: public static List<T> Fill<T>(int aCount, Func<T> aFactory)
    parameters:
    - id: aCount
      type: System.Int32
      description: ''
    - id: aFactory
      type: System.Func{{T}}
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Collections.Generic.List{{T}}
      description: ''
    content.vb: Public Shared Function Fill(Of T)(aCount As Integer, aFactory As Func(Of T)) As List(Of T)
  overload: UltraForce.Library.NetStandard.Tools.UFListTools.Fill*
  nameWithType.vb: UFListTools.Fill(Of T)(Integer, Func(Of T))
  fullName.vb: UltraForce.Library.NetStandard.Tools.UFListTools.Fill(Of T)(Integer, System.Func(Of T))
  name.vb: Fill(Of T)(Integer, Func(Of T))
- uid: UltraForce.Library.NetStandard.Tools.UFListTools.EqualContent``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})
  commentId: M:UltraForce.Library.NetStandard.Tools.UFListTools.EqualContent``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})
  id: EqualContent``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})
  parent: UltraForce.Library.NetStandard.Tools.UFListTools
  langs:
  - csharp
  - vb
  name: EqualContent<T>(IList<T>, IList<T>)
  nameWithType: UFListTools.EqualContent<T>(IList<T>, IList<T>)
  fullName: UltraForce.Library.NetStandard.Tools.UFListTools.EqualContent<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IList<T>)
  type: Method
  source:
    remote:
      path: UltraForce.Library.NetStandard/Tools/UFListTools.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: EqualContent
    path: ../UltraForce.Library.NetStandard/Tools/UFListTools.cs
    startLine: 282
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Tools
  summary: >-
    Checks if two lists are equal, in that they contain the same items. The order of the items

    does not have to be the same.
  example: []
  syntax:
    content: public static bool EqualContent<T>(IList<T> aFirst, IList<T> aSecond)
    parameters:
    - id: aFirst
      type: System.Collections.Generic.IList{{T}}
      description: ''
    - id: aSecond
      type: System.Collections.Generic.IList{{T}}
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function EqualContent(Of T)(aFirst As IList(Of T), aSecond As IList(Of T)) As Boolean
  overload: UltraForce.Library.NetStandard.Tools.UFListTools.EqualContent*
  nameWithType.vb: UFListTools.EqualContent(Of T)(IList(Of T), IList(Of T))
  fullName.vb: UltraForce.Library.NetStandard.Tools.UFListTools.EqualContent(Of T)(System.Collections.Generic.IList(Of T), System.Collections.Generic.IList(Of T))
  name.vb: EqualContent(Of T)(IList(Of T), IList(Of T))
- uid: UltraForce.Library.NetStandard.Tools.UFListTools.IndexOf``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean},System.Int32)
  commentId: M:UltraForce.Library.NetStandard.Tools.UFListTools.IndexOf``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean},System.Int32)
  id: IndexOf``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean},System.Int32)
  parent: UltraForce.Library.NetStandard.Tools.UFListTools
  langs:
  - csharp
  - vb
  name: IndexOf<T>(IList<T>, Func<T, bool>, int)
  nameWithType: UFListTools.IndexOf<T>(IList<T>, Func<T, bool>, int)
  fullName: UltraForce.Library.NetStandard.Tools.UFListTools.IndexOf<T>(System.Collections.Generic.IList<T>, System.Func<T, bool>, int)
  type: Method
  source:
    remote:
      path: UltraForce.Library.NetStandard/Tools/UFListTools.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: IndexOf
    path: ../UltraForce.Library.NetStandard/Tools/UFListTools.cs
    startLine: 295
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Tools
  summary: Finds the index of the first element that passes a test.
  example: []
  syntax:
    content: public static int IndexOf<T>(IList<T> aList, Func<T, bool> aTest, int aStart = 0)
    parameters:
    - id: aList
      type: System.Collections.Generic.IList{{T}}
      description: List to process
    - id: aTest
      type: System.Func{{T},System.Boolean}
      description: Test to pass
    - id: aStart
      type: System.Int32
      description: Optional starting index
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Int32
      description: Index of -1 if no item passes the test
    content.vb: Public Shared Function IndexOf(Of T)(aList As IList(Of T), aTest As Func(Of T, Boolean), aStart As Integer = 0) As Integer
  overload: UltraForce.Library.NetStandard.Tools.UFListTools.IndexOf*
  nameWithType.vb: UFListTools.IndexOf(Of T)(IList(Of T), Func(Of T, Boolean), Integer)
  fullName.vb: UltraForce.Library.NetStandard.Tools.UFListTools.IndexOf(Of T)(System.Collections.Generic.IList(Of T), System.Func(Of T, Boolean), Integer)
  name.vb: IndexOf(Of T)(IList(Of T), Func(Of T, Boolean), Integer)
- uid: UltraForce.Library.NetStandard.Tools.UFListTools.ContainsAny``1(System.Collections.Generic.IList{``0},``0[])
  commentId: M:UltraForce.Library.NetStandard.Tools.UFListTools.ContainsAny``1(System.Collections.Generic.IList{``0},``0[])
  id: ContainsAny``1(System.Collections.Generic.IList{``0},``0[])
  parent: UltraForce.Library.NetStandard.Tools.UFListTools
  langs:
  - csharp
  - vb
  name: ContainsAny<T>(IList<T>, params T[])
  nameWithType: UFListTools.ContainsAny<T>(IList<T>, params T[])
  fullName: UltraForce.Library.NetStandard.Tools.UFListTools.ContainsAny<T>(System.Collections.Generic.IList<T>, params T[])
  type: Method
  source:
    remote:
      path: UltraForce.Library.NetStandard/Tools/UFListTools.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: ContainsAny
    path: ../UltraForce.Library.NetStandard/Tools/UFListTools.cs
    startLine: 314
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Tools
  summary: Checks if a list contains any of the values.
  example: []
  syntax:
    content: public static bool ContainsAny<T>(IList<T> list, params T[] values)
    parameters:
    - id: list
      type: System.Collections.Generic.IList{{T}}
      description: List to check
    - id: values
      type: '{T}[]'
      description: Value to check
    typeParameters:
    - id: T
      description: Type of the elements inside the list
    return:
      type: System.Boolean
      description: <code>true</code> if any of the values are found in the list
    content.vb: Public Shared Function ContainsAny(Of T)(list As IList(Of T), ParamArray values As T()) As Boolean
  overload: UltraForce.Library.NetStandard.Tools.UFListTools.ContainsAny*
  nameWithType.vb: UFListTools.ContainsAny(Of T)(IList(Of T), ParamArray T())
  fullName.vb: UltraForce.Library.NetStandard.Tools.UFListTools.ContainsAny(Of T)(System.Collections.Generic.IList(Of T), ParamArray T())
  name.vb: ContainsAny(Of T)(IList(Of T), ParamArray T())
- uid: UltraForce.Library.NetStandard.Tools.UFListTools.ContainsAll``1(System.Collections.Generic.IList{``0},``0[])
  commentId: M:UltraForce.Library.NetStandard.Tools.UFListTools.ContainsAll``1(System.Collections.Generic.IList{``0},``0[])
  id: ContainsAll``1(System.Collections.Generic.IList{``0},``0[])
  parent: UltraForce.Library.NetStandard.Tools.UFListTools
  langs:
  - csharp
  - vb
  name: ContainsAll<T>(IList<T>, params T[])
  nameWithType: UFListTools.ContainsAll<T>(IList<T>, params T[])
  fullName: UltraForce.Library.NetStandard.Tools.UFListTools.ContainsAll<T>(System.Collections.Generic.IList<T>, params T[])
  type: Method
  source:
    remote:
      path: UltraForce.Library.NetStandard/Tools/UFListTools.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: ContainsAll
    path: ../UltraForce.Library.NetStandard/Tools/UFListTools.cs
    startLine: 326
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Tools
  summary: Checks if a list contains all the values.
  example: []
  syntax:
    content: public static bool ContainsAll<T>(IList<T> list, params T[] values)
    parameters:
    - id: list
      type: System.Collections.Generic.IList{{T}}
      description: List to check
    - id: values
      type: '{T}[]'
      description: Value to check
    typeParameters:
    - id: T
      description: Type of the elements inside the list
    return:
      type: System.Boolean
      description: <code>true</code> if all values are found in the list
    content.vb: Public Shared Function ContainsAll(Of T)(list As IList(Of T), ParamArray values As T()) As Boolean
  overload: UltraForce.Library.NetStandard.Tools.UFListTools.ContainsAll*
  nameWithType.vb: UFListTools.ContainsAll(Of T)(IList(Of T), ParamArray T())
  fullName.vb: UltraForce.Library.NetStandard.Tools.UFListTools.ContainsAll(Of T)(System.Collections.Generic.IList(Of T), ParamArray T())
  name.vb: ContainsAll(Of T)(IList(Of T), ParamArray T())
references:
- uid: UltraForce.Library.NetStandard.Tools
  commentId: N:UltraForce.Library.NetStandard.Tools
  href: UltraForce.html
  name: UltraForce.Library.NetStandard.Tools
  nameWithType: UltraForce.Library.NetStandard.Tools
  fullName: UltraForce.Library.NetStandard.Tools
  spec.csharp:
  - uid: UltraForce
    name: UltraForce
    href: UltraForce.html
  - name: .
  - uid: UltraForce.Library
    name: Library
    href: UltraForce.Library.html
  - name: .
  - uid: UltraForce.Library.NetStandard
    name: NetStandard
    href: UltraForce.Library.NetStandard.html
  - name: .
  - uid: UltraForce.Library.NetStandard.Tools
    name: Tools
    href: UltraForce.Library.NetStandard.Tools.html
  spec.vb:
  - uid: UltraForce
    name: UltraForce
    href: UltraForce.html
  - name: .
  - uid: UltraForce.Library
    name: Library
    href: UltraForce.Library.html
  - name: .
  - uid: UltraForce.Library.NetStandard
    name: NetStandard
    href: UltraForce.Library.NetStandard.html
  - name: .
  - uid: UltraForce.Library.NetStandard.Tools
    name: Tools
    href: UltraForce.Library.NetStandard.Tools.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: UltraForce.Library.NetStandard.Tools.UFListTools.Shuffle*
  commentId: Overload:UltraForce.Library.NetStandard.Tools.UFListTools.Shuffle
  href: UltraForce.Library.NetStandard.Tools.UFListTools.html#UltraForce_Library_NetStandard_Tools_UFListTools_Shuffle__1_System_Collections_Generic_IList___0__
  name: Shuffle
  nameWithType: UFListTools.Shuffle
  fullName: UltraForce.Library.NetStandard.Tools.UFListTools.Shuffle
- uid: System.Collections.Generic.IList{{T}}
  commentId: T:System.Collections.Generic.IList{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: UltraForce.Library.NetStandard.Tools.UFListTools.Swap*
  commentId: Overload:UltraForce.Library.NetStandard.Tools.UFListTools.Swap
  href: UltraForce.Library.NetStandard.Tools.UFListTools.html#UltraForce_Library_NetStandard_Tools_UFListTools_Swap__1_System_Collections_Generic_IList___0__System_Int32_System_Int32_
  name: Swap
  nameWithType: UFListTools.Swap
  fullName: UltraForce.Library.NetStandard.Tools.UFListTools.Swap
- uid: UltraForce.Library.NetStandard.Tools.UFListTools.RandomItem*
  commentId: Overload:UltraForce.Library.NetStandard.Tools.UFListTools.RandomItem
  href: UltraForce.Library.NetStandard.Tools.UFListTools.html#UltraForce_Library_NetStandard_Tools_UFListTools_RandomItem__1_System_Collections_Generic_IList___0__
  name: RandomItem
  nameWithType: UFListTools.RandomItem
  fullName: UltraForce.Library.NetStandard.Tools.UFListTools.RandomItem
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: UltraForce.Library.NetStandard.Tools.UFListTools.RemoveRandomItem*
  commentId: Overload:UltraForce.Library.NetStandard.Tools.UFListTools.RemoveRandomItem
  href: UltraForce.Library.NetStandard.Tools.UFListTools.html#UltraForce_Library_NetStandard_Tools_UFListTools_RemoveRandomItem__1_System_Collections_Generic_IList___0__
  name: RemoveRandomItem
  nameWithType: UFListTools.RemoveRandomItem
  fullName: UltraForce.Library.NetStandard.Tools.UFListTools.RemoveRandomItem
- uid: UltraForce.Library.NetStandard.Tools.UFListTools.Fill*
  commentId: Overload:UltraForce.Library.NetStandard.Tools.UFListTools.Fill
  href: UltraForce.Library.NetStandard.Tools.UFListTools.html#UltraForce_Library_NetStandard_Tools_UFListTools_Fill__1_System_Collections_Generic_IList___0__System_Int32_
  name: Fill
  nameWithType: UFListTools.Fill
  fullName: UltraForce.Library.NetStandard.Tools.UFListTools.Fill
- uid: System.Collections.Generic.List`1.Capacity
  commentId: P:System.Collections.Generic.List`1.Capacity
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1.capacity
  name: Capacity
  nameWithType: List<T>.Capacity
  fullName: System.Collections.Generic.List<T>.Capacity
  nameWithType.vb: List(Of T).Capacity
  fullName.vb: System.Collections.Generic.List(Of T).Capacity
- uid: System.Collections.Generic.List{{T}}
  commentId: T:System.Collections.Generic.List{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: UltraForce.Library.NetStandard.Tools.UFListTools.Compact*
  commentId: Overload:UltraForce.Library.NetStandard.Tools.UFListTools.Compact
  href: UltraForce.Library.NetStandard.Tools.UFListTools.html#UltraForce_Library_NetStandard_Tools_UFListTools_Compact__1_System_Collections_Generic_List___0__System_Func___0_System_Boolean__
  name: Compact
  nameWithType: UFListTools.Compact
  fullName: UltraForce.Library.NetStandard.Tools.UFListTools.Compact
- uid: System.Func{{T},System.Boolean}
  commentId: T:System.Func{``0,System.Boolean}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<T, bool>
  nameWithType: Func<T, bool>
  fullName: System.Func<T, bool>
  nameWithType.vb: Func(Of T, Boolean)
  fullName.vb: System.Func(Of T, Boolean)
  name.vb: Func(Of T, Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: UltraForce.Library.NetStandard.Tools.UFListTools.FillAsync*
  commentId: Overload:UltraForce.Library.NetStandard.Tools.UFListTools.FillAsync
  href: UltraForce.Library.NetStandard.Tools.UFListTools.html#UltraForce_Library_NetStandard_Tools_UFListTools_FillAsync__1_System_Int32_System_Func_System_Threading_Tasks_Task___0___
  name: FillAsync
  nameWithType: UFListTools.FillAsync
  fullName: UltraForce.Library.NetStandard.Tools.UFListTools.FillAsync
- uid: System.Func{System.Threading.Tasks.Task{{T}}}
  commentId: T:System.Func{System.Threading.Tasks.Task{``0}}
  parent: System
  definition: System.Func`1
  href: https://learn.microsoft.com/dotnet/api/system.func-1
  name: Func<Task<T>>
  nameWithType: Func<Task<T>>
  fullName: System.Func<System.Threading.Tasks.Task<T>>
  nameWithType.vb: Func(Of Task(Of T))
  fullName.vb: System.Func(Of System.Threading.Tasks.Task(Of T))
  name.vb: Func(Of Task(Of T))
  spec.csharp:
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: <
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: T
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: System.Threading.Tasks.Task{System.Collections.Generic.List{{T}}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.List{``0}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<List<T>>
  nameWithType: Task<List<T>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.List<T>>
  nameWithType.vb: Task(Of List(Of T))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.List(Of T))
  name.vb: Task(Of List(Of T))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - name: T
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: System.Func`1
  commentId: T:System.Func`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-1
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
  nameWithType.vb: Func(Of TResult)
  fullName.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: System.Func{{T}}
  commentId: T:System.Func{``0}
  parent: System
  definition: System.Func`1
  href: https://learn.microsoft.com/dotnet/api/system.func-1
  name: Func<T>
  nameWithType: Func<T>
  fullName: System.Func<T>
  nameWithType.vb: Func(Of T)
  fullName.vb: System.Func(Of T)
  name.vb: Func(Of T)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: UltraForce.Library.NetStandard.Tools.UFListTools.EqualContent*
  commentId: Overload:UltraForce.Library.NetStandard.Tools.UFListTools.EqualContent
  href: UltraForce.Library.NetStandard.Tools.UFListTools.html#UltraForce_Library_NetStandard_Tools_UFListTools_EqualContent__1_System_Collections_Generic_IList___0__System_Collections_Generic_IList___0__
  name: EqualContent
  nameWithType: UFListTools.EqualContent
  fullName: UltraForce.Library.NetStandard.Tools.UFListTools.EqualContent
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: UltraForce.Library.NetStandard.Tools.UFListTools.IndexOf*
  commentId: Overload:UltraForce.Library.NetStandard.Tools.UFListTools.IndexOf
  href: UltraForce.Library.NetStandard.Tools.UFListTools.html#UltraForce_Library_NetStandard_Tools_UFListTools_IndexOf__1_System_Collections_Generic_IList___0__System_Func___0_System_Boolean__System_Int32_
  name: IndexOf
  nameWithType: UFListTools.IndexOf
  fullName: UltraForce.Library.NetStandard.Tools.UFListTools.IndexOf
- uid: UltraForce.Library.NetStandard.Tools.UFListTools.ContainsAny*
  commentId: Overload:UltraForce.Library.NetStandard.Tools.UFListTools.ContainsAny
  href: UltraForce.Library.NetStandard.Tools.UFListTools.html#UltraForce_Library_NetStandard_Tools_UFListTools_ContainsAny__1_System_Collections_Generic_IList___0____0___
  name: ContainsAny
  nameWithType: UFListTools.ContainsAny
  fullName: UltraForce.Library.NetStandard.Tools.UFListTools.ContainsAny
- uid: '{T}[]'
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  nameWithType.vb: T()
  fullName.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
  - name: '['
  - name: ']'
  spec.vb:
  - name: T
  - name: (
  - name: )
- uid: UltraForce.Library.NetStandard.Tools.UFListTools.ContainsAll*
  commentId: Overload:UltraForce.Library.NetStandard.Tools.UFListTools.ContainsAll
  href: UltraForce.Library.NetStandard.Tools.UFListTools.html#UltraForce_Library_NetStandard_Tools_UFListTools_ContainsAll__1_System_Collections_Generic_IList___0____0___
  name: ContainsAll
  nameWithType: UFListTools.ContainsAll
  fullName: UltraForce.Library.NetStandard.Tools.UFListTools.ContainsAll
