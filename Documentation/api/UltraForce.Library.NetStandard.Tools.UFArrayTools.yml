### YamlMime:ManagedReference
items:
- uid: UltraForce.Library.NetStandard.Tools.UFArrayTools
  commentId: T:UltraForce.Library.NetStandard.Tools.UFArrayTools
  id: UFArrayTools
  parent: UltraForce.Library.NetStandard.Tools
  children:
  - UltraForce.Library.NetStandard.Tools.UFArrayTools.Fill``1(``0[])
  - UltraForce.Library.NetStandard.Tools.UFArrayTools.Fill``1(``0[],System.Int32,System.Int32)
  - UltraForce.Library.NetStandard.Tools.UFArrayTools.RandomItem``1(``0[])
  - UltraForce.Library.NetStandard.Tools.UFArrayTools.RandomItem``1(``0[],System.Int32,System.Int32)
  - UltraForce.Library.NetStandard.Tools.UFArrayTools.Shuffle``1(``0[])
  - UltraForce.Library.NetStandard.Tools.UFArrayTools.Swap``1(``0[],System.Int32,System.Int32)
  langs:
  - csharp
  - vb
  name: UFArrayTools
  nameWithType: UFArrayTools
  fullName: UltraForce.Library.NetStandard.Tools.UFArrayTools
  type: Class
  source:
    remote:
      path: UltraForce.Library.NetStandard/Tools/UFArrayTools.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: UFArrayTools
    path: ../UltraForce.Library.NetStandard/Tools/UFArrayTools.cs
    startLine: 36
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Tools
  summary: Array related utility methods.
  example: []
  syntax:
    content: public static class UFArrayTools
    content.vb: Public Module UFArrayTools
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: UltraForce.Library.NetStandard.Tools.UFArrayTools.Shuffle``1(``0[])
  commentId: M:UltraForce.Library.NetStandard.Tools.UFArrayTools.Shuffle``1(``0[])
  id: Shuffle``1(``0[])
  parent: UltraForce.Library.NetStandard.Tools.UFArrayTools
  langs:
  - csharp
  - vb
  name: Shuffle<T>(T[])
  nameWithType: UFArrayTools.Shuffle<T>(T[])
  fullName: UltraForce.Library.NetStandard.Tools.UFArrayTools.Shuffle<T>(T[])
  type: Method
  source:
    remote:
      path: UltraForce.Library.NetStandard/Tools/UFArrayTools.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: Shuffle
    path: ../UltraForce.Library.NetStandard/Tools/UFArrayTools.cs
    startLine: 50
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Tools
  summary: Shuffles an array.
  example: []
  syntax:
    content: public static T[] Shuffle<T>(T[] anArray)
    parameters:
    - id: anArray
      type: '{T}[]'
      description: The array to shuffle.
    typeParameters:
    - id: T
      description: Item type.
    return:
      type: '{T}[]'
      description: The value of the anArray parameter
    content.vb: Public Shared Function Shuffle(Of T)(anArray As T()) As T()
  overload: UltraForce.Library.NetStandard.Tools.UFArrayTools.Shuffle*
  nameWithType.vb: UFArrayTools.Shuffle(Of T)(T())
  fullName.vb: UltraForce.Library.NetStandard.Tools.UFArrayTools.Shuffle(Of T)(T())
  name.vb: Shuffle(Of T)(T())
- uid: UltraForce.Library.NetStandard.Tools.UFArrayTools.Swap``1(``0[],System.Int32,System.Int32)
  commentId: M:UltraForce.Library.NetStandard.Tools.UFArrayTools.Swap``1(``0[],System.Int32,System.Int32)
  id: Swap``1(``0[],System.Int32,System.Int32)
  parent: UltraForce.Library.NetStandard.Tools.UFArrayTools
  langs:
  - csharp
  - vb
  name: Swap<T>(T[], int, int)
  nameWithType: UFArrayTools.Swap<T>(T[], int, int)
  fullName: UltraForce.Library.NetStandard.Tools.UFArrayTools.Swap<T>(T[], int, int)
  type: Method
  source:
    remote:
      path: UltraForce.Library.NetStandard/Tools/UFArrayTools.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: Swap
    path: ../UltraForce.Library.NetStandard/Tools/UFArrayTools.cs
    startLine: 77
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Tools
  summary: Swaps two elements in an array.
  example: []
  syntax:
    content: public static T[] Swap<T>(T[] anArray, int anIndex0, int anIndex1)
    parameters:
    - id: anArray
      type: '{T}[]'
      description: An array to update
    - id: anIndex0
      type: System.Int32
      description: First element.
    - id: anIndex1
      type: System.Int32
      description: Second element.
    typeParameters:
    - id: T
      description: Item type.
    return:
      type: '{T}[]'
      description: The value of the anArray parameter
    content.vb: Public Shared Function Swap(Of T)(anArray As T(), anIndex0 As Integer, anIndex1 As Integer) As T()
  overload: UltraForce.Library.NetStandard.Tools.UFArrayTools.Swap*
  nameWithType.vb: UFArrayTools.Swap(Of T)(T(), Integer, Integer)
  fullName.vb: UltraForce.Library.NetStandard.Tools.UFArrayTools.Swap(Of T)(T(), Integer, Integer)
  name.vb: Swap(Of T)(T(), Integer, Integer)
- uid: UltraForce.Library.NetStandard.Tools.UFArrayTools.RandomItem``1(``0[])
  commentId: M:UltraForce.Library.NetStandard.Tools.UFArrayTools.RandomItem``1(``0[])
  id: RandomItem``1(``0[])
  parent: UltraForce.Library.NetStandard.Tools.UFArrayTools
  langs:
  - csharp
  - vb
  name: RandomItem<T>(T[])
  nameWithType: UFArrayTools.RandomItem<T>(T[])
  fullName: UltraForce.Library.NetStandard.Tools.UFArrayTools.RandomItem<T>(T[])
  type: Method
  source:
    remote:
      path: UltraForce.Library.NetStandard/Tools/UFArrayTools.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: RandomItem
    path: ../UltraForce.Library.NetStandard/Tools/UFArrayTools.cs
    startLine: 95
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Tools
  summary: Returns a random item from an array.
  example: []
  syntax:
    content: public static T RandomItem<T>(T[] anArray)
    parameters:
    - id: anArray
      type: '{T}[]'
      description: The array to get a value from.
    typeParameters:
    - id: T
      description: Item type.
    return:
      type: '{T}'
      description: An item from the array.
    content.vb: Public Shared Function RandomItem(Of T)(anArray As T()) As T
  overload: UltraForce.Library.NetStandard.Tools.UFArrayTools.RandomItem*
  nameWithType.vb: UFArrayTools.RandomItem(Of T)(T())
  fullName.vb: UltraForce.Library.NetStandard.Tools.UFArrayTools.RandomItem(Of T)(T())
  name.vb: RandomItem(Of T)(T())
- uid: UltraForce.Library.NetStandard.Tools.UFArrayTools.RandomItem``1(``0[],System.Int32,System.Int32)
  commentId: M:UltraForce.Library.NetStandard.Tools.UFArrayTools.RandomItem``1(``0[],System.Int32,System.Int32)
  id: RandomItem``1(``0[],System.Int32,System.Int32)
  parent: UltraForce.Library.NetStandard.Tools.UFArrayTools
  langs:
  - csharp
  - vb
  name: RandomItem<T>(T[], int, int)
  nameWithType: UFArrayTools.RandomItem<T>(T[], int, int)
  fullName: UltraForce.Library.NetStandard.Tools.UFArrayTools.RandomItem<T>(T[], int, int)
  type: Method
  source:
    remote:
      path: UltraForce.Library.NetStandard/Tools/UFArrayTools.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: RandomItem
    path: ../UltraForce.Library.NetStandard/Tools/UFArrayTools.cs
    startLine: 118
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Tools
  summary: Returns a random item from a part of an array.
  example: []
  syntax:
    content: public static T RandomItem<T>(T[] anArray, int aStart, int aCount)
    parameters:
    - id: anArray
      type: '{T}[]'
      description: The array to get a value from.
    - id: aStart
      type: System.Int32
      description: Start index
    - id: aCount
      type: System.Int32
      description: Number of elements
    typeParameters:
    - id: T
      description: Item type.
    return:
      type: '{T}'
      description: An item from the list.
    content.vb: Public Shared Function RandomItem(Of T)(anArray As T(), aStart As Integer, aCount As Integer) As T
  overload: UltraForce.Library.NetStandard.Tools.UFArrayTools.RandomItem*
  nameWithType.vb: UFArrayTools.RandomItem(Of T)(T(), Integer, Integer)
  fullName.vb: UltraForce.Library.NetStandard.Tools.UFArrayTools.RandomItem(Of T)(T(), Integer, Integer)
  name.vb: RandomItem(Of T)(T(), Integer, Integer)
- uid: UltraForce.Library.NetStandard.Tools.UFArrayTools.Fill``1(``0[])
  commentId: M:UltraForce.Library.NetStandard.Tools.UFArrayTools.Fill``1(``0[])
  id: Fill``1(``0[])
  parent: UltraForce.Library.NetStandard.Tools.UFArrayTools
  langs:
  - csharp
  - vb
  name: Fill<T>(T[])
  nameWithType: UFArrayTools.Fill<T>(T[])
  fullName: UltraForce.Library.NetStandard.Tools.UFArrayTools.Fill<T>(T[])
  type: Method
  source:
    remote:
      path: UltraForce.Library.NetStandard/Tools/UFArrayTools.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: Fill
    path: ../UltraForce.Library.NetStandard/Tools/UFArrayTools.cs
    startLine: 132
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Tools
  summary: Fills an array with new instances of a certain type.
  remarks: Type <code>T</code> must have a parameterless constructor.
  example: []
  syntax:
    content: public static T[] Fill<T>(T[] anArray)
    parameters:
    - id: anArray
      type: '{T}[]'
      description: Array to set items in
    typeParameters:
    - id: T
      description: Type
    return:
      type: '{T}[]'
      description: Value of <code>anArray</code>
    content.vb: Public Shared Function Fill(Of T)(anArray As T()) As T()
  overload: UltraForce.Library.NetStandard.Tools.UFArrayTools.Fill*
  nameWithType.vb: UFArrayTools.Fill(Of T)(T())
  fullName.vb: UltraForce.Library.NetStandard.Tools.UFArrayTools.Fill(Of T)(T())
  name.vb: Fill(Of T)(T())
- uid: UltraForce.Library.NetStandard.Tools.UFArrayTools.Fill``1(``0[],System.Int32,System.Int32)
  commentId: M:UltraForce.Library.NetStandard.Tools.UFArrayTools.Fill``1(``0[],System.Int32,System.Int32)
  id: Fill``1(``0[],System.Int32,System.Int32)
  parent: UltraForce.Library.NetStandard.Tools.UFArrayTools
  langs:
  - csharp
  - vb
  name: Fill<T>(T[], int, int)
  nameWithType: UFArrayTools.Fill<T>(T[], int, int)
  fullName: UltraForce.Library.NetStandard.Tools.UFArrayTools.Fill<T>(T[], int, int)
  type: Method
  source:
    remote:
      path: UltraForce.Library.NetStandard/Tools/UFArrayTools.cs
      branch: master
      repo: https://github.com/JoshaMunnik/UltraForce.Library.NetStandard.git
    id: Fill
    path: ../UltraForce.Library.NetStandard/Tools/UFArrayTools.cs
    startLine: 148
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Tools
  summary: Fills a part of an array with new instances of a certain type.
  remarks: Type <code>T</code> must have a parameterless constructor.
  example: []
  syntax:
    content: public static T[] Fill<T>(T[] anArray, int aStart, int aCount)
    parameters:
    - id: anArray
      type: '{T}[]'
      description: Array to set items in
    - id: aStart
      type: System.Int32
      description: Starting index
    - id: aCount
      type: System.Int32
      description: Number of items
    typeParameters:
    - id: T
      description: Type
    return:
      type: '{T}[]'
      description: Value of <code>anArray</code>
    content.vb: Public Shared Function Fill(Of T)(anArray As T(), aStart As Integer, aCount As Integer) As T()
  overload: UltraForce.Library.NetStandard.Tools.UFArrayTools.Fill*
  nameWithType.vb: UFArrayTools.Fill(Of T)(T(), Integer, Integer)
  fullName.vb: UltraForce.Library.NetStandard.Tools.UFArrayTools.Fill(Of T)(T(), Integer, Integer)
  name.vb: Fill(Of T)(T(), Integer, Integer)
references:
- uid: UltraForce.Library.NetStandard.Tools
  commentId: N:UltraForce.Library.NetStandard.Tools
  href: UltraForce.html
  name: UltraForce.Library.NetStandard.Tools
  nameWithType: UltraForce.Library.NetStandard.Tools
  fullName: UltraForce.Library.NetStandard.Tools
  spec.csharp:
  - uid: UltraForce
    name: UltraForce
    href: UltraForce.html
  - name: .
  - uid: UltraForce.Library
    name: Library
    href: UltraForce.Library.html
  - name: .
  - uid: UltraForce.Library.NetStandard
    name: NetStandard
    href: UltraForce.Library.NetStandard.html
  - name: .
  - uid: UltraForce.Library.NetStandard.Tools
    name: Tools
    href: UltraForce.Library.NetStandard.Tools.html
  spec.vb:
  - uid: UltraForce
    name: UltraForce
    href: UltraForce.html
  - name: .
  - uid: UltraForce.Library
    name: Library
    href: UltraForce.Library.html
  - name: .
  - uid: UltraForce.Library.NetStandard
    name: NetStandard
    href: UltraForce.Library.NetStandard.html
  - name: .
  - uid: UltraForce.Library.NetStandard.Tools
    name: Tools
    href: UltraForce.Library.NetStandard.Tools.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: UltraForce.Library.NetStandard.Tools.UFArrayTools.Shuffle*
  commentId: Overload:UltraForce.Library.NetStandard.Tools.UFArrayTools.Shuffle
  href: UltraForce.Library.NetStandard.Tools.UFArrayTools.html#UltraForce_Library_NetStandard_Tools_UFArrayTools_Shuffle__1___0___
  name: Shuffle
  nameWithType: UFArrayTools.Shuffle
  fullName: UltraForce.Library.NetStandard.Tools.UFArrayTools.Shuffle
- uid: '{T}[]'
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  nameWithType.vb: T()
  fullName.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
  - name: '['
  - name: ']'
  spec.vb:
  - name: T
  - name: (
  - name: )
- uid: UltraForce.Library.NetStandard.Tools.UFArrayTools.Swap*
  commentId: Overload:UltraForce.Library.NetStandard.Tools.UFArrayTools.Swap
  href: UltraForce.Library.NetStandard.Tools.UFArrayTools.html#UltraForce_Library_NetStandard_Tools_UFArrayTools_Swap__1___0___System_Int32_System_Int32_
  name: Swap
  nameWithType: UFArrayTools.Swap
  fullName: UltraForce.Library.NetStandard.Tools.UFArrayTools.Swap
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: UltraForce.Library.NetStandard.Tools.UFArrayTools.RandomItem*
  commentId: Overload:UltraForce.Library.NetStandard.Tools.UFArrayTools.RandomItem
  href: UltraForce.Library.NetStandard.Tools.UFArrayTools.html#UltraForce_Library_NetStandard_Tools_UFArrayTools_RandomItem__1___0___
  name: RandomItem
  nameWithType: UFArrayTools.RandomItem
  fullName: UltraForce.Library.NetStandard.Tools.UFArrayTools.RandomItem
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: UltraForce.Library.NetStandard.Tools.UFArrayTools.Fill*
  commentId: Overload:UltraForce.Library.NetStandard.Tools.UFArrayTools.Fill
  href: UltraForce.Library.NetStandard.Tools.UFArrayTools.html#UltraForce_Library_NetStandard_Tools_UFArrayTools_Fill__1___0___
  name: Fill
  nameWithType: UFArrayTools.Fill
  fullName: UltraForce.Library.NetStandard.Tools.UFArrayTools.Fill
