### YamlMime:ManagedReference
items:
- uid: UltraForce.Library.NetStandard.Controllers.UFBindingController`2
  commentId: T:UltraForce.Library.NetStandard.Controllers.UFBindingController`2
  id: UFBindingController`2
  parent: UltraForce.Library.NetStandard.Controllers
  children:
  - UltraForce.Library.NetStandard.Controllers.UFBindingController`2.#ctor
  - UltraForce.Library.NetStandard.Controllers.UFBindingController`2.AreRelated(`0,`0)
  - UltraForce.Library.NetStandard.Controllers.UFBindingController`2.BindAction(`0,`0,`1)
  - UltraForce.Library.NetStandard.Controllers.UFBindingController`2.BindAction(`0,`1)
  - UltraForce.Library.NetStandard.Controllers.UFBindingController`2.FindAndStartAction(`0)
  - UltraForce.Library.NetStandard.Controllers.UFBindingController`2.Init
  - UltraForce.Library.NetStandard.Controllers.UFBindingController`2.Pause
  - UltraForce.Library.NetStandard.Controllers.UFBindingController`2.Resume
  - UltraForce.Library.NetStandard.Controllers.UFBindingController`2.Start
  - UltraForce.Library.NetStandard.Controllers.UFBindingController`2.StartAction(`0,`1)
  - UltraForce.Library.NetStandard.Controllers.UFBindingController`2.UnbindAction(System.Func{`0,`0,`1,System.Boolean})
  - UltraForce.Library.NetStandard.Controllers.UFBindingController`2.UnbindAction(System.Func{`0,`1,System.Boolean})
  - UltraForce.Library.NetStandard.Controllers.UFBindingController`2.UnbindAction(`0,`0,`1)
  - UltraForce.Library.NetStandard.Controllers.UFBindingController`2.UnbindAction(`0,`1)
  - UltraForce.Library.NetStandard.Controllers.UFBindingController`2.UnbindAll(`0)
  - UltraForce.Library.NetStandard.Controllers.UFBindingController`2.UnbindAll(`0,`0)
  langs:
  - csharp
  - vb
  name: UFBindingController<TElement, TAction>
  nameWithType: UFBindingController<TElement, TAction>
  fullName: UltraForce.Library.NetStandard.Controllers.UFBindingController<TElement, TAction>
  type: Class
  source:
    id: UFBindingController
    path: D:\projects\ultraforce.com\csharp\NuGetPackages\UltraForce.Library.NetStandard\UltraForce.Library.NetStandard\Controllers\UFBindingController.cs
    startLine: 57
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Controllers
  summary: >-
    <xref href="UltraForce.Library.NetStandard.Controllers.UFBindingController%602" data-throw-if-not-resolved="false"></xref> can be used as a base class for controllers that bind some

    type of element to some type of action.

    <p>

    Bindings can be set via <xref href="UltraForce.Library.NetStandard.Controllers.UFBindingController%602.BindAction(%600%2c%601)" data-throw-if-not-resolved="false"></xref> or via

    <xref href="UltraForce.Library.NetStandard.Controllers.UFBindingController%602.BindAction(%600%2c%600%2c%601)" data-throw-if-not-resolved="false"></xref>.

    </p>

    <p>

    Actions for specific element can be search and started via <xref href="UltraForce.Library.NetStandard.Controllers.UFBindingController%602.FindAndStartAction(%600)" data-throw-if-not-resolved="false"></xref>. This method will

    call <xref href="UltraForce.Library.NetStandard.Controllers.UFBindingController%602.StartAction(%600%2c%601)" data-throw-if-not-resolved="false"></xref>, which must be implemented by a subclass.

    </p>

    <p>

    Subclasses can override <xref href="UltraForce.Library.NetStandard.Controllers.UFBindingController%602.AreRelated(%600%2c%600)" data-throw-if-not-resolved="false"></xref> to see if two elements are related (in case an element is

    available at multiple places in the application).

    </p>
  example: []
  syntax:
    content: 'public abstract class UFBindingController<TElement, TAction> where TElement : class where TAction : class'
    typeParameters:
    - id: TElement
      description: Type of element.
    - id: TAction
      description: Type of action to bind to element.
    content.vb: Public MustInherit Class UFBindingController(Of TElement As Class, TAction As Class)
  inheritance:
  - System.Object
  derivedClasses:
  - UltraForce.Library.NetStandard.Controllers.UFActionController`1
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: UFBindingController(Of TElement, TAction)
  fullName.vb: UltraForce.Library.NetStandard.Controllers.UFBindingController(Of TElement, TAction)
  name.vb: UFBindingController(Of TElement, TAction)
- uid: UltraForce.Library.NetStandard.Controllers.UFBindingController`2.#ctor
  commentId: M:UltraForce.Library.NetStandard.Controllers.UFBindingController`2.#ctor
  id: '#ctor'
  parent: UltraForce.Library.NetStandard.Controllers.UFBindingController`2
  langs:
  - csharp
  - vb
  name: UFBindingController()
  nameWithType: UFBindingController<TElement, TAction>.UFBindingController()
  fullName: UltraForce.Library.NetStandard.Controllers.UFBindingController<TElement, TAction>.UFBindingController()
  type: Constructor
  source:
    id: .ctor
    path: D:\projects\ultraforce.com\csharp\NuGetPackages\UltraForce.Library.NetStandard\UltraForce.Library.NetStandard\Controllers\UFBindingController.cs
    startLine: 81
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Controllers
  summary: >-
    Constructs an instance of 

    <xref href="UltraForce.Library.NetStandard.Controllers.UFBindingController%602" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: protected UFBindingController()
    content.vb: Protected Sub New()
  overload: UltraForce.Library.NetStandard.Controllers.UFBindingController`2.#ctor*
  nameWithType.vb: UFBindingController(Of TElement, TAction).New()
  fullName.vb: UltraForce.Library.NetStandard.Controllers.UFBindingController(Of TElement, TAction).New()
  name.vb: New()
- uid: UltraForce.Library.NetStandard.Controllers.UFBindingController`2.Init
  commentId: M:UltraForce.Library.NetStandard.Controllers.UFBindingController`2.Init
  id: Init
  parent: UltraForce.Library.NetStandard.Controllers.UFBindingController`2
  langs:
  - csharp
  - vb
  name: Init()
  nameWithType: UFBindingController<TElement, TAction>.Init()
  fullName: UltraForce.Library.NetStandard.Controllers.UFBindingController<TElement, TAction>.Init()
  type: Method
  source:
    id: Init
    path: D:\projects\ultraforce.com\csharp\NuGetPackages\UltraForce.Library.NetStandard\UltraForce.Library.NetStandard\Controllers\UFBindingController.cs
    startLine: 96
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Controllers
  summary: >-
    Initializes the controller.

    <p>

    The default implementation does nothing.

    </p>
  example: []
  syntax:
    content: public virtual void Init()
    content.vb: Public Overridable Sub Init()
  overload: UltraForce.Library.NetStandard.Controllers.UFBindingController`2.Init*
  nameWithType.vb: UFBindingController(Of TElement, TAction).Init()
  fullName.vb: UltraForce.Library.NetStandard.Controllers.UFBindingController(Of TElement, TAction).Init()
- uid: UltraForce.Library.NetStandard.Controllers.UFBindingController`2.Start
  commentId: M:UltraForce.Library.NetStandard.Controllers.UFBindingController`2.Start
  id: Start
  parent: UltraForce.Library.NetStandard.Controllers.UFBindingController`2
  langs:
  - csharp
  - vb
  name: Start()
  nameWithType: UFBindingController<TElement, TAction>.Start()
  fullName: UltraForce.Library.NetStandard.Controllers.UFBindingController<TElement, TAction>.Start()
  type: Method
  source:
    id: Start
    path: D:\projects\ultraforce.com\csharp\NuGetPackages\UltraForce.Library.NetStandard\UltraForce.Library.NetStandard\Controllers\UFBindingController.cs
    startLine: 106
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Controllers
  summary: >-
    Starts the controller.

    <p>

    The default implementation does nothing.

    </p>
  example: []
  syntax:
    content: public virtual void Start()
    content.vb: Public Overridable Sub Start()
  overload: UltraForce.Library.NetStandard.Controllers.UFBindingController`2.Start*
  nameWithType.vb: UFBindingController(Of TElement, TAction).Start()
  fullName.vb: UltraForce.Library.NetStandard.Controllers.UFBindingController(Of TElement, TAction).Start()
- uid: UltraForce.Library.NetStandard.Controllers.UFBindingController`2.Pause
  commentId: M:UltraForce.Library.NetStandard.Controllers.UFBindingController`2.Pause
  id: Pause
  parent: UltraForce.Library.NetStandard.Controllers.UFBindingController`2
  langs:
  - csharp
  - vb
  name: Pause()
  nameWithType: UFBindingController<TElement, TAction>.Pause()
  fullName: UltraForce.Library.NetStandard.Controllers.UFBindingController<TElement, TAction>.Pause()
  type: Method
  source:
    id: Pause
    path: D:\projects\ultraforce.com\csharp\NuGetPackages\UltraForce.Library.NetStandard\UltraForce.Library.NetStandard\Controllers\UFBindingController.cs
    startLine: 116
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Controllers
  summary: >-
    Pauses the controller. 

    <p>

    The default implementation does nothing.

    </p>
  example: []
  syntax:
    content: public virtual void Pause()
    content.vb: Public Overridable Sub Pause()
  overload: UltraForce.Library.NetStandard.Controllers.UFBindingController`2.Pause*
  nameWithType.vb: UFBindingController(Of TElement, TAction).Pause()
  fullName.vb: UltraForce.Library.NetStandard.Controllers.UFBindingController(Of TElement, TAction).Pause()
- uid: UltraForce.Library.NetStandard.Controllers.UFBindingController`2.Resume
  commentId: M:UltraForce.Library.NetStandard.Controllers.UFBindingController`2.Resume
  id: Resume
  parent: UltraForce.Library.NetStandard.Controllers.UFBindingController`2
  langs:
  - csharp
  - vb
  name: Resume()
  nameWithType: UFBindingController<TElement, TAction>.Resume()
  fullName: UltraForce.Library.NetStandard.Controllers.UFBindingController<TElement, TAction>.Resume()
  type: Method
  source:
    id: Resume
    path: D:\projects\ultraforce.com\csharp\NuGetPackages\UltraForce.Library.NetStandard\UltraForce.Library.NetStandard\Controllers\UFBindingController.cs
    startLine: 126
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Controllers
  summary: >-
    Resumes the controller. 

    <p>

    The default implementation does nothing.

    </p>
  example: []
  syntax:
    content: public virtual void Resume()
    content.vb: Public Overridable Sub [Resume]()
  overload: UltraForce.Library.NetStandard.Controllers.UFBindingController`2.Resume*
  nameWithType.vb: UFBindingController(Of TElement, TAction).Resume()
  fullName.vb: UltraForce.Library.NetStandard.Controllers.UFBindingController(Of TElement, TAction).Resume()
- uid: UltraForce.Library.NetStandard.Controllers.UFBindingController`2.StartAction(`0,`1)
  commentId: M:UltraForce.Library.NetStandard.Controllers.UFBindingController`2.StartAction(`0,`1)
  id: StartAction(`0,`1)
  parent: UltraForce.Library.NetStandard.Controllers.UFBindingController`2
  langs:
  - csharp
  - vb
  name: StartAction(TElement, TAction)
  nameWithType: UFBindingController<TElement, TAction>.StartAction(TElement, TAction)
  fullName: UltraForce.Library.NetStandard.Controllers.UFBindingController<TElement, TAction>.StartAction(TElement, TAction)
  type: Method
  source:
    id: StartAction
    path: D:\projects\ultraforce.com\csharp\NuGetPackages\UltraForce.Library.NetStandard\UltraForce.Library.NetStandard\Controllers\UFBindingController.cs
    startLine: 143
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Controllers
  summary: >-
    Starts an action for the specific element.

    <p>

    This method is called by <xref href="UltraForce.Library.NetStandard.Controllers.UFBindingController%602.FindAndStartAction(%600)" data-throw-if-not-resolved="false"></xref>; subclasses

    must implement this method to do something meaningful.

    </p>
  example: []
  syntax:
    content: protected abstract void StartAction(TElement anElement, TAction anAction)
    parameters:
    - id: anElement
      type: '{TElement}'
      description: Element action is started for
    - id: anAction
      type: '{TAction}'
      description: Action that is started
    content.vb: Protected MustOverride Sub StartAction(anElement As TElement, anAction As TAction)
  overload: UltraForce.Library.NetStandard.Controllers.UFBindingController`2.StartAction*
  nameWithType.vb: UFBindingController(Of TElement, TAction).StartAction(TElement, TAction)
  fullName.vb: UltraForce.Library.NetStandard.Controllers.UFBindingController(Of TElement, TAction).StartAction(TElement, TAction)
- uid: UltraForce.Library.NetStandard.Controllers.UFBindingController`2.BindAction(`0,`1)
  commentId: M:UltraForce.Library.NetStandard.Controllers.UFBindingController`2.BindAction(`0,`1)
  id: BindAction(`0,`1)
  parent: UltraForce.Library.NetStandard.Controllers.UFBindingController`2
  langs:
  - csharp
  - vb
  name: BindAction(TElement, TAction)
  nameWithType: UFBindingController<TElement, TAction>.BindAction(TElement, TAction)
  fullName: UltraForce.Library.NetStandard.Controllers.UFBindingController<TElement, TAction>.BindAction(TElement, TAction)
  type: Method
  source:
    id: BindAction
    path: D:\projects\ultraforce.com\csharp\NuGetPackages\UltraForce.Library.NetStandard\UltraForce.Library.NetStandard\Controllers\UFBindingController.cs
    startLine: 157
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Controllers
  summary: >-
    Binds an action to a specific element.

    <p>

    It is possible to make multiple bindings to the same element.

    </p>
  example: []
  syntax:
    content: protected void BindAction(TElement anElement, TAction anAction)
    parameters:
    - id: anElement
      type: '{TElement}'
      description: Element to bind action to
    - id: anAction
      type: '{TAction}'
      description: Action to bind to element
    content.vb: Protected Sub BindAction(anElement As TElement, anAction As TAction)
  overload: UltraForce.Library.NetStandard.Controllers.UFBindingController`2.BindAction*
  nameWithType.vb: UFBindingController(Of TElement, TAction).BindAction(TElement, TAction)
  fullName.vb: UltraForce.Library.NetStandard.Controllers.UFBindingController(Of TElement, TAction).BindAction(TElement, TAction)
- uid: UltraForce.Library.NetStandard.Controllers.UFBindingController`2.BindAction(`0,`0,`1)
  commentId: M:UltraForce.Library.NetStandard.Controllers.UFBindingController`2.BindAction(`0,`0,`1)
  id: BindAction(`0,`0,`1)
  parent: UltraForce.Library.NetStandard.Controllers.UFBindingController`2
  langs:
  - csharp
  - vb
  name: BindAction(TElement, TElement, TAction)
  nameWithType: UFBindingController<TElement, TAction>.BindAction(TElement, TElement, TAction)
  fullName: UltraForce.Library.NetStandard.Controllers.UFBindingController<TElement, TAction>.BindAction(TElement, TElement, TAction)
  type: Method
  source:
    id: BindAction
    path: D:\projects\ultraforce.com\csharp\NuGetPackages\UltraForce.Library.NetStandard\UltraForce.Library.NetStandard\Controllers\UFBindingController.cs
    startLine: 175
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Controllers
  summary: >-
    Binds an action to a specific element with a specific parent.

    <p>

    This method can be used to distinguish between elements if an element 

    is present at multiple locations.

    </p>

    <p>

    It is possible to make multiple bindings to the same element.

    </p>
  example: []
  syntax:
    content: protected void BindAction(TElement anElement, TElement aParent, TAction anAction)
    parameters:
    - id: anElement
      type: '{TElement}'
      description: Element to bind action to
    - id: aParent
      type: '{TElement}'
      description: Parent in which the element is contained
    - id: anAction
      type: '{TAction}'
      description: Action to bind to element
    content.vb: Protected Sub BindAction(anElement As TElement, aParent As TElement, anAction As TAction)
  overload: UltraForce.Library.NetStandard.Controllers.UFBindingController`2.BindAction*
  nameWithType.vb: UFBindingController(Of TElement, TAction).BindAction(TElement, TElement, TAction)
  fullName.vb: UltraForce.Library.NetStandard.Controllers.UFBindingController(Of TElement, TAction).BindAction(TElement, TElement, TAction)
- uid: UltraForce.Library.NetStandard.Controllers.UFBindingController`2.UnbindAction(System.Func{`0,`1,System.Boolean})
  commentId: M:UltraForce.Library.NetStandard.Controllers.UFBindingController`2.UnbindAction(System.Func{`0,`1,System.Boolean})
  id: UnbindAction(System.Func{`0,`1,System.Boolean})
  parent: UltraForce.Library.NetStandard.Controllers.UFBindingController`2
  langs:
  - csharp
  - vb
  name: UnbindAction(Func<TElement, TAction, bool>)
  nameWithType: UFBindingController<TElement, TAction>.UnbindAction(Func<TElement, TAction, bool>)
  fullName: UltraForce.Library.NetStandard.Controllers.UFBindingController<TElement, TAction>.UnbindAction(System.Func<TElement, TAction, bool>)
  type: Method
  source:
    id: UnbindAction
    path: D:\projects\ultraforce.com\csharp\NuGetPackages\UltraForce.Library.NetStandard\UltraForce.Library.NetStandard\Controllers\UFBindingController.cs
    startLine: 187
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Controllers
  summary: Removes bindings between an element and action using a filter function.
  example: []
  syntax:
    content: protected void UnbindAction(Func<TElement, TAction, bool> aFilter)
    parameters:
    - id: aFilter
      type: System.Func{{TElement},{TAction},System.Boolean}
      description: >-
        Filter function that should return <code>true</code> if the binding should

        be removed.
    content.vb: Protected Sub UnbindAction(aFilter As Func(Of TElement, TAction, Boolean))
  overload: UltraForce.Library.NetStandard.Controllers.UFBindingController`2.UnbindAction*
  nameWithType.vb: UFBindingController(Of TElement, TAction).UnbindAction(Func(Of TElement, TAction, Boolean))
  fullName.vb: UltraForce.Library.NetStandard.Controllers.UFBindingController(Of TElement, TAction).UnbindAction(System.Func(Of TElement, TAction, Boolean))
  name.vb: UnbindAction(Func(Of TElement, TAction, Boolean))
- uid: UltraForce.Library.NetStandard.Controllers.UFBindingController`2.UnbindAction(System.Func{`0,`0,`1,System.Boolean})
  commentId: M:UltraForce.Library.NetStandard.Controllers.UFBindingController`2.UnbindAction(System.Func{`0,`0,`1,System.Boolean})
  id: UnbindAction(System.Func{`0,`0,`1,System.Boolean})
  parent: UltraForce.Library.NetStandard.Controllers.UFBindingController`2
  langs:
  - csharp
  - vb
  name: UnbindAction(Func<TElement, TElement, TAction, bool>)
  nameWithType: UFBindingController<TElement, TAction>.UnbindAction(Func<TElement, TElement, TAction, bool>)
  fullName: UltraForce.Library.NetStandard.Controllers.UFBindingController<TElement, TAction>.UnbindAction(System.Func<TElement, TElement, TAction, bool>)
  type: Method
  source:
    id: UnbindAction
    path: D:\projects\ultraforce.com\csharp\NuGetPackages\UltraForce.Library.NetStandard\UltraForce.Library.NetStandard\Controllers\UFBindingController.cs
    startLine: 206
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Controllers
  summary: Removes bindings between an element and action using a filter function.
  example: []
  syntax:
    content: protected void UnbindAction(Func<TElement, TElement, TAction, bool> aFilter)
    parameters:
    - id: aFilter
      type: System.Func{{TElement},{TElement},{TAction},System.Boolean}
      description: >-
        Filter function that should return <code>true</code> if the binding should

        be removed.
    content.vb: Protected Sub UnbindAction(aFilter As Func(Of TElement, TElement, TAction, Boolean))
  overload: UltraForce.Library.NetStandard.Controllers.UFBindingController`2.UnbindAction*
  nameWithType.vb: UFBindingController(Of TElement, TAction).UnbindAction(Func(Of TElement, TElement, TAction, Boolean))
  fullName.vb: UltraForce.Library.NetStandard.Controllers.UFBindingController(Of TElement, TAction).UnbindAction(System.Func(Of TElement, TElement, TAction, Boolean))
  name.vb: UnbindAction(Func(Of TElement, TElement, TAction, Boolean))
- uid: UltraForce.Library.NetStandard.Controllers.UFBindingController`2.UnbindAction(`0,`1)
  commentId: M:UltraForce.Library.NetStandard.Controllers.UFBindingController`2.UnbindAction(`0,`1)
  id: UnbindAction(`0,`1)
  parent: UltraForce.Library.NetStandard.Controllers.UFBindingController`2
  langs:
  - csharp
  - vb
  name: UnbindAction(TElement, TAction)
  nameWithType: UFBindingController<TElement, TAction>.UnbindAction(TElement, TAction)
  fullName: UltraForce.Library.NetStandard.Controllers.UFBindingController<TElement, TAction>.UnbindAction(TElement, TAction)
  type: Method
  source:
    id: UnbindAction
    path: D:\projects\ultraforce.com\csharp\NuGetPackages\UltraForce.Library.NetStandard\UltraForce.Library.NetStandard\Controllers\UFBindingController.cs
    startLine: 223
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Controllers
  summary: Removes a binding between an element and an action.
  example: []
  syntax:
    content: protected void UnbindAction(TElement anElement, TAction anAction)
    parameters:
    - id: anElement
      type: '{TElement}'
      description: Element to remove binding for
    - id: anAction
      type: '{TAction}'
      description: Action bound to the element
    content.vb: Protected Sub UnbindAction(anElement As TElement, anAction As TAction)
  overload: UltraForce.Library.NetStandard.Controllers.UFBindingController`2.UnbindAction*
  nameWithType.vb: UFBindingController(Of TElement, TAction).UnbindAction(TElement, TAction)
  fullName.vb: UltraForce.Library.NetStandard.Controllers.UFBindingController(Of TElement, TAction).UnbindAction(TElement, TAction)
- uid: UltraForce.Library.NetStandard.Controllers.UFBindingController`2.UnbindAction(`0,`0,`1)
  commentId: M:UltraForce.Library.NetStandard.Controllers.UFBindingController`2.UnbindAction(`0,`0,`1)
  id: UnbindAction(`0,`0,`1)
  parent: UltraForce.Library.NetStandard.Controllers.UFBindingController`2
  langs:
  - csharp
  - vb
  name: UnbindAction(TElement, TElement, TAction)
  nameWithType: UFBindingController<TElement, TAction>.UnbindAction(TElement, TElement, TAction)
  fullName: UltraForce.Library.NetStandard.Controllers.UFBindingController<TElement, TAction>.UnbindAction(TElement, TElement, TAction)
  type: Method
  source:
    id: UnbindAction
    path: D:\projects\ultraforce.com\csharp\NuGetPackages\UltraForce.Library.NetStandard\UltraForce.Library.NetStandard\Controllers\UFBindingController.cs
    startLine: 234
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Controllers
  summary: Removes a binding between an element and an action.
  example: []
  syntax:
    content: protected void UnbindAction(TElement anElement, TElement aParent, TAction anAction)
    parameters:
    - id: anElement
      type: '{TElement}'
      description: Element to remove binding for
    - id: aParent
      type: '{TElement}'
      description: Parent in which the element is contained
    - id: anAction
      type: '{TAction}'
      description: Action bound to the element
    content.vb: Protected Sub UnbindAction(anElement As TElement, aParent As TElement, anAction As TAction)
  overload: UltraForce.Library.NetStandard.Controllers.UFBindingController`2.UnbindAction*
  nameWithType.vb: UFBindingController(Of TElement, TAction).UnbindAction(TElement, TElement, TAction)
  fullName.vb: UltraForce.Library.NetStandard.Controllers.UFBindingController(Of TElement, TAction).UnbindAction(TElement, TElement, TAction)
- uid: UltraForce.Library.NetStandard.Controllers.UFBindingController`2.UnbindAll(`0)
  commentId: M:UltraForce.Library.NetStandard.Controllers.UFBindingController`2.UnbindAll(`0)
  id: UnbindAll(`0)
  parent: UltraForce.Library.NetStandard.Controllers.UFBindingController`2
  langs:
  - csharp
  - vb
  name: UnbindAll(TElement)
  nameWithType: UFBindingController<TElement, TAction>.UnbindAll(TElement)
  fullName: UltraForce.Library.NetStandard.Controllers.UFBindingController<TElement, TAction>.UnbindAll(TElement)
  type: Method
  source:
    id: UnbindAll
    path: D:\projects\ultraforce.com\csharp\NuGetPackages\UltraForce.Library.NetStandard\UltraForce.Library.NetStandard\Controllers\UFBindingController.cs
    startLine: 246
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Controllers
  summary: >-
    Remove all bindings for a specific element (both actions and 

    callbacks).
  example: []
  syntax:
    content: protected void UnbindAll(TElement anElement)
    parameters:
    - id: anElement
      type: '{TElement}'
      description: Element to remove binding for
    content.vb: Protected Sub UnbindAll(anElement As TElement)
  overload: UltraForce.Library.NetStandard.Controllers.UFBindingController`2.UnbindAll*
  nameWithType.vb: UFBindingController(Of TElement, TAction).UnbindAll(TElement)
  fullName.vb: UltraForce.Library.NetStandard.Controllers.UFBindingController(Of TElement, TAction).UnbindAll(TElement)
- uid: UltraForce.Library.NetStandard.Controllers.UFBindingController`2.UnbindAll(`0,`0)
  commentId: M:UltraForce.Library.NetStandard.Controllers.UFBindingController`2.UnbindAll(`0,`0)
  id: UnbindAll(`0,`0)
  parent: UltraForce.Library.NetStandard.Controllers.UFBindingController`2
  langs:
  - csharp
  - vb
  name: UnbindAll(TElement, TElement)
  nameWithType: UFBindingController<TElement, TAction>.UnbindAll(TElement, TElement)
  fullName: UltraForce.Library.NetStandard.Controllers.UFBindingController<TElement, TAction>.UnbindAll(TElement, TElement)
  type: Method
  source:
    id: UnbindAll
    path: D:\projects\ultraforce.com\csharp\NuGetPackages\UltraForce.Library.NetStandard\UltraForce.Library.NetStandard\Controllers\UFBindingController.cs
    startLine: 257
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Controllers
  summary: >-
    Removes all bindings for an element contained within a specific

    parent element.
  example: []
  syntax:
    content: protected void UnbindAll(TElement anElement, TElement aParent)
    parameters:
    - id: anElement
      type: '{TElement}'
      description: Element to remove binding for
    - id: aParent
      type: '{TElement}'
      description: Parent in which the element is contained
    content.vb: Protected Sub UnbindAll(anElement As TElement, aParent As TElement)
  overload: UltraForce.Library.NetStandard.Controllers.UFBindingController`2.UnbindAll*
  nameWithType.vb: UFBindingController(Of TElement, TAction).UnbindAll(TElement, TElement)
  fullName.vb: UltraForce.Library.NetStandard.Controllers.UFBindingController(Of TElement, TAction).UnbindAll(TElement, TElement)
- uid: UltraForce.Library.NetStandard.Controllers.UFBindingController`2.AreRelated(`0,`0)
  commentId: M:UltraForce.Library.NetStandard.Controllers.UFBindingController`2.AreRelated(`0,`0)
  id: AreRelated(`0,`0)
  parent: UltraForce.Library.NetStandard.Controllers.UFBindingController`2
  langs:
  - csharp
  - vb
  name: AreRelated(TElement, TElement)
  nameWithType: UFBindingController<TElement, TAction>.AreRelated(TElement, TElement)
  fullName: UltraForce.Library.NetStandard.Controllers.UFBindingController<TElement, TAction>.AreRelated(TElement, TElement)
  type: Method
  source:
    id: AreRelated
    path: D:\projects\ultraforce.com\csharp\NuGetPackages\UltraForce.Library.NetStandard\UltraForce.Library.NetStandard\Controllers\UFBindingController.cs
    startLine: 275
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Controllers
  summary: >-
    Checks if an element is related to a parent element.

    <p>

    Subclasses must override this method to provider a meaningful implementation. The default implementation always

    returns true.

    </p>
  example: []
  syntax:
    content: protected virtual bool AreRelated(TElement anElement, TElement aParent)
    parameters:
    - id: anElement
      type: '{TElement}'
      description: Child element
    - id: aParent
      type: '{TElement}'
      description: Parent element
    return:
      type: System.Boolean
      description: >-
        <code>true</code> if the child element is contained within the parent 

        element.
    content.vb: Protected Overridable Function AreRelated(anElement As TElement, aParent As TElement) As Boolean
  overload: UltraForce.Library.NetStandard.Controllers.UFBindingController`2.AreRelated*
  nameWithType.vb: UFBindingController(Of TElement, TAction).AreRelated(TElement, TElement)
  fullName.vb: UltraForce.Library.NetStandard.Controllers.UFBindingController(Of TElement, TAction).AreRelated(TElement, TElement)
- uid: UltraForce.Library.NetStandard.Controllers.UFBindingController`2.FindAndStartAction(`0)
  commentId: M:UltraForce.Library.NetStandard.Controllers.UFBindingController`2.FindAndStartAction(`0)
  id: FindAndStartAction(`0)
  parent: UltraForce.Library.NetStandard.Controllers.UFBindingController`2
  langs:
  - csharp
  - vb
  name: FindAndStartAction(TElement)
  nameWithType: UFBindingController<TElement, TAction>.FindAndStartAction(TElement)
  fullName: UltraForce.Library.NetStandard.Controllers.UFBindingController<TElement, TAction>.FindAndStartAction(TElement)
  type: Method
  source:
    id: FindAndStartAction
    path: D:\projects\ultraforce.com\csharp\NuGetPackages\UltraForce.Library.NetStandard\UltraForce.Library.NetStandard\Controllers\UFBindingController.cs
    startLine: 289
  assemblies:
  - UltraForce.Library.NetStandard
  namespace: UltraForce.Library.NetStandard.Controllers
  summary: >-
    Searches for actions for a specific element and calls <xref href="UltraForce.Library.NetStandard.Controllers.UFBindingController%602.StartAction(%600%2c%601)" data-throw-if-not-resolved="false"></xref> for every

    found action.

    <p>

    If a parent element was set with the binding, the method will call <xref href="UltraForce.Library.NetStandard.Controllers.UFBindingController%602.AreRelated(%600%2c%600)" data-throw-if-not-resolved="false"></xref> to check if

    <code>anElement</code> is valid for the binding.

    </p>
  example: []
  syntax:
    content: protected void FindAndStartAction(TElement anElement)
    parameters:
    - id: anElement
      type: '{TElement}'
      description: Element to start action(s) for
    content.vb: Protected Sub FindAndStartAction(anElement As TElement)
  overload: UltraForce.Library.NetStandard.Controllers.UFBindingController`2.FindAndStartAction*
  nameWithType.vb: UFBindingController(Of TElement, TAction).FindAndStartAction(TElement)
  fullName.vb: UltraForce.Library.NetStandard.Controllers.UFBindingController(Of TElement, TAction).FindAndStartAction(TElement)
references:
- uid: UltraForce.Library.NetStandard.Controllers.UFBindingController`2
  commentId: T:UltraForce.Library.NetStandard.Controllers.UFBindingController`2
  href: UltraForce.Library.NetStandard.Controllers.UFBindingController-2.html
  name: UFBindingController<TElement, TAction>
  nameWithType: UFBindingController<TElement, TAction>
  fullName: UltraForce.Library.NetStandard.Controllers.UFBindingController<TElement, TAction>
  nameWithType.vb: UFBindingController(Of TElement, TAction)
  fullName.vb: UltraForce.Library.NetStandard.Controllers.UFBindingController(Of TElement, TAction)
  name.vb: UFBindingController(Of TElement, TAction)
  spec.csharp:
  - uid: UltraForce.Library.NetStandard.Controllers.UFBindingController`2
    name: UFBindingController
    href: UltraForce.Library.NetStandard.Controllers.UFBindingController-2.html
  - name: <
  - name: TElement
  - name: ','
  - name: " "
  - name: TAction
  - name: '>'
  spec.vb:
  - uid: UltraForce.Library.NetStandard.Controllers.UFBindingController`2
    name: UFBindingController
    href: UltraForce.Library.NetStandard.Controllers.UFBindingController-2.html
  - name: (
  - name: Of
  - name: " "
  - name: TElement
  - name: ','
  - name: " "
  - name: TAction
  - name: )
- uid: UltraForce.Library.NetStandard.Controllers.UFBindingController`2.BindAction(`0,`1)
  commentId: M:UltraForce.Library.NetStandard.Controllers.UFBindingController`2.BindAction(`0,`1)
  href: UltraForce.Library.NetStandard.Controllers.UFBindingController-2.html#UltraForce_Library_NetStandard_Controllers_UFBindingController_2_BindAction__0__1_
  name: BindAction(TElement, TAction)
  nameWithType: UFBindingController<TElement, TAction>.BindAction(TElement, TAction)
  fullName: UltraForce.Library.NetStandard.Controllers.UFBindingController<TElement, TAction>.BindAction(TElement, TAction)
  nameWithType.vb: UFBindingController(Of TElement, TAction).BindAction(TElement, TAction)
  fullName.vb: UltraForce.Library.NetStandard.Controllers.UFBindingController(Of TElement, TAction).BindAction(TElement, TAction)
  spec.csharp:
  - uid: UltraForce.Library.NetStandard.Controllers.UFBindingController`2.BindAction(`0,`1)
    name: BindAction
    href: UltraForce.Library.NetStandard.Controllers.UFBindingController-2.html#UltraForce_Library_NetStandard_Controllers_UFBindingController_2_BindAction__0__1_
  - name: (
  - name: TElement
  - name: ','
  - name: " "
  - name: TAction
  - name: )
  spec.vb:
  - uid: UltraForce.Library.NetStandard.Controllers.UFBindingController`2.BindAction(`0,`1)
    name: BindAction
    href: UltraForce.Library.NetStandard.Controllers.UFBindingController-2.html#UltraForce_Library_NetStandard_Controllers_UFBindingController_2_BindAction__0__1_
  - name: (
  - name: TElement
  - name: ','
  - name: " "
  - name: TAction
  - name: )
- uid: UltraForce.Library.NetStandard.Controllers.UFBindingController`2.BindAction(`0,`0,`1)
  commentId: M:UltraForce.Library.NetStandard.Controllers.UFBindingController`2.BindAction(`0,`0,`1)
  href: UltraForce.Library.NetStandard.Controllers.UFBindingController-2.html#UltraForce_Library_NetStandard_Controllers_UFBindingController_2_BindAction__0__0__1_
  name: BindAction(TElement, TElement, TAction)
  nameWithType: UFBindingController<TElement, TAction>.BindAction(TElement, TElement, TAction)
  fullName: UltraForce.Library.NetStandard.Controllers.UFBindingController<TElement, TAction>.BindAction(TElement, TElement, TAction)
  nameWithType.vb: UFBindingController(Of TElement, TAction).BindAction(TElement, TElement, TAction)
  fullName.vb: UltraForce.Library.NetStandard.Controllers.UFBindingController(Of TElement, TAction).BindAction(TElement, TElement, TAction)
  spec.csharp:
  - uid: UltraForce.Library.NetStandard.Controllers.UFBindingController`2.BindAction(`0,`0,`1)
    name: BindAction
    href: UltraForce.Library.NetStandard.Controllers.UFBindingController-2.html#UltraForce_Library_NetStandard_Controllers_UFBindingController_2_BindAction__0__0__1_
  - name: (
  - name: TElement
  - name: ','
  - name: " "
  - name: TElement
  - name: ','
  - name: " "
  - name: TAction
  - name: )
  spec.vb:
  - uid: UltraForce.Library.NetStandard.Controllers.UFBindingController`2.BindAction(`0,`0,`1)
    name: BindAction
    href: UltraForce.Library.NetStandard.Controllers.UFBindingController-2.html#UltraForce_Library_NetStandard_Controllers_UFBindingController_2_BindAction__0__0__1_
  - name: (
  - name: TElement
  - name: ','
  - name: " "
  - name: TElement
  - name: ','
  - name: " "
  - name: TAction
  - name: )
- uid: UltraForce.Library.NetStandard.Controllers.UFBindingController`2.FindAndStartAction(`0)
  commentId: M:UltraForce.Library.NetStandard.Controllers.UFBindingController`2.FindAndStartAction(`0)
  href: UltraForce.Library.NetStandard.Controllers.UFBindingController-2.html#UltraForce_Library_NetStandard_Controllers_UFBindingController_2_FindAndStartAction__0_
  name: FindAndStartAction(TElement)
  nameWithType: UFBindingController<TElement, TAction>.FindAndStartAction(TElement)
  fullName: UltraForce.Library.NetStandard.Controllers.UFBindingController<TElement, TAction>.FindAndStartAction(TElement)
  nameWithType.vb: UFBindingController(Of TElement, TAction).FindAndStartAction(TElement)
  fullName.vb: UltraForce.Library.NetStandard.Controllers.UFBindingController(Of TElement, TAction).FindAndStartAction(TElement)
  spec.csharp:
  - uid: UltraForce.Library.NetStandard.Controllers.UFBindingController`2.FindAndStartAction(`0)
    name: FindAndStartAction
    href: UltraForce.Library.NetStandard.Controllers.UFBindingController-2.html#UltraForce_Library_NetStandard_Controllers_UFBindingController_2_FindAndStartAction__0_
  - name: (
  - name: TElement
  - name: )
  spec.vb:
  - uid: UltraForce.Library.NetStandard.Controllers.UFBindingController`2.FindAndStartAction(`0)
    name: FindAndStartAction
    href: UltraForce.Library.NetStandard.Controllers.UFBindingController-2.html#UltraForce_Library_NetStandard_Controllers_UFBindingController_2_FindAndStartAction__0_
  - name: (
  - name: TElement
  - name: )
- uid: UltraForce.Library.NetStandard.Controllers.UFBindingController`2.StartAction(`0,`1)
  commentId: M:UltraForce.Library.NetStandard.Controllers.UFBindingController`2.StartAction(`0,`1)
  href: UltraForce.Library.NetStandard.Controllers.UFBindingController-2.html#UltraForce_Library_NetStandard_Controllers_UFBindingController_2_StartAction__0__1_
  name: StartAction(TElement, TAction)
  nameWithType: UFBindingController<TElement, TAction>.StartAction(TElement, TAction)
  fullName: UltraForce.Library.NetStandard.Controllers.UFBindingController<TElement, TAction>.StartAction(TElement, TAction)
  nameWithType.vb: UFBindingController(Of TElement, TAction).StartAction(TElement, TAction)
  fullName.vb: UltraForce.Library.NetStandard.Controllers.UFBindingController(Of TElement, TAction).StartAction(TElement, TAction)
  spec.csharp:
  - uid: UltraForce.Library.NetStandard.Controllers.UFBindingController`2.StartAction(`0,`1)
    name: StartAction
    href: UltraForce.Library.NetStandard.Controllers.UFBindingController-2.html#UltraForce_Library_NetStandard_Controllers_UFBindingController_2_StartAction__0__1_
  - name: (
  - name: TElement
  - name: ','
  - name: " "
  - name: TAction
  - name: )
  spec.vb:
  - uid: UltraForce.Library.NetStandard.Controllers.UFBindingController`2.StartAction(`0,`1)
    name: StartAction
    href: UltraForce.Library.NetStandard.Controllers.UFBindingController-2.html#UltraForce_Library_NetStandard_Controllers_UFBindingController_2_StartAction__0__1_
  - name: (
  - name: TElement
  - name: ','
  - name: " "
  - name: TAction
  - name: )
- uid: UltraForce.Library.NetStandard.Controllers.UFBindingController`2.AreRelated(`0,`0)
  commentId: M:UltraForce.Library.NetStandard.Controllers.UFBindingController`2.AreRelated(`0,`0)
  href: UltraForce.Library.NetStandard.Controllers.UFBindingController-2.html#UltraForce_Library_NetStandard_Controllers_UFBindingController_2_AreRelated__0__0_
  name: AreRelated(TElement, TElement)
  nameWithType: UFBindingController<TElement, TAction>.AreRelated(TElement, TElement)
  fullName: UltraForce.Library.NetStandard.Controllers.UFBindingController<TElement, TAction>.AreRelated(TElement, TElement)
  nameWithType.vb: UFBindingController(Of TElement, TAction).AreRelated(TElement, TElement)
  fullName.vb: UltraForce.Library.NetStandard.Controllers.UFBindingController(Of TElement, TAction).AreRelated(TElement, TElement)
  spec.csharp:
  - uid: UltraForce.Library.NetStandard.Controllers.UFBindingController`2.AreRelated(`0,`0)
    name: AreRelated
    href: UltraForce.Library.NetStandard.Controllers.UFBindingController-2.html#UltraForce_Library_NetStandard_Controllers_UFBindingController_2_AreRelated__0__0_
  - name: (
  - name: TElement
  - name: ','
  - name: " "
  - name: TElement
  - name: )
  spec.vb:
  - uid: UltraForce.Library.NetStandard.Controllers.UFBindingController`2.AreRelated(`0,`0)
    name: AreRelated
    href: UltraForce.Library.NetStandard.Controllers.UFBindingController-2.html#UltraForce_Library_NetStandard_Controllers_UFBindingController_2_AreRelated__0__0_
  - name: (
  - name: TElement
  - name: ','
  - name: " "
  - name: TElement
  - name: )
- uid: UltraForce.Library.NetStandard.Controllers
  commentId: N:UltraForce.Library.NetStandard.Controllers
  href: UltraForce.html
  name: UltraForce.Library.NetStandard.Controllers
  nameWithType: UltraForce.Library.NetStandard.Controllers
  fullName: UltraForce.Library.NetStandard.Controllers
  spec.csharp:
  - uid: UltraForce
    name: UltraForce
    href: UltraForce.html
  - name: .
  - uid: UltraForce.Library
    name: Library
    href: UltraForce.Library.html
  - name: .
  - uid: UltraForce.Library.NetStandard
    name: NetStandard
    href: UltraForce.Library.NetStandard.html
  - name: .
  - uid: UltraForce.Library.NetStandard.Controllers
    name: Controllers
    href: UltraForce.Library.NetStandard.Controllers.html
  spec.vb:
  - uid: UltraForce
    name: UltraForce
    href: UltraForce.html
  - name: .
  - uid: UltraForce.Library
    name: Library
    href: UltraForce.Library.html
  - name: .
  - uid: UltraForce.Library.NetStandard
    name: NetStandard
    href: UltraForce.Library.NetStandard.html
  - name: .
  - uid: UltraForce.Library.NetStandard.Controllers
    name: Controllers
    href: UltraForce.Library.NetStandard.Controllers.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: UltraForce.Library.NetStandard.Controllers.UFBindingController`2.#ctor*
  commentId: Overload:UltraForce.Library.NetStandard.Controllers.UFBindingController`2.#ctor
  href: UltraForce.Library.NetStandard.Controllers.UFBindingController-2.html#UltraForce_Library_NetStandard_Controllers_UFBindingController_2__ctor
  name: UFBindingController
  nameWithType: UFBindingController<TElement, TAction>.UFBindingController
  fullName: UltraForce.Library.NetStandard.Controllers.UFBindingController<TElement, TAction>.UFBindingController
  nameWithType.vb: UFBindingController(Of TElement, TAction).New
  fullName.vb: UltraForce.Library.NetStandard.Controllers.UFBindingController(Of TElement, TAction).New
  name.vb: New
- uid: UltraForce.Library.NetStandard.Controllers.UFBindingController`2.Init*
  commentId: Overload:UltraForce.Library.NetStandard.Controllers.UFBindingController`2.Init
  href: UltraForce.Library.NetStandard.Controllers.UFBindingController-2.html#UltraForce_Library_NetStandard_Controllers_UFBindingController_2_Init
  name: Init
  nameWithType: UFBindingController<TElement, TAction>.Init
  fullName: UltraForce.Library.NetStandard.Controllers.UFBindingController<TElement, TAction>.Init
  nameWithType.vb: UFBindingController(Of TElement, TAction).Init
  fullName.vb: UltraForce.Library.NetStandard.Controllers.UFBindingController(Of TElement, TAction).Init
- uid: UltraForce.Library.NetStandard.Controllers.UFBindingController`2.Start*
  commentId: Overload:UltraForce.Library.NetStandard.Controllers.UFBindingController`2.Start
  href: UltraForce.Library.NetStandard.Controllers.UFBindingController-2.html#UltraForce_Library_NetStandard_Controllers_UFBindingController_2_Start
  name: Start
  nameWithType: UFBindingController<TElement, TAction>.Start
  fullName: UltraForce.Library.NetStandard.Controllers.UFBindingController<TElement, TAction>.Start
  nameWithType.vb: UFBindingController(Of TElement, TAction).Start
  fullName.vb: UltraForce.Library.NetStandard.Controllers.UFBindingController(Of TElement, TAction).Start
- uid: UltraForce.Library.NetStandard.Controllers.UFBindingController`2.Pause*
  commentId: Overload:UltraForce.Library.NetStandard.Controllers.UFBindingController`2.Pause
  href: UltraForce.Library.NetStandard.Controllers.UFBindingController-2.html#UltraForce_Library_NetStandard_Controllers_UFBindingController_2_Pause
  name: Pause
  nameWithType: UFBindingController<TElement, TAction>.Pause
  fullName: UltraForce.Library.NetStandard.Controllers.UFBindingController<TElement, TAction>.Pause
  nameWithType.vb: UFBindingController(Of TElement, TAction).Pause
  fullName.vb: UltraForce.Library.NetStandard.Controllers.UFBindingController(Of TElement, TAction).Pause
- uid: UltraForce.Library.NetStandard.Controllers.UFBindingController`2.Resume*
  commentId: Overload:UltraForce.Library.NetStandard.Controllers.UFBindingController`2.Resume
  href: UltraForce.Library.NetStandard.Controllers.UFBindingController-2.html#UltraForce_Library_NetStandard_Controllers_UFBindingController_2_Resume
  name: Resume
  nameWithType: UFBindingController<TElement, TAction>.Resume
  fullName: UltraForce.Library.NetStandard.Controllers.UFBindingController<TElement, TAction>.Resume
  nameWithType.vb: UFBindingController(Of TElement, TAction).Resume
  fullName.vb: UltraForce.Library.NetStandard.Controllers.UFBindingController(Of TElement, TAction).Resume
- uid: UltraForce.Library.NetStandard.Controllers.UFBindingController`2.StartAction*
  commentId: Overload:UltraForce.Library.NetStandard.Controllers.UFBindingController`2.StartAction
  href: UltraForce.Library.NetStandard.Controllers.UFBindingController-2.html#UltraForce_Library_NetStandard_Controllers_UFBindingController_2_StartAction__0__1_
  name: StartAction
  nameWithType: UFBindingController<TElement, TAction>.StartAction
  fullName: UltraForce.Library.NetStandard.Controllers.UFBindingController<TElement, TAction>.StartAction
  nameWithType.vb: UFBindingController(Of TElement, TAction).StartAction
  fullName.vb: UltraForce.Library.NetStandard.Controllers.UFBindingController(Of TElement, TAction).StartAction
- uid: '{TElement}'
  commentId: '!:TElement'
  definition: TElement
  name: TElement
  nameWithType: TElement
  fullName: TElement
- uid: '{TAction}'
  commentId: '!:TAction'
  definition: TAction
  name: TAction
  nameWithType: TAction
  fullName: TAction
- uid: TElement
  name: TElement
  nameWithType: TElement
  fullName: TElement
- uid: TAction
  name: TAction
  nameWithType: TAction
  fullName: TAction
- uid: UltraForce.Library.NetStandard.Controllers.UFBindingController`2.BindAction*
  commentId: Overload:UltraForce.Library.NetStandard.Controllers.UFBindingController`2.BindAction
  href: UltraForce.Library.NetStandard.Controllers.UFBindingController-2.html#UltraForce_Library_NetStandard_Controllers_UFBindingController_2_BindAction__0__1_
  name: BindAction
  nameWithType: UFBindingController<TElement, TAction>.BindAction
  fullName: UltraForce.Library.NetStandard.Controllers.UFBindingController<TElement, TAction>.BindAction
  nameWithType.vb: UFBindingController(Of TElement, TAction).BindAction
  fullName.vb: UltraForce.Library.NetStandard.Controllers.UFBindingController(Of TElement, TAction).BindAction
- uid: UltraForce.Library.NetStandard.Controllers.UFBindingController`2.UnbindAction*
  commentId: Overload:UltraForce.Library.NetStandard.Controllers.UFBindingController`2.UnbindAction
  href: UltraForce.Library.NetStandard.Controllers.UFBindingController-2.html#UltraForce_Library_NetStandard_Controllers_UFBindingController_2_UnbindAction_System_Func__0__1_System_Boolean__
  name: UnbindAction
  nameWithType: UFBindingController<TElement, TAction>.UnbindAction
  fullName: UltraForce.Library.NetStandard.Controllers.UFBindingController<TElement, TAction>.UnbindAction
  nameWithType.vb: UFBindingController(Of TElement, TAction).UnbindAction
  fullName.vb: UltraForce.Library.NetStandard.Controllers.UFBindingController(Of TElement, TAction).UnbindAction
- uid: System.Func{{TElement},{TAction},System.Boolean}
  commentId: T:System.Func{`0,`1,System.Boolean}
  parent: System
  definition: System.Func`3
  href: https://learn.microsoft.com/dotnet/api/system.func-3
  name: Func<TElement, TAction, bool>
  nameWithType: Func<TElement, TAction, bool>
  fullName: System.Func<TElement, TAction, bool>
  nameWithType.vb: Func(Of TElement, TAction, Boolean)
  fullName.vb: System.Func(Of TElement, TAction, Boolean)
  name.vb: Func(Of TElement, TAction, Boolean)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - name: TElement
  - name: ','
  - name: " "
  - name: TAction
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - name: TElement
  - name: ','
  - name: " "
  - name: TAction
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-3
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullName.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Func{{TElement},{TElement},{TAction},System.Boolean}
  commentId: T:System.Func{`0,`0,`1,System.Boolean}
  parent: System
  definition: System.Func`4
  href: https://learn.microsoft.com/dotnet/api/system.func-4
  name: Func<TElement, TElement, TAction, bool>
  nameWithType: Func<TElement, TElement, TAction, bool>
  fullName: System.Func<TElement, TElement, TAction, bool>
  nameWithType.vb: Func(Of TElement, TElement, TAction, Boolean)
  fullName.vb: System.Func(Of TElement, TElement, TAction, Boolean)
  name.vb: Func(Of TElement, TElement, TAction, Boolean)
  spec.csharp:
  - uid: System.Func`4
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-4
  - name: <
  - name: TElement
  - name: ','
  - name: " "
  - name: TElement
  - name: ','
  - name: " "
  - name: TAction
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-4
  - name: (
  - name: Of
  - name: " "
  - name: TElement
  - name: ','
  - name: " "
  - name: TElement
  - name: ','
  - name: " "
  - name: TAction
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: System.Func`4
  commentId: T:System.Func`4
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-4
  name: Func<T1, T2, T3, TResult>
  nameWithType: Func<T1, T2, T3, TResult>
  fullName: System.Func<T1, T2, T3, TResult>
  nameWithType.vb: Func(Of T1, T2, T3, TResult)
  fullName.vb: System.Func(Of T1, T2, T3, TResult)
  name.vb: Func(Of T1, T2, T3, TResult)
  spec.csharp:
  - uid: System.Func`4
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-4
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-4
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: UltraForce.Library.NetStandard.Controllers.UFBindingController`2.UnbindAll*
  commentId: Overload:UltraForce.Library.NetStandard.Controllers.UFBindingController`2.UnbindAll
  href: UltraForce.Library.NetStandard.Controllers.UFBindingController-2.html#UltraForce_Library_NetStandard_Controllers_UFBindingController_2_UnbindAll__0_
  name: UnbindAll
  nameWithType: UFBindingController<TElement, TAction>.UnbindAll
  fullName: UltraForce.Library.NetStandard.Controllers.UFBindingController<TElement, TAction>.UnbindAll
  nameWithType.vb: UFBindingController(Of TElement, TAction).UnbindAll
  fullName.vb: UltraForce.Library.NetStandard.Controllers.UFBindingController(Of TElement, TAction).UnbindAll
- uid: UltraForce.Library.NetStandard.Controllers.UFBindingController`2.AreRelated*
  commentId: Overload:UltraForce.Library.NetStandard.Controllers.UFBindingController`2.AreRelated
  href: UltraForce.Library.NetStandard.Controllers.UFBindingController-2.html#UltraForce_Library_NetStandard_Controllers_UFBindingController_2_AreRelated__0__0_
  name: AreRelated
  nameWithType: UFBindingController<TElement, TAction>.AreRelated
  fullName: UltraForce.Library.NetStandard.Controllers.UFBindingController<TElement, TAction>.AreRelated
  nameWithType.vb: UFBindingController(Of TElement, TAction).AreRelated
  fullName.vb: UltraForce.Library.NetStandard.Controllers.UFBindingController(Of TElement, TAction).AreRelated
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: UltraForce.Library.NetStandard.Controllers.UFBindingController`2.FindAndStartAction*
  commentId: Overload:UltraForce.Library.NetStandard.Controllers.UFBindingController`2.FindAndStartAction
  href: UltraForce.Library.NetStandard.Controllers.UFBindingController-2.html#UltraForce_Library_NetStandard_Controllers_UFBindingController_2_FindAndStartAction__0_
  name: FindAndStartAction
  nameWithType: UFBindingController<TElement, TAction>.FindAndStartAction
  fullName: UltraForce.Library.NetStandard.Controllers.UFBindingController<TElement, TAction>.FindAndStartAction
  nameWithType.vb: UFBindingController(Of TElement, TAction).FindAndStartAction
  fullName.vb: UltraForce.Library.NetStandard.Controllers.UFBindingController(Of TElement, TAction).FindAndStartAction
