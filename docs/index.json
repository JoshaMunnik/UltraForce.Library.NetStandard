{
  "api/UltraForce.Library.NetStandard.Annotations.UFCompareIgnoreAttribute.html": {
    "href": "api/UltraForce.Library.NetStandard.Annotations.UFCompareIgnoreAttribute.html",
    "title": "Class UFCompareIgnoreAttribute | UltraForce.Library.NetStandard",
    "keywords": "Class UFCompareIgnoreAttribute Namespace UltraForce.Library.NetStandard.Annotations Assembly UltraForce.Library.NetStandard.dll This attribute can be used to ignore a property when comparing instances with UFPropertiesComparer<T>. public class UFCompareIgnoreAttribute : Attribute Inheritance object Attribute UFCompareIgnoreAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/UltraForce.Library.NetStandard.Annotations.UFDescriptionAttribute.html": {
    "href": "api/UltraForce.Library.NetStandard.Annotations.UFDescriptionAttribute.html",
    "title": "Class UFDescriptionAttribute | UltraForce.Library.NetStandard",
    "keywords": "Class UFDescriptionAttribute Namespace UltraForce.Library.NetStandard.Annotations Assembly UltraForce.Library.NetStandard.dll Implements a simple description attribute which can be used to add a description to enum fields. Include the UFEnumExtensions to install an extension to access the description. This class has been defined because the System.ComponentModel.DescriptionAttribute is not available to the .NetStandard1 class libraries. [AttributeUsage(AttributeTargets.Field)] public class UFDescriptionAttribute : Attribute Inheritance object Attribute UFDescriptionAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Examples public enum State { [UFDescription(\"Idle state\")] Idle, [UFDescription(\"Busy state\")] Busy } Constructors UFDescriptionAttribute() Constructs an instance of UFDescriptionAttribute public UFDescriptionAttribute() UFDescriptionAttribute(string) Constructs an instance of UFDescriptionAttribute and set Description. public UFDescriptionAttribute(string aDescription) Parameters aDescription string Description to use Properties Description Description value as set by the attribute definition public string Description { get; set; } Property Value string Name Name value as set by the attribute definition public string Name { get; set; } Property Value string ShortDescription Short description value as set by the attribute definition public string ShortDescription { get; set; } Property Value string"
  },
  "api/UltraForce.Library.NetStandard.Annotations.UFIOIgnoreAttribute.html": {
    "href": "api/UltraForce.Library.NetStandard.Annotations.UFIOIgnoreAttribute.html",
    "title": "Class UFIOIgnoreAttribute | UltraForce.Library.NetStandard",
    "keywords": "Class UFIOIgnoreAttribute Namespace UltraForce.Library.NetStandard.Annotations Assembly UltraForce.Library.NetStandard.dll This attribute can be used with a property to ignore it when properties are processed by the IO methods. public class UFIOIgnoreAttribute : Attribute Inheritance object Attribute UFIOIgnoreAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/UltraForce.Library.NetStandard.Annotations.UFIONameAttribute.html": {
    "href": "api/UltraForce.Library.NetStandard.Annotations.UFIONameAttribute.html",
    "title": "Class UFIONameAttribute | UltraForce.Library.NetStandard",
    "keywords": "Class UFIONameAttribute Namespace UltraForce.Library.NetStandard.Annotations Assembly UltraForce.Library.NetStandard.dll This attribute can be used to specify a custom name to be used for certain IO operations. public class UFIONameAttribute : Attribute Inheritance object Attribute UFIONameAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UFIONameAttribute() Initializes a new instance of the UFIONameAttribute class. public UFIONameAttribute() UFIONameAttribute(string) Initializes a new instance of the UFIONameAttribute class. Assign aName to all name properties public UFIONameAttribute(string aName) Parameters aName string A name. Properties IOName Gets or sets the name to use with IO operations. public string IOName { get; set; } Property Value string JsonName Gets or sets the name to use with JSON operations. public string JsonName { get; set; } Property Value string XmlName Gets or sets the name to use with xml operations. public string XmlName { get; set; } Property Value string Methods GetIOName(string) Get the name for IO operations. public string GetIOName(string aDefault) Parameters aDefault string A default value to use. Returns string The IO name or aDefault if IOName is empty or null. GetJSONName(string) Get the name for JSON operations. public string GetJSONName(string aDefault) Parameters aDefault string A default value to use. Returns string The JSON name or aDefault if JSONName is empty or null. GetXmlName(string) Get the name for xml operations. public string GetXmlName(string aDefault) Parameters aDefault string A default value to use. Returns string The xml name or aDefault if XmlName is empty or null."
  },
  "api/UltraForce.Library.NetStandard.Annotations.UFIgnoreAttribute.html": {
    "href": "api/UltraForce.Library.NetStandard.Annotations.UFIgnoreAttribute.html",
    "title": "Class UFIgnoreAttribute | UltraForce.Library.NetStandard",
    "keywords": "Class UFIgnoreAttribute Namespace UltraForce.Library.NetStandard.Annotations Assembly UltraForce.Library.NetStandard.dll This attribute can be used to ignore a method or property. public class UFIgnoreAttribute : Attribute Inheritance object Attribute UFIgnoreAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/UltraForce.Library.NetStandard.Annotations.UFInjectAttribute.html": {
    "href": "api/UltraForce.Library.NetStandard.Annotations.UFInjectAttribute.html",
    "title": "Class UFInjectAttribute | UltraForce.Library.NetStandard",
    "keywords": "Class UFInjectAttribute Namespace UltraForce.Library.NetStandard.Annotations Assembly UltraForce.Library.NetStandard.dll This attribute can be used with methods, properties and fields. With methods the method should be invoked using dependency injection, resolving the parameters from services. With fields and properties a service instance should be assigned to the field or property using the type of the field or property. public class UFInjectAttribute : Attribute Inheritance object Attribute UFInjectAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/UltraForce.Library.NetStandard.Annotations.UFLogAttribute.html": {
    "href": "api/UltraForce.Library.NetStandard.Annotations.UFLogAttribute.html",
    "title": "Class UFLogAttribute | UltraForce.Library.NetStandard",
    "keywords": "Class UFLogAttribute Namespace UltraForce.Library.NetStandard.Annotations Assembly UltraForce.Library.NetStandard.dll This attribute can be used to log property changes within a UFModel subclass. Only when UFDEBUG is defined and UseLog(UFHtmlLog) has been called to set a UFHtmlLog instance. public class UFLogAttribute : Attribute Inheritance object Attribute UFLogAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/UltraForce.Library.NetStandard.Annotations.html": {
    "href": "api/UltraForce.Library.NetStandard.Annotations.html",
    "title": "Namespace UltraForce.Library.NetStandard.Annotations | UltraForce.Library.NetStandard",
    "keywords": "Namespace UltraForce.Library.NetStandard.Annotations Classes UFCompareIgnoreAttribute This attribute can be used to ignore a property when comparing instances with UFPropertiesComparer<T>. UFDescriptionAttribute Implements a simple description attribute which can be used to add a description to enum fields. Include the UFEnumExtensions to install an extension to access the description. This class has been defined because the System.ComponentModel.DescriptionAttribute is not available to the .NetStandard1 class libraries. UFIOIgnoreAttribute This attribute can be used with a property to ignore it when properties are processed by the IO methods. UFIONameAttribute This attribute can be used to specify a custom name to be used for certain IO operations. UFIgnoreAttribute This attribute can be used to ignore a method or property. UFInjectAttribute This attribute can be used with methods, properties and fields. With methods the method should be invoked using dependency injection, resolving the parameters from services. With fields and properties a service instance should be assigned to the field or property using the type of the field or property. UFLogAttribute This attribute can be used to log property changes within a UFModel subclass. Only when UFDEBUG is defined and UseLog(UFHtmlLog) has been called to set a UFHtmlLog instance."
  },
  "api/UltraForce.Library.NetStandard.Controllers.Actions.IUFPausableAction.html": {
    "href": "api/UltraForce.Library.NetStandard.Controllers.Actions.IUFPausableAction.html",
    "title": "Interface IUFPausableAction | UltraForce.Library.NetStandard",
    "keywords": "Interface IUFPausableAction Namespace UltraForce.Library.NetStandard.Controllers.Actions Assembly UltraForce.Library.NetStandard.dll An interface that can be implemented by actions that can be paused and resumed. public interface IUFPausableAction Methods Pause() Pauses the action. void Pause() Resume() Resumes a previously paused action. void Resume()"
  },
  "api/UltraForce.Library.NetStandard.Controllers.Actions.IUFQueueableAction.html": {
    "href": "api/UltraForce.Library.NetStandard.Controllers.Actions.IUFQueueableAction.html",
    "title": "Interface IUFQueueableAction | UltraForce.Library.NetStandard",
    "keywords": "Interface IUFQueueableAction Namespace UltraForce.Library.NetStandard.Controllers.Actions Assembly UltraForce.Library.NetStandard.dll The interface an action must implement so it can be placed in a queue. public interface IUFQueueableAction Methods RunAsync(CancellationToken) Runs the action. Task<bool> RunAsync(CancellationToken aToken) Parameters aToken CancellationToken Cancellation token Returns Task<bool> True if everything ran ok or false otherwise Remarks If action is part of a queue and the method returns false, the queue will stop executing."
  },
  "api/UltraForce.Library.NetStandard.Controllers.Actions.UFActionCollection.html": {
    "href": "api/UltraForce.Library.NetStandard.Controllers.Actions.UFActionCollection.html",
    "title": "Class UFActionCollection | UltraForce.Library.NetStandard",
    "keywords": "Class UFActionCollection Namespace UltraForce.Library.NetStandard.Controllers.Actions Assembly UltraForce.Library.NetStandard.dll UFActionCollection can be used to manage a collection of active actions. It differs from a queue in that actions can be added at later stage and actions can not stop other actions from running in the list. public class UFActionCollection Inheritance object UFActionCollection Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UFActionCollection() Constructs an instance of UFActionCollection public UFActionCollection() Properties Count Number of running actions. public int Count { get; } Property Value int Paused True when the list is paused. public bool Paused { get; } Property Value bool Methods Pause() Pauses the list and all active actions. public void Pause() Resume() Resumes the list and all active actions. Actions that were added via Start(IUFQueueableAction) while the list was paused will be started. public void Resume() Start(IUFQueueableAction) Starts an action and adds it to the internal list. If the list is paused, the action is stored and started once the list is resumed via Resume(). public void Start(IUFQueueableAction anAction) Parameters anAction IUFQueueableAction Action to start Stop() Stops all running actions in the list. The list will be empty after this call. public void Stop()"
  },
  "api/UltraForce.Library.NetStandard.Controllers.Actions.UFCallbackAction.html": {
    "href": "api/UltraForce.Library.NetStandard.Controllers.Actions.UFCallbackAction.html",
    "title": "Class UFCallbackAction | UltraForce.Library.NetStandard",
    "keywords": "Class UFCallbackAction Namespace UltraForce.Library.NetStandard.Controllers.Actions Assembly UltraForce.Library.NetStandard.dll UFCallbackAction is a subclass of UFRunnableAction. It acts as a wrapper for some callback (of type Action). public class UFCallbackAction : UFRunnableAction, IUFQueueableAction Inheritance object UFRunnableAction UFCallbackAction Implements IUFQueueableAction Inherited Members UFRunnableAction.RunAsync() UFRunnableAction.RunAsync(CancellationToken) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UFCallbackAction(Action) Constructs an instance of UFCallbackAction. public UFCallbackAction(Action aCallback) Parameters aCallback Action Callback to call when action is started. Properties Callback The callback that will be called when the action is run. public Action Callback { get; } Property Value Action Methods Run() Runs the action. protected override bool Run() Returns bool A value indicating of the action was successful or not."
  },
  "api/UltraForce.Library.NetStandard.Controllers.Actions.UFClearClearableAction.html": {
    "href": "api/UltraForce.Library.NetStandard.Controllers.Actions.UFClearClearableAction.html",
    "title": "Class UFClearClearableAction | UltraForce.Library.NetStandard",
    "keywords": "Class UFClearClearableAction Namespace UltraForce.Library.NetStandard.Controllers.Actions Assembly UltraForce.Library.NetStandard.dll A simple action that will call Clear(). public class UFClearClearableAction : UFRunnableAction, IUFQueueableAction Inheritance object UFRunnableAction UFClearClearableAction Implements IUFQueueableAction Inherited Members UFRunnableAction.RunAsync() UFRunnableAction.RunAsync(CancellationToken) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UFClearClearableAction(IUFClearable) Constructs an instance of UFClearClearableAction. public UFClearClearableAction(IUFClearable aClearable) Parameters aClearable IUFClearable Clearable that will be cleared. Methods Run() Runs the action. protected override bool Run() Returns bool A value indicating of the action was successful or not."
  },
  "api/UltraForce.Library.NetStandard.Controllers.Actions.UFConditionalAction.html": {
    "href": "api/UltraForce.Library.NetStandard.Controllers.Actions.UFConditionalAction.html",
    "title": "Class UFConditionalAction | UltraForce.Library.NetStandard",
    "keywords": "Class UFConditionalAction Namespace UltraForce.Library.NetStandard.Controllers.Actions Assembly UltraForce.Library.NetStandard.dll UFConditionalAction can be used to run some action only when a certain condition is met. public class UFConditionalAction : UFQueueableAction, IUFWeightedProgress, IUFProgress, IUFQueueableAction Inheritance object UFQueueableAction UFConditionalAction Implements IUFWeightedProgress IUFProgress IUFQueueableAction Inherited Members UFQueueableAction.RunAsync() UFQueueableAction.ProgressWeight UFQueueableAction.Progress object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks The condition can either be a function or another action. This class can be used for example to perform a certain action if another action fails. Constructors UFConditionalAction(Func<bool>) Constructs an instance of UFConditionalAction. The action will return the result from aFunction public UFConditionalAction(Func<bool> aFunction) Parameters aFunction Func<bool> Function that should return a boolean. UFConditionalAction(Func<bool>, bool, IUFQueueableAction, bool) Constructs an instance of UFConditionalAction. public UFConditionalAction(Func<bool> aFunction, bool aTestResult, IUFQueueableAction aSuccessAction, bool anActionResult = true) Parameters aFunction Func<bool> Function that should return a boolean. aTestResult bool Value to compare result of aFunction with aSuccessAction IUFQueueableAction Action to run if aTestResult matches the result from aFunction anActionResult bool Value to return if aConditionalAction is not run. UFConditionalAction(Func<bool>, IUFQueueableAction, bool) Constructs an instance of UFConditionalAction. public UFConditionalAction(Func<bool> aFunction, IUFQueueableAction aSuccessAction, bool anActionResult = true) Parameters aFunction Func<bool> Function that should return a boolean. aSuccessAction IUFQueueableAction Action to run if aFunction returns true. anActionResult bool Value to return if aFunction returns false UFConditionalAction(Func<bool>, IUFQueueableAction, IUFQueueableAction) Constructs an instance of UFConditionalAction. The action will return the result from either the aSuccessAction or aFailureAction. public UFConditionalAction(Func<bool> aFunction, IUFQueueableAction aSuccessAction, IUFQueueableAction aFailureAction) Parameters aFunction Func<bool> Function that should return a boolean. aSuccessAction IUFQueueableAction Action to run if aFunction returns true aFailureAction IUFQueueableAction Action to run if aFunction returns false UFConditionalAction(IUFQueueableAction, bool, IUFQueueableAction, bool) Constructs an instance of UFConditionalAction. public UFConditionalAction(IUFQueueableAction anAction, bool aTestResult, IUFQueueableAction aSuccessAction, bool anActionResult = true) Parameters anAction IUFQueueableAction Action to run and use its result for the test. aTestResult bool Value to compare result of anAction with aSuccessAction IUFQueueableAction Action to run if aTestResult matches the result from anAction anActionResult bool Value to return if aConditionalAction is not run. UFConditionalAction(IUFQueueableAction, IUFQueueableAction, bool) Constructs an instance of UFConditionalAction. public UFConditionalAction(IUFQueueableAction anAction, IUFQueueableAction aSuccessAction, bool anActionResult = true) Parameters anAction IUFQueueableAction Action to run and use its result for the test. aSuccessAction IUFQueueableAction Action to run if aTestResult matches anAction run successfully and returned true. anActionResult bool Value to return if aConditionalAction is not run. UFConditionalAction(IUFQueueableAction, IUFQueueableAction, IUFQueueableAction) Constructs an instance of UFConditionalAction. The action will return the result from either the aSuccessAction or aFailureAction. public UFConditionalAction(IUFQueueableAction anAction, IUFQueueableAction aSuccessAction, IUFQueueableAction aFailureAction) Parameters anAction IUFQueueableAction Action to run and use its result for the test. aSuccessAction IUFQueueableAction Action to run if anAction run successfully and returned true. aFailureAction IUFQueueableAction Action to run if anAction failed and returned false. Methods RunAsync(CancellationToken) Runs the action. First the test result is determines by either executing the function or running the action. If no success action has been set, the method just returns the result. If the result matches the required value, the success action is run and the its result is returned. Else the method checks if a failure action has been set. If there is a failure action it is run and its result is returned. If there is no failure action the default action result is returned. public override Task<bool> RunAsync(CancellationToken aToken) Parameters aToken CancellationToken Cancellation token Returns Task<bool> The result of the test function/action or the result of the success or failure action or the value as passed in the constructor. If aToken indicates a cancellation the method returns false."
  },
  "api/UltraForce.Library.NetStandard.Controllers.Actions.UFDelayAction.html": {
    "href": "api/UltraForce.Library.NetStandard.Controllers.Actions.UFDelayAction.html",
    "title": "Class UFDelayAction | UltraForce.Library.NetStandard",
    "keywords": "Class UFDelayAction Namespace UltraForce.Library.NetStandard.Controllers.Actions Assembly UltraForce.Library.NetStandard.dll UFDelayAction is a subclass of UFQueueableAction. It will wait a certain time. public class UFDelayAction : UFQueueableAction, IUFWeightedProgress, IUFProgress, IUFQueueableAction Inheritance object UFQueueableAction UFDelayAction Implements IUFWeightedProgress IUFProgress IUFQueueableAction Inherited Members UFQueueableAction.RunAsync() UFQueueableAction.ProgressWeight UFQueueableAction.Progress object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UFDelayAction(int) Constructs an instance of UFDelayAction. public UFDelayAction(int aDelay) Parameters aDelay int Delay in milliseconds to wait Properties Delay The delay in milliseconds public int Delay { get; } Property Value int Methods RunAsync(CancellationToken) This method runs the action. public override Task<bool> RunAsync(CancellationToken aToken) Parameters aToken CancellationToken Cancellation token Returns Task<bool> True when successful, false to stop other actions in the queue. Remarks Subclasses must implement this method."
  },
  "api/UltraForce.Library.NetStandard.Controllers.Actions.UFDownloadToFileAction.html": {
    "href": "api/UltraForce.Library.NetStandard.Controllers.Actions.UFDownloadToFileAction.html",
    "title": "Class UFDownloadToFileAction | UltraForce.Library.NetStandard",
    "keywords": "Class UFDownloadToFileAction Namespace UltraForce.Library.NetStandard.Controllers.Actions Assembly UltraForce.Library.NetStandard.dll UFDownloadToFileAction extends UFDownloadToStreamAction and saves the stream to a local file. public class UFDownloadToFileAction : UFDownloadToStreamAction, IUFWeightedProgress, IUFProgress, IUFQueueableAction Inheritance object UFQueueableAction UFHttpAction<Stream> UFDownloadToStreamAction UFDownloadToFileAction Implements IUFWeightedProgress IUFProgress IUFQueueableAction Inherited Members UFDownloadToStreamAction.RunAsync(CancellationToken) UFDownloadToStreamAction.SetOutputStream(Stream) UFDownloadToStreamAction.SendMessageAsync(HttpRequestMessage, CancellationToken) UFHttpAction<Stream>.MaxSendTime UFHttpAction<Stream>.Uri UFHttpAction<Stream>.Progress UFHttpAction<Stream>.ErrorResult UFHttpAction<Stream>.StaticHttpClient UFHttpAction<Stream>.SetProgressAsync(double) UFHttpAction<Stream>.SetRequest(string, HttpContent, HttpMethod) UFHttpAction<Stream>.SetRequest(string, HttpMethod) UFHttpAction<Stream>.SetStringRequest(string, string, Encoding, string, HttpMethod) UFHttpAction<Stream>.SetJsonRequest(string, IUFJsonExport, HttpMethod) UFHttpAction<Stream>.SetJsonRequest(string, IUFJsonExport) UFHttpAction<Stream>.SetRequest(string) UFHttpAction<Stream>.ProcessResponseAsync(Stream) UFHttpAction<Stream>.ProcessErrorAsync(Exception) UFHttpAction<Stream>.ProcessErrorAsync(HttpStatusCode, string) UFHttpAction<Stream>.ProcessTimeoutAsync() UFHttpAction<Stream>.BuildRequestAsync(string, HttpContent, HttpMethod) UFQueueableAction.RunAsync() UFQueueableAction.ProgressWeight object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UFDownloadToFileAction(string) Constructs an instance of UFDownloadToFileAction. The fill will be created when the action is run. public UFDownloadToFileAction(string aFilename) Parameters aFilename string Filename (including path) to download to Methods SetRequestAsync(CancellationToken) This method can be overridden by subclasses. It will be called at the start of the IO action. The default implementation does nothing and just returns CompletedTask. protected override Task SetRequestAsync(CancellationToken aToken) Parameters aToken CancellationToken Cancellation token Returns Task"
  },
  "api/UltraForce.Library.NetStandard.Controllers.Actions.UFDownloadToStreamAction.html": {
    "href": "api/UltraForce.Library.NetStandard.Controllers.Actions.UFDownloadToStreamAction.html",
    "title": "Class UFDownloadToStreamAction | UltraForce.Library.NetStandard",
    "keywords": "Class UFDownloadToStreamAction Namespace UltraForce.Library.NetStandard.Controllers.Actions Assembly UltraForce.Library.NetStandard.dll UFDownloadToStreamAction extends UFHttpAction<TResponse> and downloads the server response to a stream. public class UFDownloadToStreamAction : UFHttpAction<Stream>, IUFWeightedProgress, IUFProgress, IUFQueueableAction Inheritance object UFQueueableAction UFHttpAction<Stream> UFDownloadToStreamAction Implements IUFWeightedProgress IUFProgress IUFQueueableAction Derived UFDownloadToFileAction Inherited Members UFHttpAction<Stream>.MaxSendTime UFHttpAction<Stream>.Uri UFHttpAction<Stream>.Progress UFHttpAction<Stream>.ErrorResult UFHttpAction<Stream>.StaticHttpClient UFHttpAction<Stream>.SetRequestAsync(CancellationToken) UFHttpAction<Stream>.SetProgressAsync(double) UFHttpAction<Stream>.SetRequest(string, HttpContent, HttpMethod) UFHttpAction<Stream>.SetRequest(string, HttpMethod) UFHttpAction<Stream>.SetStringRequest(string, string, Encoding, string, HttpMethod) UFHttpAction<Stream>.SetJsonRequest(string, IUFJsonExport, HttpMethod) UFHttpAction<Stream>.SetJsonRequest(string, IUFJsonExport) UFHttpAction<Stream>.SetRequest(string) UFHttpAction<Stream>.ProcessResponseAsync(Stream) UFHttpAction<Stream>.ProcessErrorAsync(Exception) UFHttpAction<Stream>.ProcessErrorAsync(HttpStatusCode, string) UFHttpAction<Stream>.ProcessTimeoutAsync() UFHttpAction<Stream>.BuildRequestAsync(string, HttpContent, HttpMethod) UFQueueableAction.RunAsync() UFQueueableAction.ProgressWeight object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UFDownloadToStreamAction() Constructs an instance of UFDownloadToStreamAction. Subclasses must call SetOutputStream(Stream) to set the stream. public UFDownloadToStreamAction() UFDownloadToStreamAction(Stream) Constructs an instance of UFDownloadToStreamAction. public UFDownloadToStreamAction(Stream anOutputStream) Parameters anOutputStream Stream Stream to download to Methods RunAsync(CancellationToken) This method runs the action. public override Task<bool> RunAsync(CancellationToken aToken) Parameters aToken CancellationToken Cancellation token Returns Task<bool> True when successful, false to stop other actions in the queue. Remarks Subclasses must implement this method. SendMessageAsync(HttpRequestMessage, CancellationToken) Sends a message to the server and process the response. This is an abstract method and must be implemented by subclasses. protected override Task<UFHttpAction<Stream>.UFServerResponse> SendMessageAsync(HttpRequestMessage aRequest, CancellationToken aToken) Parameters aRequest HttpRequestMessage Request to send aToken CancellationToken Cancellation token Returns Task<UFHttpAction<Stream>.UFServerResponse> The result of sending the message. SetOutputStream(Stream) Sets the output stream to use. protected void SetOutputStream(Stream anOutputStream) Parameters anOutputStream Stream Output stream"
  },
  "api/UltraForce.Library.NetStandard.Controllers.Actions.UFExternalAction.html": {
    "href": "api/UltraForce.Library.NetStandard.Controllers.Actions.UFExternalAction.html",
    "title": "Class UFExternalAction | UltraForce.Library.NetStandard",
    "keywords": "Class UFExternalAction Namespace UltraForce.Library.NetStandard.Controllers.Actions Assembly UltraForce.Library.NetStandard.dll UFExternalAction can be used to implement actions that start something and have to wait for it to finish (for example via a callback). RunAsync(CancellationToken) will call StartAsync(CancellationToken) and then waits until a call is made to Done(bool). public abstract class UFExternalAction : UFQueueableAction, IUFWeightedProgress, IUFProgress, IUFQueueableAction, IUFPausableAction Inheritance object UFQueueableAction UFExternalAction Implements IUFWeightedProgress IUFProgress IUFQueueableAction IUFPausableAction Inherited Members UFQueueableAction.RunAsync() UFQueueableAction.ProgressWeight UFQueueableAction.Progress object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Done(bool) Resumes RunAsync(CancellationToken) (if the action is not paused) returning the value from aResult. protected void Done(bool aResult) Parameters aResult bool Result to return from RunAsync(CancellationToken) Pause() Pauses the action. public void Pause() Resume() Resumes a previously paused action. public void Resume() RunAsync(CancellationToken) This method runs the action. public override Task<bool> RunAsync(CancellationToken aToken) Parameters aToken CancellationToken Cancellation token Returns Task<bool> True when successful, false to stop other actions in the queue. Remarks Subclasses must implement this method. StartAsync(CancellationToken) This method is called by RunAsync(CancellationToken) and must be implemented by subclasses. protected abstract Task StartAsync(CancellationToken aToken) Parameters aToken CancellationToken CancellationToken to cancel the action Returns Task"
  },
  "api/UltraForce.Library.NetStandard.Controllers.Actions.UFHttpAction-1.UFServerResponse.html": {
    "href": "api/UltraForce.Library.NetStandard.Controllers.Actions.UFHttpAction-1.UFServerResponse.html",
    "title": "Class UFHttpAction<TResponse>.UFServerResponse | UltraForce.Library.NetStandard",
    "keywords": "Class UFHttpAction<TResponse>.UFServerResponse Namespace UltraForce.Library.NetStandard.Controllers.Actions Assembly UltraForce.Library.NetStandard.dll Response from server. protected class UFHttpAction<TResponse>.UFServerResponse Inheritance object UFHttpAction<TResponse>.UFServerResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Error If an exception occurred during IO it will be assigned to this property. public Exception? Error { get; set; } Property Value Exception ErrorResponse Response as string when server returned an error public string? ErrorResponse { get; set; } Property Value string ResponseContent Response content or null if there was none public TResponse? ResponseContent { get; set; } Property Value TResponse StatusCode StatusCode returned by server public HttpStatusCode StatusCode { get; set; } Property Value HttpStatusCode"
  },
  "api/UltraForce.Library.NetStandard.Controllers.Actions.UFHttpAction-1.html": {
    "href": "api/UltraForce.Library.NetStandard.Controllers.Actions.UFHttpAction-1.html",
    "title": "Class UFHttpAction<TResponse> | UltraForce.Library.NetStandard",
    "keywords": "Class UFHttpAction<TResponse> Namespace UltraForce.Library.NetStandard.Controllers.Actions Assembly UltraForce.Library.NetStandard.dll UFHttpAction<TResponse> base class for sending and receiving data from a server via HTTP. public abstract class UFHttpAction<TResponse> : UFQueueableAction, IUFWeightedProgress, IUFProgress, IUFQueueableAction where TResponse : class Type Parameters TResponse base class for sending and receiving data from a server via HTTP. Inheritance object UFQueueableAction UFHttpAction<TResponse> Implements IUFWeightedProgress IUFProgress IUFQueueableAction Derived UFDownloadToStreamAction UFSendServerMessageAction Inherited Members UFQueueableAction.RunAsync() UFQueueableAction.ProgressWeight object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks Subclasses must implement to SendMessageAsync(HttpRequestMessage, CancellationToken) to send the data and process the response from the server. Subclasses can call one of the SetXXXXRequest methods either from the constructor or from the SetRequestAsync(CancellationToken) to set the request before the IO starts. There three different types of errors. Subclasses can override ProcessErrorAsync(HttpStatusCode, string), ProcessErrorAsync(Exception) and ProcessTimeoutAsync(). Subclasses can override BuildRequestAsync(string, HttpContent?, HttpMethod) to do additional pre processing. Properties ErrorResult The value to return by RunAsync(CancellationToken) if the communication fails. The default value is false protected bool ErrorResult { get; set; } Property Value bool MaxSendTime MaxSendTime determines the maximum time in milliseconds an IO action make take. The minimum value that can be assigned is 1000. Any lower value is changed to 1000. public static int MaxSendTime { get; set; } Property Value int Progress This property contains the progress of the action. The default implementation just returns 0.0 public override double Progress { get; } Property Value double StaticHttpClient The HttpClient property is a static property and can be used to minimize the number of HttpClient instances. The instance is created the first time the property is accessed. protected static HttpClient StaticHttpClient { get; } Property Value HttpClient Uri Uri being communicated with. public string? Uri { get; } Property Value string Methods BuildRequestAsync(string, HttpContent?, HttpMethod) Builds a request to send to the server. The default implementation just creates the HttpRequestMessage instance. Subclasses can override to perform additional actions (for example setting additional header values). protected virtual Task<HttpRequestMessage> BuildRequestAsync(string anUri, HttpContent? aContent, HttpMethod aMethod) Parameters anUri string Uri to send to aContent HttpContent Content to send (or null if there is none) aMethod HttpMethod Method to use Returns Task<HttpRequestMessage> A HttpRequestMessage to use for the server IO. ProcessErrorAsync(Exception) Processes the exception that occurred while sending the data. protected virtual Task<bool> ProcessErrorAsync(Exception anError) Parameters anError Exception Error to process Returns Task<bool> True to repeat the send action, false to cancel the action and return ErrorResult. Remarks The default implementation just returns false. ProcessErrorAsync(HttpStatusCode, string) Process error statuses from the server (status code >= 300) protected virtual Task<bool> ProcessErrorAsync(HttpStatusCode aStatus, string anErrorResponse) Parameters aStatus HttpStatusCode Status returned by server anErrorResponse string Response if any Returns Task<bool> True to repeat the send action, false to cancel the action and return ErrorResult. Remarks The default implementation just returns false. ProcessResponseAsync(TResponse) Processes the data received from the server. protected virtual Task<bool> ProcessResponseAsync(TResponse aResponse) Parameters aResponse TResponse Response (can be null if there was no data) Returns Task<bool> True if data was processed successfully. This result will be returned as the result of the action. Remarks The default implementation returns true. ProcessTimeoutAsync() Processes timeout error. protected virtual Task<bool> ProcessTimeoutAsync() Returns Task<bool> True to repeat the send action, false to cancel the action and return ErrorResult. Remarks The default implementation just returns false. RunAsync(CancellationToken) This method runs the action. public override Task<bool> RunAsync(CancellationToken aToken) Parameters aToken CancellationToken Cancellation token Returns Task<bool> True when successful, false to stop other actions in the queue. Remarks Subclasses must implement this method. SendMessageAsync(HttpRequestMessage, CancellationToken) Sends a message to the server and process the response. This is an abstract method and must be implemented by subclasses. protected abstract Task<UFHttpAction<TResponse>.UFServerResponse> SendMessageAsync(HttpRequestMessage aRequest, CancellationToken aToken) Parameters aRequest HttpRequestMessage Request to send aToken CancellationToken Cancellation token Returns Task<UFHttpAction<TResponse>.UFServerResponse> The result of sending the message. SetJsonRequest(string, IUFJsonExport) Initialize action to send a json encoded data to the server via the POST method. protected void SetJsonRequest(string anUri, IUFJsonExport aSendData) Parameters anUri string url to server aSendData IUFJsonExport Data to encode as JSON SetJsonRequest(string, IUFJsonExport, HttpMethod) Initialize action to send a json encoded data to the server via a certain method. protected void SetJsonRequest(string anUri, IUFJsonExport aSendData, HttpMethod aMethod) Parameters anUri string url to server aSendData IUFJsonExport Data to encode as JSON aMethod HttpMethod Method to use SetProgressAsync(double) Updates the progress property. The default implementation updates the internal progress value. Subclasses can override to provide additional actions. protected virtual Task SetProgressAsync(double aValue) Parameters aValue double New value (might be outside valid range of 0.0 .. 1.0) Returns Task SetRequest(string) Initialize action to query server via the Get method. protected void SetRequest(string anUri) Parameters anUri string url to server SetRequest(string, HttpContent?, HttpMethod) Initialize action to send a data to the server via a certain method. protected void SetRequest(string anUri, HttpContent? aSendData, HttpMethod aMethod) Parameters anUri string url to server aSendData HttpContent Data to send null to not send any data aMethod HttpMethod Method to use SetRequest(string, HttpMethod) Initialize action to query the server via a certain method. protected void SetRequest(string anUri, HttpMethod aMethod) Parameters anUri string url to server aMethod HttpMethod Method to use SetRequestAsync(CancellationToken) This method can be overridden by subclasses. It will be called at the start of the IO action. The default implementation does nothing and just returns CompletedTask. protected virtual Task SetRequestAsync(CancellationToken aToken) Parameters aToken CancellationToken Cancellation token Returns Task SetStringRequest(string, string, Encoding, string, HttpMethod) Initialize action to send a data to the server via a certain method using a certain encoding and media type. protected void SetStringRequest(string anUri, string aSendData, Encoding anEncoding, string aMediaType, HttpMethod aMethod) Parameters anUri string url to server aSendData string anEncoding Encoding aMediaType string aMethod HttpMethod"
  },
  "api/UltraForce.Library.NetStandard.Controllers.Actions.UFParallelQueueAction.html": {
    "href": "api/UltraForce.Library.NetStandard.Controllers.Actions.UFParallelQueueAction.html",
    "title": "Class UFParallelQueueAction | UltraForce.Library.NetStandard",
    "keywords": "Class UFParallelQueueAction Namespace UltraForce.Library.NetStandard.Controllers.Actions Assembly UltraForce.Library.NetStandard.dll UFParallelQueueAction implements an action queue that can run a number of actions at the same time. It extends UFQueueableAction so the queue can be placed into other queues if needed. public abstract class UFParallelQueueAction : UFQueueableAction, IUFWeightedProgress, IUFProgress, IUFQueueableAction, IUFPausableAction Inheritance object UFQueueableAction UFParallelQueueAction Implements IUFWeightedProgress IUFProgress IUFQueueableAction IUFPausableAction Derived UFSerialQueueAction Inherited Members UFQueueableAction.RunAsync() UFQueueableAction.ProgressWeight object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UFParallelQueueAction(int, params IUFQueueableAction[]) Constructs an instance of UFParallelQueueAction that will run a certain number of actions at the same time. protected UFParallelQueueAction(int aConcurrentCount, params IUFQueueableAction[] anActions) Parameters aConcurrentCount int Maximum number of actions that should run at the same time. anActions IUFQueueableAction[] One or more actions to run UFParallelQueueAction(params IUFQueueableAction[]) Constructs an instance of UFParallelQueueAction that will run all the actions at the same time. protected UFParallelQueueAction(params IUFQueueableAction[] anActions) Parameters anActions IUFQueueableAction[] One or more actions to run Properties Paused Is true while queue is paused. public bool Paused { get; } Property Value bool Progress Gets the progress, include the progress of any running action. public override double Progress { get; } Property Value double Running This property is true so long actions are being start from the queue. public bool Running { get; } Property Value bool RunningCount Gets the number of action still running. public int RunningCount { get; } Property Value int Methods GetRunningActions() Gets all current running actions protected IEnumerable<IUFQueueableAction> GetRunningActions() Returns IEnumerable<IUFQueueableAction> Running actions Pause() Pauses all actions that are still running. public void Pause() Resume() Resume all actions that are still running. public void Resume() RunAsync(CancellationToken) Runs all stored actions at the same time. public override Task<bool> RunAsync(CancellationToken aToken) Parameters aToken CancellationToken Cancellation token Returns Task<bool> True if all actions returned true and there was no cancellation by aToken Remarks If the queue is already running, the method just returns true. Actions are processed from first to last. Actions should never assume a previous action has finished before they are started (unless only one action is allowed to run)."
  },
  "api/UltraForce.Library.NetStandard.Controllers.Actions.UFQueueableAction.html": {
    "href": "api/UltraForce.Library.NetStandard.Controllers.Actions.UFQueueableAction.html",
    "title": "Class UFQueueableAction | UltraForce.Library.NetStandard",
    "keywords": "Class UFQueueableAction Namespace UltraForce.Library.NetStandard.Controllers.Actions Assembly UltraForce.Library.NetStandard.dll This class implements IUFQueueableAction the interface. public abstract class UFQueueableAction : IUFWeightedProgress, IUFProgress, IUFQueueableAction Inheritance object UFQueueableAction Implements IUFWeightedProgress IUFProgress IUFQueueableAction Derived UFConditionalAction UFDelayAction UFExternalAction UFHttpAction<TResponse> UFParallelQueueAction UFWaitForResumeAction Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks The class also implements IUFWeightedProgress so queue classes can calculate an overall progress. Subclasses must implement RunAsync(CancellationToken). Properties Progress This property contains the progress of the action. The default implementation just returns 0.0 public virtual double Progress { get; } Property Value double ProgressWeight This property defines the progress weight. It can be used to adjust the amount of progress change this method has within a containing progress queue. The default implementation return 1.0 public virtual double ProgressWeight { get; } Property Value double Methods RunAsync() Runs the action without a cancellation token. public Task<bool> RunAsync() Returns Task<bool> True if all actions returned true RunAsync(CancellationToken) This method runs the action. public abstract Task<bool> RunAsync(CancellationToken aToken) Parameters aToken CancellationToken Cancellation token Returns Task<bool> True when successful, false to stop other actions in the queue. Remarks Subclasses must implement this method."
  },
  "api/UltraForce.Library.NetStandard.Controllers.Actions.UFRunnableAction.html": {
    "href": "api/UltraForce.Library.NetStandard.Controllers.Actions.UFRunnableAction.html",
    "title": "Class UFRunnableAction | UltraForce.Library.NetStandard",
    "keywords": "Class UFRunnableAction Namespace UltraForce.Library.NetStandard.Controllers.Actions Assembly UltraForce.Library.NetStandard.dll UFRunnableAction implements a simple version of IUFQueueableAction. It can be used by actions which are not stoppable or pausable. public abstract class UFRunnableAction : IUFQueueableAction Inheritance object UFRunnableAction Implements IUFQueueableAction Derived UFCallbackAction UFClearClearableAction Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks Subclasses must implement the Run() method. Methods Run() Runs the action. protected abstract bool Run() Returns bool A value indicating of the action was successful or not. RunAsync() Runs the queue without a cancellation token. public Task<bool> RunAsync() Returns Task<bool> A value indicating of the action was successful or not. RunAsync(CancellationToken) Runs the action. public Task<bool> RunAsync(CancellationToken aToken) Parameters aToken CancellationToken Cancellation token Returns Task<bool> True if everything ran ok or false otherwise Remarks If action is part of a queue and the method returns false, the queue will stop executing."
  },
  "api/UltraForce.Library.NetStandard.Controllers.Actions.UFSendServerMessageAction.html": {
    "href": "api/UltraForce.Library.NetStandard.Controllers.Actions.UFSendServerMessageAction.html",
    "title": "Class UFSendServerMessageAction | UltraForce.Library.NetStandard",
    "keywords": "Class UFSendServerMessageAction Namespace UltraForce.Library.NetStandard.Controllers.Actions Assembly UltraForce.Library.NetStandard.dll UFSendServerMessageAction extends UFHttpAction<TResponse> and assumes the data received from the server will be of type string. public abstract class UFSendServerMessageAction : UFHttpAction<string>, IUFWeightedProgress, IUFProgress, IUFQueueableAction Inheritance object UFQueueableAction UFHttpAction<string> UFSendServerMessageAction Implements IUFWeightedProgress IUFProgress IUFQueueableAction Inherited Members UFHttpAction<string>.RunAsync(CancellationToken) UFHttpAction<string>.MaxSendTime UFHttpAction<string>.Uri UFHttpAction<string>.Progress UFHttpAction<string>.ErrorResult UFHttpAction<string>.StaticHttpClient UFHttpAction<string>.SetRequestAsync(CancellationToken) UFHttpAction<string>.SetProgressAsync(double) UFHttpAction<string>.SetRequest(string, HttpContent, HttpMethod) UFHttpAction<string>.SetRequest(string, HttpMethod) UFHttpAction<string>.SetStringRequest(string, string, Encoding, string, HttpMethod) UFHttpAction<string>.SetJsonRequest(string, IUFJsonExport, HttpMethod) UFHttpAction<string>.SetJsonRequest(string, IUFJsonExport) UFHttpAction<string>.SetRequest(string) UFHttpAction<string>.ProcessResponseAsync(string) UFHttpAction<string>.ProcessErrorAsync(Exception) UFHttpAction<string>.ProcessErrorAsync(HttpStatusCode, string) UFHttpAction<string>.ProcessTimeoutAsync() UFHttpAction<string>.BuildRequestAsync(string, HttpContent, HttpMethod) UFQueueableAction.RunAsync() UFQueueableAction.ProgressWeight object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods SendMessageAsync(HttpRequestMessage, CancellationToken) Sends a message to the server and process the response. This is an abstract method and must be implemented by subclasses. protected override Task<UFHttpAction<string>.UFServerResponse> SendMessageAsync(HttpRequestMessage aRequest, CancellationToken aToken) Parameters aRequest HttpRequestMessage Request to send aToken CancellationToken Cancellation token Returns Task<UFHttpAction<string>.UFServerResponse> The result of sending the message."
  },
  "api/UltraForce.Library.NetStandard.Controllers.Actions.UFSerialQueueAction.html": {
    "href": "api/UltraForce.Library.NetStandard.Controllers.Actions.UFSerialQueueAction.html",
    "title": "Class UFSerialQueueAction | UltraForce.Library.NetStandard",
    "keywords": "Class UFSerialQueueAction Namespace UltraForce.Library.NetStandard.Controllers.Actions Assembly UltraForce.Library.NetStandard.dll UFSerialQueueAction can be used to run one or more actions sequentially. public class UFSerialQueueAction : UFParallelQueueAction, IUFWeightedProgress, IUFProgress, IUFQueueableAction, IUFPausableAction Inheritance object UFQueueableAction UFParallelQueueAction UFSerialQueueAction Implements IUFWeightedProgress IUFProgress IUFQueueableAction IUFPausableAction Inherited Members UFParallelQueueAction.RunAsync(CancellationToken) UFParallelQueueAction.Pause() UFParallelQueueAction.Resume() UFParallelQueueAction.Running UFParallelQueueAction.RunningCount UFParallelQueueAction.Paused UFParallelQueueAction.Progress UFParallelQueueAction.GetRunningActions() UFQueueableAction.RunAsync() UFQueueableAction.ProgressWeight object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks The class is a subclass of UFParallelQueueAction using a concurrent count of 1 (so only one action is ran at the time). Constructors UFSerialQueueAction(params IUFQueueableAction[]) Constructs an instance of UFSerialQueueAction. public UFSerialQueueAction(params IUFQueueableAction[] anActions) Parameters anActions IUFQueueableAction[] Actions to run in sequence Properties CurrentAction The current action that is running or null if no action is running. public IUFQueueableAction? CurrentAction { get; } Property Value IUFQueueableAction"
  },
  "api/UltraForce.Library.NetStandard.Controllers.Actions.UFWaitForResumeAction.html": {
    "href": "api/UltraForce.Library.NetStandard.Controllers.Actions.UFWaitForResumeAction.html",
    "title": "Class UFWaitForResumeAction | UltraForce.Library.NetStandard",
    "keywords": "Class UFWaitForResumeAction Namespace UltraForce.Library.NetStandard.Controllers.Actions Assembly UltraForce.Library.NetStandard.dll UFWaitForResumeAction can be used to implement actions that will pause the action. The class will call Start(), wait for the action to get paused and then wait for the action to get resumed which will finish the action. public abstract class UFWaitForResumeAction : UFQueueableAction, IUFWeightedProgress, IUFProgress, IUFQueueableAction, IUFPausableAction Inheritance object UFQueueableAction UFWaitForResumeAction Implements IUFWeightedProgress IUFProgress IUFQueueableAction IUFPausableAction Inherited Members UFQueueableAction.RunAsync() UFQueueableAction.ProgressWeight UFQueueableAction.Progress object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Pause() Pauses the action. public void Pause() Resume() Resumes a previously paused action. public void Resume() RunAsync(CancellationToken) This method runs the action. public override Task<bool> RunAsync(CancellationToken aToken) Parameters aToken CancellationToken Cancellation token Returns Task<bool> True when successful, false to stop other actions in the queue. Remarks Subclasses must implement this method. Start() This method is called by RunAsync(CancellationToken) and should perform an action that will result in the pausing of this action. protected abstract bool Start() Returns bool True to wait for a pause / resume cycle. Or False to skip and let RunAsync(CancellationToken) return false as well."
  },
  "api/UltraForce.Library.NetStandard.Controllers.Actions.html": {
    "href": "api/UltraForce.Library.NetStandard.Controllers.Actions.html",
    "title": "Namespace UltraForce.Library.NetStandard.Controllers.Actions | UltraForce.Library.NetStandard",
    "keywords": "Namespace UltraForce.Library.NetStandard.Controllers.Actions Classes UFActionCollection UFActionCollection can be used to manage a collection of active actions. It differs from a queue in that actions can be added at later stage and actions can not stop other actions from running in the list. UFCallbackAction UFCallbackAction is a subclass of UFRunnableAction. It acts as a wrapper for some callback (of type Action). UFClearClearableAction A simple action that will call Clear(). UFConditionalAction UFConditionalAction can be used to run some action only when a certain condition is met. UFDelayAction UFDelayAction is a subclass of UFQueueableAction. It will wait a certain time. UFDownloadToFileAction UFDownloadToFileAction extends UFDownloadToStreamAction and saves the stream to a local file. UFDownloadToStreamAction UFDownloadToStreamAction extends UFHttpAction<TResponse> and downloads the server response to a stream. UFExternalAction UFExternalAction can be used to implement actions that start something and have to wait for it to finish (for example via a callback). RunAsync(CancellationToken) will call StartAsync(CancellationToken) and then waits until a call is made to Done(bool). UFHttpAction<TResponse> UFHttpAction<TResponse> base class for sending and receiving data from a server via HTTP. UFHttpAction<TResponse>.UFServerResponse Response from server. UFParallelQueueAction UFParallelQueueAction implements an action queue that can run a number of actions at the same time. It extends UFQueueableAction so the queue can be placed into other queues if needed. UFQueueableAction This class implements IUFQueueableAction the interface. UFRunnableAction UFRunnableAction implements a simple version of IUFQueueableAction. It can be used by actions which are not stoppable or pausable. UFSendServerMessageAction UFSendServerMessageAction extends UFHttpAction<TResponse> and assumes the data received from the server will be of type string. UFSerialQueueAction UFSerialQueueAction can be used to run one or more actions sequentially. UFWaitForResumeAction UFWaitForResumeAction can be used to implement actions that will pause the action. The class will call Start(), wait for the action to get paused and then wait for the action to get resumed which will finish the action. Interfaces IUFPausableAction An interface that can be implemented by actions that can be paused and resumed. IUFQueueableAction The interface an action must implement so it can be placed in a queue."
  },
  "api/UltraForce.Library.NetStandard.Controllers.UFActionController-1.html": {
    "href": "api/UltraForce.Library.NetStandard.Controllers.UFActionController-1.html",
    "title": "Class UFActionController<TElement> | UltraForce.Library.NetStandard",
    "keywords": "Class UFActionController<TElement> Namespace UltraForce.Library.NetStandard.Controllers Assembly UltraForce.Library.NetStandard.dll UFActionController<TElement> can be used as a base class for controllers that bind elements of a certain type to IUFQueueableAction. public class UFActionController<TElement> : UFBindingController<TElement, IUFQueueableAction> where TElement : class Type Parameters TElement Type of element, the class assumes the type supports the Equals(object) method. Inheritance object UFBindingController<TElement, IUFQueueableAction> UFActionController<TElement> Inherited Members UFBindingController<TElement, IUFQueueableAction>.Init() UFBindingController<TElement, IUFQueueableAction>.Start() UFBindingController<TElement, IUFQueueableAction>.Pause() UFBindingController<TElement, IUFQueueableAction>.Resume() UFBindingController<TElement, IUFQueueableAction>.StartAction(TElement, IUFQueueableAction) UFBindingController<TElement, IUFQueueableAction>.BindAction(TElement, IUFQueueableAction) UFBindingController<TElement, IUFQueueableAction>.BindAction(TElement, TElement, IUFQueueableAction) UFBindingController<TElement, IUFQueueableAction>.UnbindAction(Func<TElement, IUFQueueableAction, bool>) UFBindingController<TElement, IUFQueueableAction>.UnbindAction(Func<TElement, TElement, IUFQueueableAction, bool>) UFBindingController<TElement, IUFQueueableAction>.UnbindAction(TElement, IUFQueueableAction) UFBindingController<TElement, IUFQueueableAction>.UnbindAction(TElement, TElement, IUFQueueableAction) UFBindingController<TElement, IUFQueueableAction>.UnbindAll(TElement) UFBindingController<TElement, IUFQueueableAction>.UnbindAll(TElement, TElement) UFBindingController<TElement, IUFQueueableAction>.AreRelated(TElement, TElement) UFBindingController<TElement, IUFQueueableAction>.FindAndStartAction(TElement) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks The class also supports binding to callbacks using UFCallbackAction to encapsulate the callbacks and store the bindings. Actions can also be started directly via StartAction(IUFQueueableAction) or StartActionQueue(params IUFQueueableAction[]) Constructors UFActionController() Constructs an instance of UFActionController<TElement>. public UFActionController() Methods BindAction(TElement, Action) Binds a callback to a specific element. The method will use a UFCallbackAction. It is possible to make multiple bindings to the same element. protected void BindAction(TElement anElement, Action aCallback) Parameters anElement TElement Element to bind action to aCallback Action Callback to bind to element BindAction(TElement, TElement, Action) Binds a callback to a specific element with a specific parent. The method will use a UFCallbackAction. This method can be used to distinguish between elements if an element is present at multiple locations. It is possible to make multiple bindings to the same element. protected void BindAction(TElement anElement, TElement aParent, Action aCallback) Parameters anElement TElement Element to bind action to aParent TElement Parent in which the element is contained aCallback Action Callback to bind to element Pause() Pauses the controller. The implementations tells all running actions to pause themselves via Pause(). public override void Pause() Resume() Resumes the controller. The default implementations tells all running actions to resume themselves via Resume(). public override void Resume() StartAction(IUFQueueableAction) Adds an action to running actions collection and starts it. protected virtual void StartAction(IUFQueueableAction anAction) Parameters anAction IUFQueueableAction Action to start StartAction(TElement, IUFQueueableAction) Starts an action for the specific element. This method is called by FindAndStartAction(TElement); subclasses must implement this method to do something meaningful. protected override void StartAction(TElement anElement, IUFQueueableAction anAction) Parameters anElement TElement Element action is started for anAction IUFQueueableAction Action that is started StartActionQueue(params IUFQueueableAction[]) Helper method to create a UFSerialQueueAction and call StartAction(IUFQueueableAction) protected void StartActionQueue(params IUFQueueableAction[] anActions) Parameters anActions IUFQueueableAction[] Additional actions to run UnbindAction(TElement, Action) Removes a binding between an element and a callback. protected void UnbindAction(TElement anElement, Action aCallback) Parameters anElement TElement Element to remove binding for aCallback Action Callback bound to the element UnbindAction(TElement, TElement, Action) Removes a binding between an element and a callback. protected void UnbindAction(TElement anElement, TElement aParent, Action aCallback) Parameters anElement TElement Element to remove binding for aParent TElement Parent in which the element is contained aCallback Action Callback bound to the element"
  },
  "api/UltraForce.Library.NetStandard.Controllers.UFBindingController-2.html": {
    "href": "api/UltraForce.Library.NetStandard.Controllers.UFBindingController-2.html",
    "title": "Class UFBindingController<TElement, TAction> | UltraForce.Library.NetStandard",
    "keywords": "Class UFBindingController<TElement, TAction> Namespace UltraForce.Library.NetStandard.Controllers Assembly UltraForce.Library.NetStandard.dll UFBindingController<TElement, TAction> can be used as a base class for controllers that bind some type of element to some type of action. Bindings can be set via BindAction(TElement, TAction) or via BindAction(TElement, TElement, TAction). Actions for specific element can be search and started via FindAndStartAction(TElement). This method will call StartAction(TElement, TAction), which must be implemented by a subclass. Subclasses can override AreRelated(TElement, TElement) to see if two elements are related (in case an element is available at multiple places in the application). public abstract class UFBindingController<TElement, TAction> where TElement : class where TAction : class Type Parameters TElement Type of element. TAction Type of action to bind to element. Inheritance object UFBindingController<TElement, TAction> Derived UFActionController<TElement> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UFBindingController() Constructs an instance of UFBindingController<TElement, TAction>. protected UFBindingController() Methods AreRelated(TElement, TElement) Checks if an element is related to a parent element. Subclasses must override this method to provider a meaningful implementation. The default implementation always returns true. protected virtual bool AreRelated(TElement anElement, TElement aParent) Parameters anElement TElement Child element aParent TElement Parent element Returns bool true if the child element is contained within the parent element. BindAction(TElement, TElement, TAction) Binds an action to a specific element with a specific parent. This method can be used to distinguish between elements if an element is present at multiple locations. It is possible to make multiple bindings to the same element. protected void BindAction(TElement anElement, TElement aParent, TAction anAction) Parameters anElement TElement Element to bind action to aParent TElement Parent in which the element is contained anAction TAction Action to bind to element BindAction(TElement, TAction) Binds an action to a specific element. It is possible to make multiple bindings to the same element. protected void BindAction(TElement anElement, TAction anAction) Parameters anElement TElement Element to bind action to anAction TAction Action to bind to element FindAndStartAction(TElement) Searches for actions for a specific element and calls StartAction(TElement, TAction) for every found action. If a parent element was set with the binding, the method will call AreRelated(TElement, TElement) to check if anElement is valid for the binding. protected void FindAndStartAction(TElement anElement) Parameters anElement TElement Element to start action(s) for Init() Initializes the controller. The default implementation does nothing. public virtual void Init() Pause() Pauses the controller. The default implementation does nothing. public virtual void Pause() Resume() Resumes the controller. The default implementation does nothing. public virtual void Resume() Start() Starts the controller. The default implementation does nothing. public virtual void Start() StartAction(TElement, TAction) Starts an action for the specific element. This method is called by FindAndStartAction(TElement); subclasses must implement this method to do something meaningful. protected abstract void StartAction(TElement anElement, TAction anAction) Parameters anElement TElement Element action is started for anAction TAction Action that is started UnbindAction(Func<TElement, TElement, TAction, bool>) Removes bindings between an element and action using a filter function. protected void UnbindAction(Func<TElement, TElement, TAction, bool> aFilter) Parameters aFilter Func<TElement, TElement, TAction, bool> Filter function that should return true if the binding should be removed. UnbindAction(Func<TElement, TAction, bool>) Removes bindings between an element and action using a filter function. protected void UnbindAction(Func<TElement, TAction, bool> aFilter) Parameters aFilter Func<TElement, TAction, bool> Filter function that should return true if the binding should be removed. UnbindAction(TElement, TElement, TAction) Removes a binding between an element and an action. protected void UnbindAction(TElement anElement, TElement aParent, TAction anAction) Parameters anElement TElement Element to remove binding for aParent TElement Parent in which the element is contained anAction TAction Action bound to the element UnbindAction(TElement, TAction) Removes a binding between an element and an action. protected void UnbindAction(TElement anElement, TAction anAction) Parameters anElement TElement Element to remove binding for anAction TAction Action bound to the element UnbindAll(TElement) Remove all bindings for a specific element (both actions and callbacks). protected void UnbindAll(TElement anElement) Parameters anElement TElement Element to remove binding for UnbindAll(TElement, TElement) Removes all bindings for an element contained within a specific parent element. protected void UnbindAll(TElement anElement, TElement aParent) Parameters anElement TElement Element to remove binding for aParent TElement Parent in which the element is contained"
  },
  "api/UltraForce.Library.NetStandard.Controllers.html": {
    "href": "api/UltraForce.Library.NetStandard.Controllers.html",
    "title": "Namespace UltraForce.Library.NetStandard.Controllers | UltraForce.Library.NetStandard",
    "keywords": "Namespace UltraForce.Library.NetStandard.Controllers Classes UFActionController<TElement> UFActionController<TElement> can be used as a base class for controllers that bind elements of a certain type to IUFQueueableAction. UFBindingController<TElement, TAction> UFBindingController<TElement, TAction> can be used as a base class for controllers that bind some type of element to some type of action. Bindings can be set via BindAction(TElement, TAction) or via BindAction(TElement, TElement, TAction). Actions for specific element can be search and started via FindAndStartAction(TElement). This method will call StartAction(TElement, TAction), which must be implemented by a subclass. Subclasses can override AreRelated(TElement, TElement) to see if two elements are related (in case an element is available at multiple places in the application)."
  },
  "api/UltraForce.Library.NetStandard.Data.UFCsvBuilder.html": {
    "href": "api/UltraForce.Library.NetStandard.Data.UFCsvBuilder.html",
    "title": "Class UFCsvBuilder | UltraForce.Library.NetStandard",
    "keywords": "Class UFCsvBuilder Namespace UltraForce.Library.NetStandard.Data Assembly UltraForce.Library.NetStandard.dll A simple class to help create a CSV formatted structure. public class UFCsvBuilder Inheritance object UFCsvBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UFCsvBuilder(string, string) Constructs an instance of UFCsvBuilder. public UFCsvBuilder(string aColumnSeparator = \",\", string aRowSeparator = \"\\r\\n\") Parameters aColumnSeparator string Column separator to use (default = ',') aRowSeparator string Row separator to use (default = '\\r\\n') Properties ColumnSeparator Separator to use for the columns public string ColumnSeparator { get; set; } Property Value string RowSeparator Separator to use for the rows public string RowSeparator { get; set; } Property Value string Methods AddHeaders(params string[]) Adds a list of strings as first row public void AddHeaders(params string[] aList) Parameters aList string[] AddValue(params object[]) Adds one or more values. public void AddValue(params object[] aValue) Parameters aValue object[] Build() Finalize the csv string and return it. public string Build() Returns string CSV formatted data NewRow() Starts a new row. public void NewRow()"
  },
  "api/UltraForce.Library.NetStandard.Data.UFCsvHelper.html": {
    "href": "api/UltraForce.Library.NetStandard.Data.UFCsvHelper.html",
    "title": "Class UFCsvHelper | UltraForce.Library.NetStandard",
    "keywords": "Class UFCsvHelper Namespace UltraForce.Library.NetStandard.Data Assembly UltraForce.Library.NetStandard.dll Parse a CSV formatted text. The code does not trim any text. public class UFCsvHelper Inheritance object UFCsvHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UFCsvHelper() Initializes a new instance of the UFCsvHelper class. public UFCsvHelper() Properties Count Number of records. public int Count { get; } Property Value int FieldEnclose Field enclose text. public char FieldEnclose { get; set; } Property Value char The field enclose value, default \" (double quote) FieldSeparator Field separator text. public char FieldSeparator { get; set; } Property Value char The field separator, default \",\" HasHeader Gets or sets a value indicating whether the first row of the CSV data is a header. This property is only used within the Parse(string); assigning a value after will not change the other properties. public bool HasHeader { get; set; } Property Value bool true (default) if the first row is a header; otherwise, false Header Returns the headers. public List<string>? Header { get; } Property Value List<string> this[int] Gets a record for a certain index using array index. public List<string> this[int anIndex] { get; } Parameters anIndex int An index. Property Value List<string> RecordSeparator Record separator text. public char RecordSeparator { get; set; } Property Value char The record separator, default is \"\\n\" Methods Clear() Removes existing data. After this call, use Parse(string) to fill the instance with new data. public void Clear() GetRecord(int) Gets a record (row). public List<string> GetRecord(int anIndex) Parameters anIndex int record index (first record has index of 0) Returns List<string> The record (a list of strings) Parse(string) Parses a CSV text. After parsing GetRecord(int) can be called and Header contains the header if HasHeader is true. public void Parse(string aText) Parameters aText string A text."
  },
  "api/UltraForce.Library.NetStandard.Data.UFMapToPropertyList-1.html": {
    "href": "api/UltraForce.Library.NetStandard.Data.UFMapToPropertyList-1.html",
    "title": "Class UFMapToPropertyList<TValue> | UltraForce.Library.NetStandard",
    "keywords": "Class UFMapToPropertyList<TValue> Namespace UltraForce.Library.NetStandard.Data Assembly UltraForce.Library.NetStandard.dll This class can be used to create a list that maps to a certain property in a list of objects. If the object implements IUFAccessProperty, the class will use its methods to get and optionally set the property value. Else the class will use reflection to get and set the property value. It is not possible to delete, clear, add or insert items to the list. Trying to do so will throw an exception. public class UFMapToPropertyList<TValue> : IList<TValue>, ICollection<TValue>, IEnumerable<TValue>, IEnumerable where TValue : notnull Type Parameters TValue The type of the property value Inheritance object UFMapToPropertyList<TValue> Implements IList<TValue> ICollection<TValue> IEnumerable<TValue> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UFMapToPropertyList(IEnumerable<object>, string, bool) Constructs an instance of UFMapToPropertyList<TValue> public UFMapToPropertyList(IEnumerable<object> anItems, string aPropertyName, bool aReadOnly = true) Parameters anItems IEnumerable<object> Array of objects, each containing the property with specified name. aPropertyName string Name of property aReadOnly bool When true trying to set a value in the list will throw an exception. UFMapToPropertyList(IList<object>, string, bool) Constructs an instance of UFMapToPropertyList<TValue> public UFMapToPropertyList(IList<object> anItems, string aPropertyName, bool aReadOnly = true) Parameters anItems IList<object> List of objects that contain the property with specified name. aPropertyName string Name of property aReadOnly bool When true trying to set a value in the list will throw an exception. Properties Count Gets the number of elements contained in the ICollection<T>. public int Count { get; } Property Value int The number of elements contained in the ICollection<T>. IsReadOnly Gets a value indicating whether the ICollection<T> is read-only. public bool IsReadOnly { get; } Property Value bool true if the ICollection<T> is read-only; otherwise, false. this[int] Gets or sets the element at the specified index. public TValue this[int index] { get; set; } Parameters index int The zero-based index of the element to get or set. Property Value TValue The element at the specified index. Exceptions ArgumentOutOfRangeException index is not a valid index in the IList<T>. NotSupportedException The property is set and the IList<T> is read-only. Methods Add(TValue) Calling this method will throw an exception, since the list is readonly. public void Add(TValue item) Parameters item TValue Item to add Clear() Calling this method will throw an exception, since the list is readonly. public void Clear() Contains(TValue) Determines whether the ICollection<T> contains a specific value. public bool Contains(TValue item) Parameters item TValue The object to locate in the ICollection<T>. Returns bool true if item is found in the ICollection<T>; otherwise, false. CopyTo(TValue[], int) Copies the elements of the ICollection<T> to an Array, starting at a particular Array index. public void CopyTo(TValue[] array, int arrayIndex) Parameters array TValue[] The one-dimensional Array that is the destination of the elements copied from ICollection<T>. The Array must have zero-based indexing. arrayIndex int The zero-based index in array at which copying begins. Exceptions ArgumentNullException array is null. ArgumentOutOfRangeException arrayIndex is less than 0. ArgumentException The number of elements in the source ICollection<T> is greater than the available space from arrayIndex to the end of the destination array. GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<TValue> GetEnumerator() Returns IEnumerator<TValue> An enumerator that can be used to iterate through the collection. IndexOf(TValue) Determines the index of a specific item in the IList<T>. public int IndexOf(TValue item) Parameters item TValue The object to locate in the IList<T>. Returns int The index of item if found in the list; otherwise, -1. Insert(int, TValue) Inserts an item to the IList<T> at the specified index. public void Insert(int index, TValue item) Parameters index int The zero-based index at which item should be inserted. item TValue The object to insert into the IList<T>. Exceptions ArgumentOutOfRangeException index is not a valid index in the IList<T>. NotSupportedException The IList<T> is read-only. Remove(TValue) Calling this method will throw an exception, since the list is readonly. public bool Remove(TValue item) Parameters item TValue Item to remove Returns bool RemoveAt(int) Removes the IList<T> item at the specified index. public void RemoveAt(int index) Parameters index int The zero-based index of the item to remove. Exceptions ArgumentOutOfRangeException index is not a valid index in the IList<T>. NotSupportedException The IList<T> is read-only."
  },
  "api/UltraForce.Library.NetStandard.Data.UFPropertiesTracker.html": {
    "href": "api/UltraForce.Library.NetStandard.Data.UFPropertiesTracker.html",
    "title": "Class UFPropertiesTracker | UltraForce.Library.NetStandard",
    "keywords": "Class UFPropertiesTracker Namespace UltraForce.Library.NetStandard.Data Assembly UltraForce.Library.NetStandard.dll UFPropertiesTracker can be used to track various properties in an object that implements the IUFNotifyDataChanged and call a delegate whenever one of the property changes. public class UFPropertiesTracker Inheritance object UFPropertiesTracker Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UFPropertiesTracker(Action, params string[]) Initializes a new instance of the UFPropertiesTracker class. Assign value to Data property to start tracking the data. public UFPropertiesTracker(Action aCallback, params string[] aProperties) Parameters aCallback Action A delegate that gets called whenever one of the properties changes. aProperties string[] One or more property names to track; empty or null will track all properties. UFPropertiesTracker(IUFNotifyDataChanged?, Action, params string[]) Initializes a new instance of the UFPropertiesTracker class. public UFPropertiesTracker(IUFNotifyDataChanged? aData, Action aCallback, params string[] aProperties) Parameters aData IUFNotifyDataChanged Object that implements IUFNotifyDataChanged. aCallback Action A delegate that gets called whenever one of the properties changes. aProperties string[] One or more property names to track; empty or null will track all properties. Properties Data The object that implements IUFNotifyDataChanged. When a new value gets assigned, it will clean up and old event handlers before using the new value. public IUFNotifyDataChanged? Data { get; set; } Property Value IUFNotifyDataChanged"
  },
  "api/UltraForce.Library.NetStandard.Data.UFScoreRanking-1.html": {
    "href": "api/UltraForce.Library.NetStandard.Data.UFScoreRanking-1.html",
    "title": "Class UFScoreRanking<TScore> | UltraForce.Library.NetStandard",
    "keywords": "Class UFScoreRanking<TScore> Namespace UltraForce.Library.NetStandard.Data Assembly UltraForce.Library.NetStandard.dll A class to help with the ranking of scores. It handles the case where there are multiple entries with the same score. The scores are ranked from highest to lowest. The ranking starts at 1. // using c# v12 UFScoreRanking<int> ranking = new([300, 200, 100, 200]); // gives 1 int rank = ranking.GetRanking(100); // gives 2 int rank = ranking.GetRanking(200); // gives 4 int rank = ranking.GetRanking(300); public class UFScoreRanking<TScore> where TScore : IComparable<TScore> Type Parameters TScore A type that supports IComparable Inheritance object UFScoreRanking<TScore> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UFScoreRanking() Constructs an empty instance. public UFScoreRanking() UFScoreRanking(IEnumerable<TScore>) Creates an empty instance and then calls AddScores(IEnumerable<TScore>). public UFScoreRanking(IEnumerable<TScore> aScores) Parameters aScores IEnumerable<TScore> Scores to add Methods AddScore(TScore) Adds a new score, this will invalidate the ranking cache. public void AddScore(TScore aScore) Parameters aScore TScore AddScores(IEnumerable<TScore>) Adds multiple score entries. public void AddScores(IEnumerable<TScore> aScores) Parameters aScores IEnumerable<TScore> Scores to add GetRanking(TScore) Gets a ranking for a certain score. public int GetRanking(TScore aScore) Parameters aScore TScore Score to get the ranking for Returns int Ranking or -1 if the score was never added"
  },
  "api/UltraForce.Library.NetStandard.Data.UFWeakReferenceCollection-1.html": {
    "href": "api/UltraForce.Library.NetStandard.Data.UFWeakReferenceCollection-1.html",
    "title": "Class UFWeakReferenceCollection<T> | UltraForce.Library.NetStandard",
    "keywords": "Class UFWeakReferenceCollection<T> Namespace UltraForce.Library.NetStandard.Data Assembly UltraForce.Library.NetStandard.dll This collection can be used to track a collection of objects that might get garbage collected at one point. Use Add(T) or Add(IEnumerable<T>) to add items. If possible an object can call Disposing(T) from its destructor or Dispose() method to clean up dead references. Use GetExistingItems() to get a list of all items that are still existing. The class can also act as a pool of objects, use the Pop() to get an existing item. public class UFWeakReferenceCollection<T> where T : class Type Parameters T Type to track references to Inheritance object UFWeakReferenceCollection<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UFWeakReferenceCollection(int) Constructs an instance of UFWeakReferenceCollection<T>. The threshold indicates after how many Disposing(T) calls the class will clean up the internally managed list by removing all references to objects that are no longer existing. public UFWeakReferenceCollection(int aThreshold = 100) Parameters aThreshold int Clean up threshold Methods Add(IEnumerable<T>) Adds multiple items to the collection. public void Add(IEnumerable<T> anItems) Parameters anItems IEnumerable<T> Items to add Add(T) Adds an item to the collection. public void Add(T anItem) Parameters anItem T Item to add Clear() Clears all referenced items. public void Clear() Contains(T) Checks if the collection already contains a reference to a certain item. public bool Contains(T anItem) Parameters anItem T Item to check Returns bool True if item is in the collection Disposing(T) An object that is part of the collection can call this method from its destructor or Dispose() method. The method will keep track of the number of calls and cleans up dead references once the threshold has been reached. public void Disposing(T anItem) Parameters anItem T Item being disposed GetExistingItems() Gets all items that are still existing. Take note that the items will not be garbage collected until the returned list instance is garbage collected. public List<T> GetExistingItems() Returns List<T> List containing all existing items Pop() Gets and removes an existing item from the end of the list. public T? Pop() Returns T Instance or null if there are no existing items Remove(T) Removes an item from the collection. public void Remove(T anItem) Parameters anItem T Item to remove"
  },
  "api/UltraForce.Library.NetStandard.Data.html": {
    "href": "api/UltraForce.Library.NetStandard.Data.html",
    "title": "Namespace UltraForce.Library.NetStandard.Data | UltraForce.Library.NetStandard",
    "keywords": "Namespace UltraForce.Library.NetStandard.Data Classes UFCsvBuilder A simple class to help create a CSV formatted structure. UFCsvHelper Parse a CSV formatted text. The code does not trim any text. UFMapToPropertyList<TValue> This class can be used to create a list that maps to a certain property in a list of objects. If the object implements IUFAccessProperty, the class will use its methods to get and optionally set the property value. Else the class will use reflection to get and set the property value. It is not possible to delete, clear, add or insert items to the list. Trying to do so will throw an exception. UFPropertiesTracker UFPropertiesTracker can be used to track various properties in an object that implements the IUFNotifyDataChanged and call a delegate whenever one of the property changes. UFScoreRanking<TScore> A class to help with the ranking of scores. It handles the case where there are multiple entries with the same score. The scores are ranked from highest to lowest. The ranking starts at 1. // using c# v12 UFScoreRanking<int> ranking = new([300, 200, 100, 200]); // gives 1 int rank = ranking.GetRanking(100); // gives 2 int rank = ranking.GetRanking(200); // gives 4 int rank = ranking.GetRanking(300); UFWeakReferenceCollection<T> This collection can be used to track a collection of objects that might get garbage collected at one point. Use Add(T) or Add(IEnumerable<T>) to add items. If possible an object can call Disposing(T) from its destructor or Dispose() method to clean up dead references. Use GetExistingItems() to get a list of all items that are still existing. The class can also act as a pool of objects, use the Pop() to get an existing item."
  },
  "api/UltraForce.Library.NetStandard.Delegates.UFWeakReferencedDelegate.html": {
    "href": "api/UltraForce.Library.NetStandard.Delegates.UFWeakReferencedDelegate.html",
    "title": "Class UFWeakReferencedDelegate | UltraForce.Library.NetStandard",
    "keywords": "Class UFWeakReferencedDelegate Namespace UltraForce.Library.NetStandard.Delegates Assembly UltraForce.Library.NetStandard.dll A general purpose implementation of UFWeakReferencedDelegateBase. public class UFWeakReferencedDelegate : UFWeakReferencedDelegateBase Inheritance object UFWeakReferencedDelegateBase UFWeakReferencedDelegate Inherited Members UFWeakReferencedDelegateBase.Equals(object) UFWeakReferencedDelegateBase.GetHashCode() UFWeakReferencedDelegateBase.IsAlive object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UFWeakReferencedDelegate(Delegate) Constructs an instance of UFWeakReferencedDelegate. public UFWeakReferencedDelegate(Delegate aDelegate) Parameters aDelegate Delegate Delegate to store Methods Invoke(params object[]) Invokes the delegate method if the target is still alive. public object? Invoke(params object[] anArguments) Parameters anArguments object[] Arguments to invoke with Returns object Result returned from delegate or null if the target is no longer available."
  },
  "api/UltraForce.Library.NetStandard.Delegates.UFWeakReferencedDelegateBase.html": {
    "href": "api/UltraForce.Library.NetStandard.Delegates.UFWeakReferencedDelegateBase.html",
    "title": "Class UFWeakReferencedDelegateBase | UltraForce.Library.NetStandard",
    "keywords": "Class UFWeakReferencedDelegateBase Namespace UltraForce.Library.NetStandard.Delegates Assembly UltraForce.Library.NetStandard.dll A base class that stores a delegate as a weak reference to its target and the method the delegate invokes. It is an abstract class and should never be instantiated directly. Use UFWeakReferencedDelegate for a general purpose implementation. public abstract class UFWeakReferencedDelegateBase Inheritance object UFWeakReferencedDelegateBase Derived UFWeakReferencedDelegate UFWeakReferencedEventHandler Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UFWeakReferencedDelegateBase(Delegate) Stores a delegate as a weak reference to the target and the method that should be invoked. Trying to use a static delegate will throw an exception. protected UFWeakReferencedDelegateBase(Delegate aDelegate) Parameters aDelegate Delegate Delegate to store Properties IsAlive This read-only property returns true if the target is still available. public bool IsAlive { get; } Property Value bool Methods Equals(object?) Instances are equal if both targets are still available and the targets are equal and the methods are equal. public override bool Equals(object? anObject) Parameters anObject object Object to compare to Returns bool true if object is a UFWeakReferencedDelegateBase and both targets and methods are equal. GetHashCode() Generates an hash code based on the method and stored target. public override int GetHashCode() Returns int Hash code Invoke(params object[]) Invokes the delegate if the target is still alive. protected object? Invoke(params object[] anArguments) Parameters anArguments object[] Arguments to invoke with Returns object Result returned from delegate or null if target is no longer available."
  },
  "api/UltraForce.Library.NetStandard.Delegates.UFWeakReferencedDelegateManagerBase.html": {
    "href": "api/UltraForce.Library.NetStandard.Delegates.UFWeakReferencedDelegateManagerBase.html",
    "title": "Class UFWeakReferencedDelegateManagerBase | UltraForce.Library.NetStandard",
    "keywords": "Class UFWeakReferencedDelegateManagerBase Namespace UltraForce.Library.NetStandard.Delegates Assembly UltraForce.Library.NetStandard.dll UFWeakReferencedDelegateManagerBase is a base class for classes that need to manage a group of weak referenced delegates using a UFWeakReferencedDelegateBase subclass. It is an abstract class and should never be instantiated directly. public abstract class UFWeakReferencedDelegateManagerBase Inheritance object UFWeakReferencedDelegateManagerBase Derived UFWeakReferencedEventManager UFWeakReferencedEventManager<TEventArgs> UFWeakReferencedPropertyChangedManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UFWeakReferencedDelegateManagerBase() Constructs an instance of UFWeakReferencedDelegateManagerBase protected UFWeakReferencedDelegateManagerBase() Methods Add(UFWeakReferencedDelegateBase) Adds a delegate to the managed list. If there is already a delegate with the same method and target stored, nothing happens. The method tries first to replace an entry that has a target that is no longer available before adding it to the end of the list. protected void Add(UFWeakReferencedDelegateBase aDelegate) Parameters aDelegate UFWeakReferencedDelegateBase Delegate to add CleanUp() Removes all entries that have targets that are no longer available. protected void CleanUp() Invoke(params object[]) Invokes the delegates for the targets that are still available. protected void Invoke(params object[] anArguments) Parameters anArguments object[] Remove(UFWeakReferencedDelegateBase) Removes a delegate from the managed list. protected void Remove(UFWeakReferencedDelegateBase aDelegate) Parameters aDelegate UFWeakReferencedDelegateBase Delegate to remove"
  },
  "api/UltraForce.Library.NetStandard.Delegates.html": {
    "href": "api/UltraForce.Library.NetStandard.Delegates.html",
    "title": "Namespace UltraForce.Library.NetStandard.Delegates | UltraForce.Library.NetStandard",
    "keywords": "Namespace UltraForce.Library.NetStandard.Delegates Classes UFWeakReferencedDelegate A general purpose implementation of UFWeakReferencedDelegateBase. UFWeakReferencedDelegateBase A base class that stores a delegate as a weak reference to its target and the method the delegate invokes. It is an abstract class and should never be instantiated directly. Use UFWeakReferencedDelegate for a general purpose implementation. UFWeakReferencedDelegateManagerBase UFWeakReferencedDelegateManagerBase is a base class for classes that need to manage a group of weak referenced delegates using a UFWeakReferencedDelegateBase subclass. It is an abstract class and should never be instantiated directly."
  },
  "api/UltraForce.Library.NetStandard.Development.UFHtmlLog.html": {
    "href": "api/UltraForce.Library.NetStandard.Development.UFHtmlLog.html",
    "title": "Class UFHtmlLog | UltraForce.Library.NetStandard",
    "keywords": "Class UFHtmlLog Namespace UltraForce.Library.NetStandard.Development Assembly UltraForce.Library.NetStandard.dll UFHtmlLog implements a log using HTML formatting for every entry. New messages get added to log and are output to the general debugger log via WriteLine(string). This class only has functionality if UFDEBUG has been defined else the methods will do nothing. public class UFHtmlLog Inheritance object UFHtmlLog Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UFHtmlLog() Constructs instance of UFHtmlLog using WriteLine(object) to output log lines to. public UFHtmlLog() UFHtmlLog(Action<string>) Constructs an instance of UFHtmlLog public UFHtmlLog(Action<string> anOutputLine) Parameters anOutputLine Action<string> Action that is called to output log lines to Properties HtmlLog Returns the current html formatted log. public string HtmlLog { get; } Property Value string PlainLog Returns the current log without html formatting. public string PlainLog { get; } Property Value string Methods Add(object, string, params object[]) Adds an entry to log. [Conditional(\"UFDEBUG\")] public void Add(object anObject, string aMessage, params object[] anArguments) Parameters anObject object Object which type name will be used as tag aMessage string Log entry to add anArguments object[] Formatting arguments Add(string, string, params object[]) Adds an entry to log. [Conditional(\"UFDEBUG\")] public void Add(string aTag, string aMessage, params object[] anArguments) Parameters aTag string Tag to use aMessage string Log entry to add anArguments object[] Formatting arguments Clear() Clears the log. [Conditional(\"UFDEBUG\")] public void Clear() Error(object, Exception) Adds an error entry for an exception. [Conditional(\"UFDEBUG\")] public void Error(object anObject, Exception anError) Parameters anObject object Tag to use anError Exception Error to add Error(object, Exception, string, params object[]) Adds an error entry for an exception. Object which type name will be used as tag Error to add Log entry to add Formatting arguments [Conditional(\"UFDEBUG\")] public void Error(object anObject, Exception anError, string aMessage, params object[] anArguments) Parameters anObject object anError Exception aMessage string anArguments object[] Error(object, string, params object[]) Adds an error entry to the log. [Conditional(\"UFDEBUG\")] public void Error(object anObject, string aMessage, params object[] anArguments) Parameters anObject object Object which type name will be used as tag aMessage string Log entry to add anArguments object[] Formatting arguments Error(string, Exception) Adds an error entry for an exception. [Conditional(\"UFDEBUG\")] public void Error(string aTag, Exception anError) Parameters aTag string Tag to use anError Exception Error to add Error(string, Exception, string, params object[]) Adds an error entry for an exception. Tag to use Error to add Log entry to add Formatting arguments [Conditional(\"UFDEBUG\")] public void Error(string aTag, Exception anError, string aMessage, params object[] anArguments) Parameters aTag string anError Exception aMessage string anArguments object[] Error(string, string, params object[]) Adds an error entry to the log. [Conditional(\"UFDEBUG\")] public void Error(string aTag, string aMessage, params object[] anArguments) Parameters aTag string Tag to use aMessage string Log entry to add anArguments object[] Formatting arguments Events Changed Changed events are invoked whenever the log changes. public event EventHandler? Changed Event Type EventHandler"
  },
  "api/UltraForce.Library.NetStandard.Development.UFTextFileLog.html": {
    "href": "api/UltraForce.Library.NetStandard.Development.UFTextFileLog.html",
    "title": "Class UFTextFileLog | UltraForce.Library.NetStandard",
    "keywords": "Class UFTextFileLog Namespace UltraForce.Library.NetStandard.Development Assembly UltraForce.Library.NetStandard.dll UFTextFileLog implements a log that is written to a text file. New messages get added to the end of the log file. The messages are prefixed with a time stamp. The class will create a a new log file when the day changes. The log filename includes a date. If UFDEBUG is defined, the log messages are also outputted to the general debugger log via WriteLine(string). public class UFTextFileLog Inheritance object UFTextFileLog Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UFTextFileLog(string, string, string) Constructs an instance of UFTextFileLog public UFTextFileLog(string aPath, string aFileName, string aFileExtension = \"log\") Parameters aPath string Path to create log files in aFileName string Filename for log file (without extension) aFileExtension string File extension to use (without '.') Methods AddAsync(object, string, params object[]) Adds an entry to log. public Task AddAsync(object anObject, string aMessage, params object[] anArguments) Parameters anObject object Object which type name will be used as tag aMessage string Log entry to add anArguments object[] Formatting arguments Returns Task AddAsync(string, string, params object[]) Adds an entry to log. public Task AddAsync(string aTag, string aMessage, params object[] anArguments) Parameters aTag string Tag to use aMessage string Log entry to add anArguments object[] Formatting arguments Returns Task ErrorAsync(object, Exception) Adds an error entry for an exception. public Task ErrorAsync(object anObject, Exception anError) Parameters anObject object Tag to use anError Exception Error to add Returns Task ErrorAsync(object, Exception, string, params object[]) Adds an error entry for an exception. Object which type name will be used as tag Error to add Log entry to add Formatting arguments public Task ErrorAsync(object anObject, Exception anError, string aMessage, params object[] anArguments) Parameters anObject object anError Exception aMessage string anArguments object[] Returns Task ErrorAsync(object, string, params object[]) Adds an error entry to the log. public Task ErrorAsync(object anObject, string aMessage, params object[] anArguments) Parameters anObject object Object which type name will be used as tag aMessage string Log entry to add anArguments object[] Formatting arguments Returns Task ErrorAsync(string, Exception) Adds an error entry for an exception. public Task ErrorAsync(string aTag, Exception anError) Parameters aTag string Tag to use anError Exception Error to add Returns Task ErrorAsync(string, Exception, string, params object[]) Adds an error entry for an exception. Tag to use Error to add Log entry to add Formatting arguments public Task ErrorAsync(string aTag, Exception anError, string aMessage, params object[] anArguments) Parameters aTag string anError Exception aMessage string anArguments object[] Returns Task ErrorAsync(string, string, params object[]) Adds an error entry to the log. public Task ErrorAsync(string aTag, string aMessage, params object[] anArguments) Parameters aTag string Tag to use aMessage string Log entry to add anArguments object[] Returns Task"
  },
  "api/UltraForce.Library.NetStandard.Development.html": {
    "href": "api/UltraForce.Library.NetStandard.Development.html",
    "title": "Namespace UltraForce.Library.NetStandard.Development | UltraForce.Library.NetStandard",
    "keywords": "Namespace UltraForce.Library.NetStandard.Development Classes UFHtmlLog UFHtmlLog implements a log using HTML formatting for every entry. New messages get added to log and are output to the general debugger log via WriteLine(string). This class only has functionality if UFDEBUG has been defined else the methods will do nothing. UFTextFileLog UFTextFileLog implements a log that is written to a text file. New messages get added to the end of the log file. The messages are prefixed with a time stamp. The class will create a a new log file when the day changes. The log filename includes a date. If UFDEBUG is defined, the log messages are also outputted to the general debugger log via WriteLine(string)."
  },
  "api/UltraForce.Library.NetStandard.Errors.UFQueueException.html": {
    "href": "api/UltraForce.Library.NetStandard.Errors.UFQueueException.html",
    "title": "Class UFQueueException | UltraForce.Library.NetStandard",
    "keywords": "Class UFQueueException Namespace UltraForce.Library.NetStandard.Errors Assembly UltraForce.Library.NetStandard.dll This exception is thrown by UFParallelQueueAction or UFSerialQueueAction when a action in the queue threw an exception while being ran. public class UFQueueException : Exception, ISerializable Inheritance object Exception UFQueueException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors UFQueueException(string) Constructs an instance of UFQueueException. public UFQueueException(string aMessage) Parameters aMessage string Error message"
  },
  "api/UltraForce.Library.NetStandard.Errors.html": {
    "href": "api/UltraForce.Library.NetStandard.Errors.html",
    "title": "Namespace UltraForce.Library.NetStandard.Errors | UltraForce.Library.NetStandard",
    "keywords": "Namespace UltraForce.Library.NetStandard.Errors Classes UFQueueException This exception is thrown by UFParallelQueueAction or UFSerialQueueAction when a action in the queue threw an exception while being ran."
  },
  "api/UltraForce.Library.NetStandard.Events.UFDataChangedEventArgs.html": {
    "href": "api/UltraForce.Library.NetStandard.Events.UFDataChangedEventArgs.html",
    "title": "Class UFDataChangedEventArgs | UltraForce.Library.NetStandard",
    "keywords": "Class UFDataChangedEventArgs Namespace UltraForce.Library.NetStandard.Events Assembly UltraForce.Library.NetStandard.dll Represents the base class for classes that contain event data, and provides a value to use for events that do not include event data. public class UFDataChangedEventArgs : EventArgs Inheritance object EventArgs UFDataChangedEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UFDataChangedEventArgs(int, string?, object?, object?) Create new event object. public UFDataChangedEventArgs(int aDataChangedToken, string? aPropertyName = null, object? anOldValue = null, object? aNewValue = null) Parameters aDataChangedToken int Value to use for data changed token. aPropertyName string Optional Property name that changed anOldValue object The old value of the property. aNewValue object A new of the property. Properties DataChangedToken This value contains a copy of the DataChangedToken value before it was adjusted when firing this event. public int DataChangedToken { get; } Property Value int Methods AddChanged(string, object?, object?) This method can be used to add properties that have changed. public void AddChanged(string aPropertyName, object? anOldValue = null, object? aNewValue = null) Parameters aPropertyName string Name of the property. anOldValue object Old value of the property. aNewValue object New value of the property GetPropertyNames() Get all the properties that have changed. public string[] GetPropertyNames() Returns string[] A list of property names. HasChanged(params string[]) Check if a certain property has changed. public bool HasChanged(params string[] aPropertyNames) Parameters aPropertyNames string[] One or more property names to check. Returns bool true if at least one of the property has changed; otherwise, false. NewValue(string) Get the new value of a property. public object? NewValue(string aPropertyName) Parameters aPropertyName string Property to get new value for. Returns object The new value. OldValue(string) Get the old value of a property. public object? OldValue(string aPropertyName) Parameters aPropertyName string Property to get old value for. Returns object The old value."
  },
  "api/UltraForce.Library.NetStandard.Events.UFWeakReferencedEventHandler-1.html": {
    "href": "api/UltraForce.Library.NetStandard.Events.UFWeakReferencedEventHandler-1.html",
    "title": "Class UFWeakReferencedEventHandler<TEventArgs> | UltraForce.Library.NetStandard",
    "keywords": "Class UFWeakReferencedEventHandler<TEventArgs> Namespace UltraForce.Library.NetStandard.Events Assembly UltraForce.Library.NetStandard.dll A generic version of UFWeakReferencedEventHandler. public class UFWeakReferencedEventHandler<TEventArgs> : UFWeakReferencedEventHandler where TEventArgs : EventArgs Type Parameters TEventArgs Event arguments type Inheritance object UFWeakReferencedDelegateBase UFWeakReferencedEventHandler UFWeakReferencedEventHandler<TEventArgs> Inherited Members UFWeakReferencedEventHandler.Invoke(object) UFWeakReferencedEventHandler.Invoke(object, EventArgs) UFWeakReferencedEventHandler.Wrap(EventHandler) UFWeakReferencedEventHandler.Wrap(EventHandler<UFDataChangedEventArgs>) UFWeakReferencedEventHandler.Wrap<TEventArgs>(EventHandler<TEventArgs>) UFWeakReferencedEventHandler.Wrap(PropertyChangedEventHandler) UFWeakReferencedDelegateBase.Equals(object) UFWeakReferencedDelegateBase.GetHashCode() UFWeakReferencedDelegateBase.IsAlive UFWeakReferencedDelegateBase.Invoke(params object[]) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UFWeakReferencedEventHandler(EventHandler<TEventArgs>) Constructs an instance of UFWeakReferencedEventHandler<TEventArgs> public UFWeakReferencedEventHandler(EventHandler<TEventArgs> anHandler) Parameters anHandler EventHandler<TEventArgs> event handler Methods Invoke(object, TEventArgs) Calls the handler method if the target has not been garbage collected. public void Invoke(object aSender, TEventArgs anEventArgs) Parameters aSender object anEventArgs TEventArgs"
  },
  "api/UltraForce.Library.NetStandard.Events.UFWeakReferencedEventHandler.html": {
    "href": "api/UltraForce.Library.NetStandard.Events.UFWeakReferencedEventHandler.html",
    "title": "Class UFWeakReferencedEventHandler | UltraForce.Library.NetStandard",
    "keywords": "Class UFWeakReferencedEventHandler Namespace UltraForce.Library.NetStandard.Events Assembly UltraForce.Library.NetStandard.dll Stores an event handler as method and weak reference to the target. Either an instance can be created or a Wrap(EventHandler) can be used to create an instance for a handler. public class UFWeakReferencedEventHandler : UFWeakReferencedDelegateBase Inheritance object UFWeakReferencedDelegateBase UFWeakReferencedEventHandler Derived UFWeakReferencedEventHandler<TEventArgs> Inherited Members UFWeakReferencedDelegateBase.Equals(object) UFWeakReferencedDelegateBase.GetHashCode() UFWeakReferencedDelegateBase.IsAlive UFWeakReferencedDelegateBase.Invoke(params object[]) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UFWeakReferencedEventHandler(NotifyCollectionChangedEventHandler) Constructs an instance of UFWeakReferencedEventHandler for a NotifyCollectionChangedEventHandler. public UFWeakReferencedEventHandler(NotifyCollectionChangedEventHandler anHandler) Parameters anHandler NotifyCollectionChangedEventHandler UFWeakReferencedEventHandler(PropertyChangedEventHandler) Constructs an instance of UFWeakReferencedEventHandler for a PropertyChangedEventHandler. public UFWeakReferencedEventHandler(PropertyChangedEventHandler anHandler) Parameters anHandler PropertyChangedEventHandler UFWeakReferencedEventHandler(Delegate) Stores a delegate as a weak reference to the target and the method that should be invoked. Trying to use a static delegate will throw an exception. protected UFWeakReferencedEventHandler(Delegate aDelegate) Parameters aDelegate Delegate Delegate to store UFWeakReferencedEventHandler(EventHandler) Constructs an instance of UFWeakReferencedEventHandler for a EventHandler. public UFWeakReferencedEventHandler(EventHandler anHandler) Parameters anHandler EventHandler event handler Methods Invoke(object) Calls the handler method with Empty if the target has not been garbage collected. public void Invoke(object aSender) Parameters aSender object Invoke(object, EventArgs) Calls the handler method if the target has not been garbage collected. public void Invoke(object aSender, EventArgs anEventArgs) Parameters aSender object anEventArgs EventArgs Wrap(PropertyChangedEventHandler) Wraps an event handler by creating an instance of UFWeakReferencedEventHandler for the handler and return its Invoke(object) method. Take note that when attaching the result of this method to an event the UFWeakReferencedEventHandler instance will NOT get garbage collected until the event provider gets garbage collected. If the handler is a static handler, the method just returns the handler. public static PropertyChangedEventHandler Wrap(PropertyChangedEventHandler anHandler) Parameters anHandler PropertyChangedEventHandler Handler method to wrap. If it is a static handler, the method just returns anHandler. Returns PropertyChangedEventHandler Handler method of the wrapper object or the value of anHandler if it was a static handler. Wrap(EventHandler) Wraps an event handler by creating an instance of UFWeakReferencedEventHandler for the handler and return its Invoke(object, EventArgs) method. Take note that when attaching the result of this method to an event the UFWeakReferencedEventHandler instance will NOT get garbage collected until the event provider gets garbage collected. If the handler is a static handler, the method just returns the handler. public static EventHandler Wrap(EventHandler anHandler) Parameters anHandler EventHandler Handler method to wrap. If it is a static handler, the method just returns anHandler. Returns EventHandler Handler method of the wrapper object or the value of anHandler if it was a static handler. Wrap(EventHandler<UFDataChangedEventArgs>) Wraps an event handler by creating an instance of UFWeakReferencedEventHandler<TEventArgs> for the handler and return its Invoke(object, EventArgs) method. public static EventHandler<UFDataChangedEventArgs> Wrap(EventHandler<UFDataChangedEventArgs> anHandler) Parameters anHandler EventHandler<UFDataChangedEventArgs> Handler method to wrap. If it is a static handler, the method just returns anHandler. Returns EventHandler<UFDataChangedEventArgs> Handler method of the wrapper object or the value of anHandler if it was a static handler. Wrap<TEventArgs>(EventHandler<TEventArgs>) Wraps an event handler by creating an instance of UFWeakReferencedEventHandler<TEventArgs> for the handler and return its Invoke(object, EventArgs) method. public static EventHandler<TEventArgs> Wrap<TEventArgs>(EventHandler<TEventArgs> anHandler) where TEventArgs : EventArgs Parameters anHandler EventHandler<TEventArgs> Handler method to wrap. If it is a static handler, the method just returns anHandler. Returns EventHandler<TEventArgs> Handler method of the wrapper object or the value of anHandler if it was a static handler. Type Parameters TEventArgs EventArgs type to use"
  },
  "api/UltraForce.Library.NetStandard.Events.UFWeakReferencedEventHandlerManager-1.html": {
    "href": "api/UltraForce.Library.NetStandard.Events.UFWeakReferencedEventHandlerManager-1.html",
    "title": "Class UFWeakReferencedEventHandlerManager<TEventArgs> | UltraForce.Library.NetStandard",
    "keywords": "Class UFWeakReferencedEventHandlerManager<TEventArgs> Namespace UltraForce.Library.NetStandard.Events Assembly UltraForce.Library.NetStandard.dll A generic version of UFWeakReferencedEventHandlerManager public class UFWeakReferencedEventHandlerManager<TEventArgs> : UFWeakReferencedEventHandlerManager, IDisposable where TEventArgs : EventArgs Type Parameters TEventArgs Event arguments type Inheritance object UFWeakReferencedEventHandlerManager UFWeakReferencedEventHandlerManager<TEventArgs> Implements IDisposable Inherited Members UFWeakReferencedEventHandlerManager.Dispose() UFWeakReferencedEventHandlerManager.Add() UFWeakReferencedEventHandlerManager.Remove() UFWeakReferencedEventHandlerManager.Create(EventHandler<UFDataChangedEventArgs>, IUFNotifyDataChanged, bool) UFWeakReferencedEventHandlerManager.Create(PropertyChangedEventHandler, INotifyPropertyChanged, bool) UFWeakReferencedEventHandlerManager.Create(NotifyCollectionChangedEventHandler, INotifyCollectionChanged, bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UFWeakReferencedEventHandlerManager(EventHandler<TEventArgs>, object, string, bool) public UFWeakReferencedEventHandlerManager(EventHandler<TEventArgs> anHandler, object aProvider, string anEventName, bool anAdd = true) Parameters anHandler EventHandler<TEventArgs> aProvider object anEventName string anAdd bool"
  },
  "api/UltraForce.Library.NetStandard.Events.UFWeakReferencedEventHandlerManager.html": {
    "href": "api/UltraForce.Library.NetStandard.Events.UFWeakReferencedEventHandlerManager.html",
    "title": "Class UFWeakReferencedEventHandlerManager | UltraForce.Library.NetStandard",
    "keywords": "Class UFWeakReferencedEventHandlerManager Namespace UltraForce.Library.NetStandard.Events Assembly UltraForce.Library.NetStandard.dll This class can be used to manage a UFWeakReferencedEventHandler<TEventArgs>. public class UFWeakReferencedEventHandlerManager : IDisposable Inheritance object UFWeakReferencedEventHandlerManager Implements IDisposable Derived UFWeakReferencedEventHandlerManager<TEventArgs> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks When adding an event handler to an event provider, the object implementing the event handler will not get garbage collected until either the event handler is removed or the object implementing the event provider is also garbage collected. This class can be used with objects that can not remove event handlers. It will manages UFWeakReferencedEventHandler<TEventArgs> so that the target still can get garbage collected. To use this class, create an instance of UFWeakReferencedEventHandlerManager<TEventArgs> and assign it to some private property or field in the target instance. When the instance is getting garbage collected it removes also the UFWeakReferencedEventHandler<TEventArgs> instance from the event provider. Do not forget to assign the instance of UFWeakReferencedEventHandlerManager<TEventArgs> to a private field or property so that the instance only gets garbage collected once the target also gets garbage collected. Else the instance might get garbage collected sooner, resulting in removal of the event handler while it is still needed. Constructors UFWeakReferencedEventHandlerManager(NotifyCollectionChangedEventHandler, object, string, bool) Constructs an instance UFWeakReferencedEventHandlerManager. public UFWeakReferencedEventHandlerManager(NotifyCollectionChangedEventHandler anHandler, object aProvider, string anEventName, bool anAdd = true) Parameters anHandler NotifyCollectionChangedEventHandler Handler method to manage. aProvider object Provider that will fire events. anEventName string Name of event to add handler to. anAdd bool When true add handler to provider; else call Add() to add the handler. Remarks The handler can not be static. Trying to use a static handler will throw an exception. UFWeakReferencedEventHandlerManager(PropertyChangedEventHandler, object, string, bool) Constructs an instance UFWeakReferencedEventHandlerManager. public UFWeakReferencedEventHandlerManager(PropertyChangedEventHandler anHandler, object aProvider, string anEventName, bool anAdd = true) Parameters anHandler PropertyChangedEventHandler Handler method to manage. aProvider object Provider that will fire events. anEventName string Name of event to add handler to. anAdd bool When true add handler to provider; else call Add() to add the handler. Remarks The handler can not be static. Trying to use a static handler will throw an exception. UFWeakReferencedEventHandlerManager(EventHandler, object, string, bool) Constructs an instance UFWeakReferencedEventHandlerManager. public UFWeakReferencedEventHandlerManager(EventHandler anHandler, object aProvider, string anEventName, bool anAdd = true) Parameters anHandler EventHandler Handler method to manage. aProvider object Provider that will fire events. anEventName string Name of event to add handler to. anAdd bool When true add handler to provider; else call Add() to add the handler. Remarks The handler can not be static. Trying to use a static handler will throw an exception. UFWeakReferencedEventHandlerManager(UFWeakReferencedEventHandler, object, string, bool) Constructs an instance UFWeakReferencedEventHandlerManager. protected UFWeakReferencedEventHandlerManager(UFWeakReferencedEventHandler anHandler, object aProvider, string anEventName, bool anAdd = true) Parameters anHandler UFWeakReferencedEventHandler Handler method to manage. aProvider object Provider that will fire events. anEventName string Name of event to add handler to. anAdd bool When true add handler to provider; else call Add() to add the handler. Remarks The handler can not be static. Trying to use a static handler will throw an exception. Methods Add() Adds the managed handler to the event provider. If the handler is already added this method does nothing. public void Add() Create(NotifyCollectionChangedEventHandler, INotifyCollectionChanged, bool) Create instance of UFWeakReferencedEventHandlerManager<TEventArgs> for NotifyCollectionChangedEventArgs. public static UFWeakReferencedEventHandlerManager Create(NotifyCollectionChangedEventHandler anHandler, INotifyCollectionChanged aProvider, bool anAdd = true) Parameters anHandler NotifyCollectionChangedEventHandler Handler method to manage. aProvider INotifyCollectionChanged Object that implements INotifyCollectionChanged. anAdd bool When true add handler to provider. Returns UFWeakReferencedEventHandlerManager Instance of UFWeakReferencedEventHandlerManager<TEventArgs> for NotifyCollectionChangedEventArgs. Create(PropertyChangedEventHandler, INotifyPropertyChanged, bool) Create instance of UFWeakReferencedEventHandlerManager for PropertyChangedEventHandler. public static UFWeakReferencedEventHandlerManager Create(PropertyChangedEventHandler anHandler, INotifyPropertyChanged aProvider, bool anAdd = true) Parameters anHandler PropertyChangedEventHandler Handler method to manage. aProvider INotifyPropertyChanged Object that implements INotifyPropertyChanged. anAdd bool When true add handler to provider. Returns UFWeakReferencedEventHandlerManager Instance of UFWeakReferencedEventHandlerManager. Create(EventHandler<UFDataChangedEventArgs>, IUFNotifyDataChanged, bool) Create instance of UFWeakReferencedEventHandlerManager<TEventArgs> for UFDataChangedEventArgs. public static UFWeakReferencedEventHandlerManager<UFDataChangedEventArgs> Create(EventHandler<UFDataChangedEventArgs> anHandler, IUFNotifyDataChanged aProvider, bool anAdd = true) Parameters anHandler EventHandler<UFDataChangedEventArgs> Handler method to manage. aProvider IUFNotifyDataChanged Object that implements IUFNotifyDataChanged. anAdd bool When true add handler to provider. Returns UFWeakReferencedEventHandlerManager<UFDataChangedEventArgs> Instance of UFWeakReferencedEventHandlerManager<TEventArgs> for UFDataChangedEventArgs. Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() ~UFWeakReferencedEventHandlerManager() Removes the event handler from the provider. protected ~UFWeakReferencedEventHandlerManager() Remove() Removes the managed handler from the event provider. If the handler is already removed this method does nothing. public void Remove()"
  },
  "api/UltraForce.Library.NetStandard.Events.UFWeakReferencedEventManager-1.html": {
    "href": "api/UltraForce.Library.NetStandard.Events.UFWeakReferencedEventManager-1.html",
    "title": "Class UFWeakReferencedEventManager<TEventArgs> | UltraForce.Library.NetStandard",
    "keywords": "Class UFWeakReferencedEventManager<TEventArgs> Namespace UltraForce.Library.NetStandard.Events Assembly UltraForce.Library.NetStandard.dll UFWeakReferencedEventManager<TEventArgs> stores event handlers as methods and target. It uses a weak reference for the target and only invokes the handler if the target is still available. public class UFWeakReferencedEventManager<TEventArgs> : UFWeakReferencedDelegateManagerBase where TEventArgs : EventArgs Type Parameters TEventArgs event arguments type Inheritance object UFWeakReferencedDelegateManagerBase UFWeakReferencedEventManager<TEventArgs> Inherited Members UFWeakReferencedDelegateManagerBase.Add(UFWeakReferencedDelegateBase) UFWeakReferencedDelegateManagerBase.Remove(UFWeakReferencedDelegateBase) UFWeakReferencedDelegateManagerBase.CleanUp() UFWeakReferencedDelegateManagerBase.Invoke(params object[]) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Examples class Foo { private UFWeakReferencedEventManager{UFDataChangedEventArgs} m_dataChangedManager; public Foo() { this.m_dataChangedManager = new UFWeakReferencedEventManager{UFDataChangedEventArgs}(); } // objects adding a listener will still be garbage collected if they no longer are referenced in any other way public event EventHandler{UFDataChangedEventArgs} DataChanged { add => this.m_dataChangedManager.Add(value); remove => this.m_dataChangedManager.Remove(value); } private void OnDataChanged(UFDataChangedEventArgs anEvent) { this.m_dataChangedManager.Invoke(this, anEvent); } } Methods Add(EventHandler<TEventArgs>) Adds a handler to the managed list. If there is already a handler with the same method and target stored, nothing happens. public void Add(EventHandler<TEventArgs> aHandler) Parameters aHandler EventHandler<TEventArgs> Handler to add Invoke(object, TEventArgs) Invokes the handlers for the targets that are still available. public void Invoke(object aSender, TEventArgs anArguments) Parameters aSender object Sender to use anArguments TEventArgs Arguments to use Remove(EventHandler<TEventArgs>) Removes a handler from the managed list. public void Remove(EventHandler<TEventArgs> aHandler) Parameters aHandler EventHandler<TEventArgs> Handler to remove"
  },
  "api/UltraForce.Library.NetStandard.Events.UFWeakReferencedEventManager.html": {
    "href": "api/UltraForce.Library.NetStandard.Events.UFWeakReferencedEventManager.html",
    "title": "Class UFWeakReferencedEventManager | UltraForce.Library.NetStandard",
    "keywords": "Class UFWeakReferencedEventManager Namespace UltraForce.Library.NetStandard.Events Assembly UltraForce.Library.NetStandard.dll UFWeakReferencedEventManager stores event handlers as methods and target. It uses a weak reference for the target and only invokes the handler only if the target is still available. public class UFWeakReferencedEventManager : UFWeakReferencedDelegateManagerBase Inheritance object UFWeakReferencedDelegateManagerBase UFWeakReferencedEventManager Inherited Members UFWeakReferencedDelegateManagerBase.Add(UFWeakReferencedDelegateBase) UFWeakReferencedDelegateManagerBase.Remove(UFWeakReferencedDelegateBase) UFWeakReferencedDelegateManagerBase.CleanUp() UFWeakReferencedDelegateManagerBase.Invoke(params object[]) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Add(EventHandler) Adds a handler to the managed list. If there is already a handler with the same method and target stored, nothing happens. public void Add(EventHandler aHandler) Parameters aHandler EventHandler Handler to add Invoke(object) Invokes the handlers for the targets that are still available. public void Invoke(object aSender) Parameters aSender object Sender to use Remove(EventHandler) Removes a handler from the managed list. public void Remove(EventHandler aHandler) Parameters aHandler EventHandler Handler to remove"
  },
  "api/UltraForce.Library.NetStandard.Events.UFWeakReferencedNotifyCollectionChangedManager.html": {
    "href": "api/UltraForce.Library.NetStandard.Events.UFWeakReferencedNotifyCollectionChangedManager.html",
    "title": "Class UFWeakReferencedNotifyCollectionChangedManager | UltraForce.Library.NetStandard",
    "keywords": "Class UFWeakReferencedNotifyCollectionChangedManager Namespace UltraForce.Library.NetStandard.Events Assembly UltraForce.Library.NetStandard.dll UFWeakReferencedNotifyCollectionChangedManager stores event handlers as methods and target. It uses a weak reference for the target and only invokes the handler only if the target is still available. public class UFWeakReferencedNotifyCollectionChangedManager Inheritance object UFWeakReferencedNotifyCollectionChangedManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UFWeakReferencedNotifyCollectionChangedManager() Constructs an instance of UFWeakReferencedNotifyCollectionChangedManager public UFWeakReferencedNotifyCollectionChangedManager() Methods Add(NotifyCollectionChangedEventHandler) Adds a handler to the managed list. If there is already a handler with the same method and target stored, nothing happens. public void Add(NotifyCollectionChangedEventHandler aHandler) Parameters aHandler NotifyCollectionChangedEventHandler Handler to add Invoke(object, NotifyCollectionChangedEventArgs) Invokes the handlers for the targets that are still available. public void Invoke(object aSender, NotifyCollectionChangedEventArgs anArguments) Parameters aSender object Sender to use anArguments NotifyCollectionChangedEventArgs Arguments to use Remove(NotifyCollectionChangedEventHandler) Removes a handler from the managed list. public void Remove(NotifyCollectionChangedEventHandler aHandler) Parameters aHandler NotifyCollectionChangedEventHandler Handler to remove"
  },
  "api/UltraForce.Library.NetStandard.Events.UFWeakReferencedPropertyChangedManager.html": {
    "href": "api/UltraForce.Library.NetStandard.Events.UFWeakReferencedPropertyChangedManager.html",
    "title": "Class UFWeakReferencedPropertyChangedManager | UltraForce.Library.NetStandard",
    "keywords": "Class UFWeakReferencedPropertyChangedManager Namespace UltraForce.Library.NetStandard.Events Assembly UltraForce.Library.NetStandard.dll UFWeakReferencedPropertyChangedManager stores event handlers as methods and target. It uses a weak reference for the target and only invokes the handler only if the target is still available. public class UFWeakReferencedPropertyChangedManager : UFWeakReferencedDelegateManagerBase Inheritance object UFWeakReferencedDelegateManagerBase UFWeakReferencedPropertyChangedManager Inherited Members UFWeakReferencedDelegateManagerBase.Add(UFWeakReferencedDelegateBase) UFWeakReferencedDelegateManagerBase.Remove(UFWeakReferencedDelegateBase) UFWeakReferencedDelegateManagerBase.CleanUp() UFWeakReferencedDelegateManagerBase.Invoke(params object[]) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Add(PropertyChangedEventHandler) Adds a handler to the managed list. If there is already a handler with the same method and target stored, nothing happens. public void Add(PropertyChangedEventHandler aHandler) Parameters aHandler PropertyChangedEventHandler Handler to add Invoke(object, PropertyChangedEventArgs) Invokes the handlers for the targets that are still available. public void Invoke(object aSender, PropertyChangedEventArgs anArguments) Parameters aSender object Sender to use anArguments PropertyChangedEventArgs Arguments to use Remove(PropertyChangedEventHandler) Removes a handler from the managed list. public void Remove(PropertyChangedEventHandler aHandler) Parameters aHandler PropertyChangedEventHandler Handler to remove"
  },
  "api/UltraForce.Library.NetStandard.Events.html": {
    "href": "api/UltraForce.Library.NetStandard.Events.html",
    "title": "Namespace UltraForce.Library.NetStandard.Events | UltraForce.Library.NetStandard",
    "keywords": "Namespace UltraForce.Library.NetStandard.Events Classes UFDataChangedEventArgs Represents the base class for classes that contain event data, and provides a value to use for events that do not include event data. UFWeakReferencedEventHandler Stores an event handler as method and weak reference to the target. Either an instance can be created or a Wrap(EventHandler) can be used to create an instance for a handler. UFWeakReferencedEventHandlerManager This class can be used to manage a UFWeakReferencedEventHandler<TEventArgs>. UFWeakReferencedEventHandlerManager<TEventArgs> A generic version of UFWeakReferencedEventHandlerManager UFWeakReferencedEventHandler<TEventArgs> A generic version of UFWeakReferencedEventHandler. UFWeakReferencedEventManager UFWeakReferencedEventManager stores event handlers as methods and target. It uses a weak reference for the target and only invokes the handler only if the target is still available. UFWeakReferencedEventManager<TEventArgs> UFWeakReferencedEventManager<TEventArgs> stores event handlers as methods and target. It uses a weak reference for the target and only invokes the handler if the target is still available. UFWeakReferencedNotifyCollectionChangedManager UFWeakReferencedNotifyCollectionChangedManager stores event handlers as methods and target. It uses a weak reference for the target and only invokes the handler only if the target is still available. UFWeakReferencedPropertyChangedManager UFWeakReferencedPropertyChangedManager stores event handlers as methods and target. It uses a weak reference for the target and only invokes the handler only if the target is still available."
  },
  "api/UltraForce.Library.NetStandard.Extensions.UFEnumExtensions.html": {
    "href": "api/UltraForce.Library.NetStandard.Extensions.UFEnumExtensions.html",
    "title": "Class UFEnumExtensions | UltraForce.Library.NetStandard",
    "keywords": "Class UFEnumExtensions Namespace UltraForce.Library.NetStandard.Extensions Assembly UltraForce.Library.NetStandard.dll Defines extension method for use with Enum type. public static class UFEnumExtensions Inheritance object UFEnumExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetAttribute<T>(Enum) Gets an attribute type for an enum value. public static T? GetAttribute<T>(this Enum anEnumerationValue) where T : class Parameters anEnumerationValue Enum Returns T Type Parameters T GetDescription(Enum) Get the value of a Description used with an enum value. public static string GetDescription(this Enum anEnumerationValue) Parameters anEnumerationValue Enum Enumeration value. Returns string The value of the description attribute or enum value converted to string. Remarks Based on code from: http://stackoverflow.com/questions/18912697/system-componentmodel-descriptionattribute-in.NetStandard1-class-library Usage: [UFDescription(\"Some text\")] EnumValue ... EnumValue.GetDescription() GetName(Enum) Get the value of a ShortDescription used with an enum value. public static string GetName(this Enum anEnumerationValue) Parameters anEnumerationValue Enum Enumeration value. Returns string The short description value of the description attribute or enum value converted to string. GetShortDescription(Enum) Get the value of a ShortDescription used with an enum value. public static string GetShortDescription(this Enum anEnumerationValue) Parameters anEnumerationValue Enum Enumeration value. Returns string The short description value of the description attribute or enum value converted to string. Next<T>(T) Get the next value in an enum; if the value is the last value in the enum, the first value is returned. public static T Next<T>(this T aSource) where T : struct, Enum Parameters aSource T Source. Returns T The next value (or first value) Type Parameters T The 1st type parameter. Remarks Source: http://stackoverflow.com/questions/642542/how-to-get-next-or-previous-enum-value-in-c-sharp Previous<T>(T) Get the next value in an enum; if the value is the last value in the enum, the first value is returned. public static T Previous<T>(this T aSource) where T : struct, Enum Parameters aSource T Source. Returns T The next value (or first value) Type Parameters T The 1st type parameter. Remarks Source: http://stackoverflow.com/questions/642542/how-to-get-next-or-previous-enum-value-in-c-sharp"
  },
  "api/UltraForce.Library.NetStandard.Extensions.html": {
    "href": "api/UltraForce.Library.NetStandard.Extensions.html",
    "title": "Namespace UltraForce.Library.NetStandard.Extensions | UltraForce.Library.NetStandard",
    "keywords": "Namespace UltraForce.Library.NetStandard.Extensions Classes UFEnumExtensions Defines extension method for use with Enum type."
  },
  "api/UltraForce.Library.NetStandard.IO.UFLazyStream.html": {
    "href": "api/UltraForce.Library.NetStandard.IO.UFLazyStream.html",
    "title": "Class UFLazyStream | UltraForce.Library.NetStandard",
    "keywords": "Class UFLazyStream Namespace UltraForce.Library.NetStandard.IO Assembly UltraForce.Library.NetStandard.dll UFLazyStream is a wrapper for another stream. The wrapped stream gets only instantiated if any of the stream methods or properties are accessed. For example this class can be used in combination with a file creation stream, creating only the file if the stream instance is accessed. public class UFLazyStream : Stream, IAsyncDisposable, IDisposable Inheritance object MarshalByRefObject Stream UFLazyStream Implements IAsyncDisposable IDisposable Inherited Members Stream.Null Stream.BeginRead(byte[], int, int, AsyncCallback, object) Stream.BeginWrite(byte[], int, int, AsyncCallback, object) Stream.Close() Stream.CopyTo(Stream) Stream.CopyTo(Stream, int) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, int, CancellationToken) Stream.CopyToAsync(Stream, CancellationToken) Stream.CreateWaitHandle() Stream.Dispose() Stream.DisposeAsync() Stream.EndRead(IAsyncResult) Stream.EndWrite(IAsyncResult) Stream.FlushAsync() Stream.FlushAsync(CancellationToken) Stream.ObjectInvariant() Stream.Read(Span<byte>) Stream.ReadAsync(byte[], int, int) Stream.ReadAsync(byte[], int, int, CancellationToken) Stream.ReadAsync(Memory<byte>, CancellationToken) Stream.ReadByte() Stream.Synchronized(Stream) Stream.Write(ReadOnlySpan<byte>) Stream.WriteAsync(byte[], int, int) Stream.WriteAsync(byte[], int, int, CancellationToken) Stream.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) Stream.WriteByte(byte) Stream.CanTimeout Stream.ReadTimeout Stream.WriteTimeout MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UFLazyStream(Func<Stream>) Constructs an instance of UFLazyStream public UFLazyStream(Func<Stream> aFactory) Parameters aFactory Func<Stream> A factory that creates the wrapped stream Properties CanRead When overridden in a derived class, gets a value indicating whether the current stream supports reading. public override bool CanRead { get; } Property Value bool true if the stream supports reading; otherwise, false. CanSeek When overridden in a derived class, gets a value indicating whether the current stream supports seeking. public override bool CanSeek { get; } Property Value bool true if the stream supports seeking; otherwise, false. CanWrite When overridden in a derived class, gets a value indicating whether the current stream supports writing. public override bool CanWrite { get; } Property Value bool true if the stream supports writing; otherwise, false. Length When overridden in a derived class, gets the length in bytes of the stream. public override long Length { get; } Property Value long A long value representing the length of the stream in bytes. Exceptions NotSupportedException A class derived from Stream does not support seeking. ObjectDisposedException Methods were called after the stream was closed. Position When overridden in a derived class, gets or sets the position within the current stream. public override long Position { get; set; } Property Value long The current position within the stream. Exceptions IOException An I/O error occurs. NotSupportedException The stream does not support seeking. ObjectDisposedException Methods were called after the stream was closed. Methods Dispose(bool) Releases the unmanaged resources used by the Stream and optionally releases the managed resources. protected override void Dispose(bool disposing) Parameters disposing bool true to release both managed and unmanaged resources; false to release only unmanaged resources. Flush() When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device. public override void Flush() Exceptions IOException An I/O error occurs. Read(byte[], int, int) When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read. public override int Read(byte[] buffer, int offset, int count) Parameters buffer byte[] An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source. offset int The zero-based byte offset in buffer at which to begin storing the data read from the current stream. count int The maximum number of bytes to be read from the current stream. Returns int The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached. Exceptions ArgumentException The sum of offset and count is larger than the buffer length. ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. IOException An I/O error occurs. NotSupportedException The stream does not support reading. ObjectDisposedException Methods were called after the stream was closed. Seek(long, SeekOrigin) When overridden in a derived class, sets the position within the current stream. public override long Seek(long offset, SeekOrigin origin) Parameters offset long A byte offset relative to the origin parameter. origin SeekOrigin A value of type SeekOrigin indicating the reference point used to obtain the new position. Returns long The new position within the current stream. Exceptions IOException An I/O error occurs. NotSupportedException The stream does not support seeking, such as if the stream is constructed from a pipe or console output. ObjectDisposedException Methods were called after the stream was closed. SetLength(long) When overridden in a derived class, sets the length of the current stream. public override void SetLength(long value) Parameters value long The desired length of the current stream in bytes. Exceptions IOException An I/O error occurs. NotSupportedException The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output. ObjectDisposedException Methods were called after the stream was closed. Write(byte[], int, int) When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written. public override void Write(byte[] buffer, int offset, int count) Parameters buffer byte[] An array of bytes. This method copies count bytes from buffer to the current stream. offset int The zero-based byte offset in buffer at which to begin copying bytes to the current stream. count int The number of bytes to be written to the current stream. Exceptions ArgumentException The sum of offset and count is greater than the buffer length. ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. IOException An I/O error occurred, such as the specified file cannot be found. NotSupportedException The stream does not support writing. ObjectDisposedException Write(byte[], int, int) was called after the stream was closed."
  },
  "api/UltraForce.Library.NetStandard.IO.html": {
    "href": "api/UltraForce.Library.NetStandard.IO.html",
    "title": "Namespace UltraForce.Library.NetStandard.IO | UltraForce.Library.NetStandard",
    "keywords": "Namespace UltraForce.Library.NetStandard.IO Classes UFLazyStream UFLazyStream is a wrapper for another stream. The wrapped stream gets only instantiated if any of the stream methods or properties are accessed. For example this class can be used in combination with a file creation stream, creating only the file if the stream instance is accessed."
  },
  "api/UltraForce.Library.NetStandard.Interfaces.IUFAccessProperty.html": {
    "href": "api/UltraForce.Library.NetStandard.Interfaces.IUFAccessProperty.html",
    "title": "Interface IUFAccessProperty | UltraForce.Library.NetStandard",
    "keywords": "Interface IUFAccessProperty Namespace UltraForce.Library.NetStandard.Interfaces Assembly UltraForce.Library.NetStandard.dll Objects can implement this interface to access properties via simple method calls. public interface IUFAccessProperty Methods GetPropertyValue(string) Gets the value of a property. object? GetPropertyValue(string aPropertyName) Parameters aPropertyName string Name of property to get value for Returns object Value of property SetPropertyValue(string, object?) Sets the value of a property. bool SetPropertyValue(string aPropertyName, object? aValue) Parameters aPropertyName string Name of property to set value for aValue object Value to assign Returns bool True if aValue is different from the current value and has been assigned."
  },
  "api/UltraForce.Library.NetStandard.Interfaces.IUFClearable.html": {
    "href": "api/UltraForce.Library.NetStandard.Interfaces.IUFClearable.html",
    "title": "Interface IUFClearable | UltraForce.Library.NetStandard",
    "keywords": "Interface IUFClearable Namespace UltraForce.Library.NetStandard.Interfaces Assembly UltraForce.Library.NetStandard.dll Objects can implement this interface when then they can clear themselves. public interface IUFClearable Methods Clear() Clears the contents of the instance. void Clear()"
  },
  "api/UltraForce.Library.NetStandard.Interfaces.IUFJsonExport.html": {
    "href": "api/UltraForce.Library.NetStandard.Interfaces.IUFJsonExport.html",
    "title": "Interface IUFJsonExport | UltraForce.Library.NetStandard",
    "keywords": "Interface IUFJsonExport Namespace UltraForce.Library.NetStandard.Interfaces Assembly UltraForce.Library.NetStandard.dll Objects can implement this interface to export their contents as JSON formatted data. public interface IUFJsonExport Methods SaveJson(StringBuilder) Saves the object as JSON structure. void SaveJson(StringBuilder aBuilder) Parameters aBuilder StringBuilder Builder to add JSON structure to"
  },
  "api/UltraForce.Library.NetStandard.Interfaces.IUFLockable.html": {
    "href": "api/UltraForce.Library.NetStandard.Interfaces.IUFLockable.html",
    "title": "Interface IUFLockable | UltraForce.Library.NetStandard",
    "keywords": "Interface IUFLockable Namespace UltraForce.Library.NetStandard.Interfaces Assembly UltraForce.Library.NetStandard.dll IUFLockable can be implemented by objects that support some sort of locking. It is assumed that tha number of Unlock() calls must match the number of Lock() calls to unlock an object. public interface IUFLockable Methods Lock() Locks the object. int Lock() Returns int Lock counter Unlock() Unlocks the object. int Unlock() Returns int Lock counter"
  },
  "api/UltraForce.Library.NetStandard.Interfaces.IUFNotifyDataChanged.html": {
    "href": "api/UltraForce.Library.NetStandard.Interfaces.IUFNotifyDataChanged.html",
    "title": "Interface IUFNotifyDataChanged | UltraForce.Library.NetStandard",
    "keywords": "Interface IUFNotifyDataChanged Namespace UltraForce.Library.NetStandard.Interfaces Assembly UltraForce.Library.NetStandard.dll IUFNotifyDataChanged has a similar function as INotifyPropertyChanged except that its event argument contains more information and may contain information for multiple properties. public interface IUFNotifyDataChanged Events DataChanged This event is fired when the instance or one or more property changes. event EventHandler<UFDataChangedEventArgs> DataChanged Event Type EventHandler<UFDataChangedEventArgs>"
  },
  "api/UltraForce.Library.NetStandard.Interfaces.IUFProgress.html": {
    "href": "api/UltraForce.Library.NetStandard.Interfaces.IUFProgress.html",
    "title": "Interface IUFProgress | UltraForce.Library.NetStandard",
    "keywords": "Interface IUFProgress Namespace UltraForce.Library.NetStandard.Interfaces Assembly UltraForce.Library.NetStandard.dll A simple interface that objects can implement which have some form of progress. public interface IUFProgress Properties Progress Gets the current progress (0.0 .. 1.0) double Progress { get; } Property Value double"
  },
  "api/UltraForce.Library.NetStandard.Interfaces.IUFValidatePropertyValue.html": {
    "href": "api/UltraForce.Library.NetStandard.Interfaces.IUFValidatePropertyValue.html",
    "title": "Interface IUFValidatePropertyValue | UltraForce.Library.NetStandard",
    "keywords": "Interface IUFValidatePropertyValue Namespace UltraForce.Library.NetStandard.Interfaces Assembly UltraForce.Library.NetStandard.dll An interface that can be implemented by Objects that support validation of their properties. public interface IUFValidatePropertyValue Methods IsValidPropertyValue(string, object?) Checks if the value for a property is valid. bool IsValidPropertyValue(string aPropertyName, object? aValue) Parameters aPropertyName string Name of property aValue object Value to check Returns bool True if the value is valid, false otherwise"
  },
  "api/UltraForce.Library.NetStandard.Interfaces.IUFWeightedProgress.html": {
    "href": "api/UltraForce.Library.NetStandard.Interfaces.IUFWeightedProgress.html",
    "title": "Interface IUFWeightedProgress | UltraForce.Library.NetStandard",
    "keywords": "Interface IUFWeightedProgress Namespace UltraForce.Library.NetStandard.Interfaces Assembly UltraForce.Library.NetStandard.dll This interface extends the IUFProgress and adds a method to request the progress weight. Objects can implement this interface if there is an overall progress calculated; the ProgressWeight can be used if one objects progress is more important then another objects progress. public interface IUFWeightedProgress : IUFProgress Inherited Members IUFProgress.Progress Properties ProgressWeight Gets the progress weight. double ProgressWeight { get; } Property Value double"
  },
  "api/UltraForce.Library.NetStandard.Interfaces.html": {
    "href": "api/UltraForce.Library.NetStandard.Interfaces.html",
    "title": "Namespace UltraForce.Library.NetStandard.Interfaces | UltraForce.Library.NetStandard",
    "keywords": "Namespace UltraForce.Library.NetStandard.Interfaces Interfaces IUFAccessProperty Objects can implement this interface to access properties via simple method calls. IUFClearable Objects can implement this interface when then they can clear themselves. IUFJsonExport Objects can implement this interface to export their contents as JSON formatted data. IUFLockable IUFLockable can be implemented by objects that support some sort of locking. It is assumed that tha number of Unlock() calls must match the number of Lock() calls to unlock an object. IUFNotifyDataChanged IUFNotifyDataChanged has a similar function as INotifyPropertyChanged except that its event argument contains more information and may contain information for multiple properties. IUFProgress A simple interface that objects can implement which have some form of progress. IUFValidatePropertyValue An interface that can be implemented by Objects that support validation of their properties. IUFWeightedProgress This interface extends the IUFProgress and adds a method to request the progress weight. Objects can implement this interface if there is an overall progress calculated; the ProgressWeight can be used if one objects progress is more important then another objects progress."
  },
  "api/UltraForce.Library.NetStandard.Models.IUFModel.html": {
    "href": "api/UltraForce.Library.NetStandard.Models.IUFModel.html",
    "title": "Interface IUFModel | UltraForce.Library.NetStandard",
    "keywords": "Interface IUFModel Namespace UltraForce.Library.NetStandard.Models Assembly UltraForce.Library.NetStandard.dll IUFModel defines an interface with methods a model should implement. It combines IUFAccessProperty, IUFNotifyDataChanged and IUFValidatePropertyValue. public interface IUFModel : IUFAccessProperty, IUFNotifyDataChanged, IUFValidatePropertyValue Inherited Members IUFAccessProperty.GetPropertyValue(string) IUFAccessProperty.SetPropertyValue(string, object) IUFNotifyDataChanged.DataChanged IUFValidatePropertyValue.IsValidPropertyValue(string, object)"
  },
  "api/UltraForce.Library.NetStandard.Models.UFModel.Option.html": {
    "href": "api/UltraForce.Library.NetStandard.Models.UFModel.Option.html",
    "title": "Enum UFModel.Option | UltraForce.Library.NetStandard",
    "keywords": "Enum UFModel.Option Namespace UltraForce.Library.NetStandard.Models Assembly UltraForce.Library.NetStandard.dll Options for the UFModel public enum UFModel.Option Extension Methods UFEnumExtensions.GetAttribute<T>(Enum) UFEnumExtensions.GetDescription(Enum) UFEnumExtensions.GetName(Enum) UFEnumExtensions.GetShortDescription(Enum) UFEnumExtensions.Next<T>(T) UFEnumExtensions.Previous<T>(T) Fields IgnoreProperties = 1 Do not process any properties. This option is only checked when the first instance is created (since property meta data is shared between all instances of a certain subclass) IncludeFields = 2 Also process the fields. This option is only checked when the first instance is created (since property meta data is shared between all instances of a certain subclass) LockChildren = 0 Calls to Lock() and Unlock() also processes all properties and will call Lock() and Unlock() if a property is an object that implements IUFLockable. TrackChildChange = 3 Checks if a property implements IUFNotifyDataChanged. If it does, listen for changes and fire ChildChanged When this option is used, changes to property values should result in calls to Changed(string, object?, object?). This will happen automatically when using Assign<T>(ref T, T, string) or Set(object?, string)."
  },
  "api/UltraForce.Library.NetStandard.Models.UFModel.html": {
    "href": "api/UltraForce.Library.NetStandard.Models.UFModel.html",
    "title": "Class UFModel | UltraForce.Library.NetStandard",
    "keywords": "Class UFModel Namespace UltraForce.Library.NetStandard.Models Assembly UltraForce.Library.NetStandard.dll Base class for data classes. public class UFModel : IUFStorableObject, IUFJsonExport, IUFLockable, INotifyPropertyChanged, IUFClearable, IUFModel, IUFAccessProperty, IUFNotifyDataChanged, IUFValidatePropertyValue Inheritance object UFModel Implements IUFStorableObject IUFJsonExport IUFLockable INotifyPropertyChanged IUFClearable IUFModel IUFAccessProperty IUFNotifyDataChanged IUFValidatePropertyValue Derived UFModelDictionary<TKey, TValue> UFModelList<TValue> UFModelStorageWrapper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks Subclasses should define properties, the set part should use the Assign<T>(ref T, T, string) or Set(object?, string) method; so UFModel can fire DataChanged and PropertyChanged events when a property changes value. A subclass can use Assign<T>(ref T, T, string) in combination with a private variable or a subclass can use Set(object?, string) and Get<T>(Func<T>, string) or Get<T>(T, string) which will use an internally stored value. Using Get<T>(Func<T>, string) or Get<T>(T, string) will be slightly slower then directly referencing a private variable. It is possible to Lock() the instance; this prevent the class from firing events. While locked the class will keep track of any changed properties. When the class is unlocked with Unlock() a single DataChanged event might fire and multiple PropertyChanged events might fire. UFModel can be used to access properties and fields of another class by passing the instance to the constructor. Change events will only be fired when values are assigned trough SetPropertyValue(string, object?). If TrackChildChange option is used UFModel installs change listeners at all property values that implement IUFNotifyDataChanged. If the listener detects a change, UFModel will fire also a change event for that property. For correct working, Changed(string, object?, object?) must be called when ever the property gets assigned a new value so that listeners can be removed from the old value and added to the new value. The methods Assign<T>(ref T, T, string) and Set(object?, string) both call the Changed(string, object?, object?) whenever a new value is used. Annotate properties and fields with UFIgnoreAttribute to ignore them. These properties and fields can not be accessed trough their names and will be ignored with IO operations. UFModel also contains support for storing and retrieving itself from a UFKeyedStorage. Annotate properties and fields with UFIOIgnoreAttribute to prevent them from being saved. Annotate with UFIONameAttribute to set a different name to store data with. A subclass can also override CanSave(string, object?) to control which properties and fields gets saved. If UFDEBUG is defined a UFHtmlLog instance can be set via the static UseLog(UFHtmlLog) to log any changes to properties and fields which are annotated with UFLogAttribute. Validators added via calls to AddValidator(string, IUFValidateValue) or AddValidator(string, IUFValidateProperty) from within InitMeta() will be stored at meta level and will be shared by all instances. The DataChanged, ChildChanged and PropertyChanged use a weak reference to the object implementing the handler method. Constructors UFModel(object?, params Option[]) The constructor, creates an instance and processes all properties. If TrackChildChange is used, subclasses must call UpdateTrackedProperties() after assigning initial values to the properties. public UFModel(object? aData = null, params UFModel.Option[] anOptions) Parameters aData object An instance to manage the properties and fields of, when null UFModel uses itself. anOptions Option[] Array of options to use. UFModel(params Option[]) The constructor, creates an instance and processes all properties. If TrackChildChange is used, subclasses must call UpdateTrackedProperties() after assigning initial values to the properties. public UFModel(params UFModel.Option[] anOptions) Parameters anOptions Option[] Array of options to use. Methods AddValidator(string, IUFValidateProperty) Adds a property validator for a certain property. If this method is called from within the InitMeta() method, the validator is stored at meta level and shared by all property instances. protected void AddValidator(string aPropertyName, IUFValidateProperty aValidator) Parameters aPropertyName string A property name. aValidator IUFValidateProperty The validator to attach. AddValidator(string, IUFValidateValue) Adds a value validator for a certain property. If this method is called from within the InitMeta() method, the validator is stored at meta level and shared by all property instances. protected void AddValidator(string aPropertyName, IUFValidateValue aValidator) Parameters aPropertyName string A property name. aValidator IUFValidateValue The validator to attach. Assign<T>(ref T, T, string) Checks if a value is different; assigns a new value to a private var that represents a property and calls Changed(string, object?, object?) to fire an event. protected virtual bool Assign<T>(ref T aPrivateVar, T aNewValue, string aPropertyName = \"\") Parameters aPrivateVar T The private variable to get the current value from and assign the new value to. aNewValue T A new value. aPropertyName string A property name. This parameter is optional and does not need to be set when calling this method from inside the property setter. Returns bool true if the value has changed; otherwise false. Type Parameters T The type of the property. CanSave(string, object?) Check if a certain property can be saved. The default implementation checks if a default value has been set via DefaultValueAttribute and returns true if aValue is not equal to the default value. If no default value has been specified, the method just returns true. protected virtual bool CanSave(string aPropertyName, object? aValue) Parameters aPropertyName string A property name. aValue object Current property value. Returns bool true if the property and its value should be saved; otherwise, false. Changed() Fire a DataChanged event without specifying a property. If the instance is locked, the change gets stored and the event will fire when the instance gets unlocked. protected virtual void Changed() Changed(string, object?, object?) Fire a DataChanged event for a property. If the instance is locked, the changed info gets stored and it is used when the instance gets unlocked. protected virtual void Changed(string aPropertyName, object? anOldValue = null, object? aNewValue = null) Parameters aPropertyName string The property that changed. anOldValue object The old value. aNewValue object The new value. If null, the method uses GetPropertyValue(string) to get the current value. ChildHasChanged(object, string[], UFDataChangedEventArgs) This method is called when the TrackChildChange is used. The default implementation does nothing. protected virtual void ChildHasChanged(object aValue, string[] aPropertyNames, UFDataChangedEventArgs anEvent) Parameters aValue object Property value (is the sender of the event) aPropertyNames string[] One or more property names the value is assigned to anEvent UFDataChangedEventArgs The change event Clear() Clears the instance by calling Clear(bool) with true. public void Clear() Clear(bool) Initializes or clears the properties of the data structure to default values. The default implementation sets all the properties that have a DefaultValueAttribute attached to the value specified by that attribute. If the property has no DefaultValueAttribute attached the method will check if the property value has a method named Clear and will call that method if it does. As last step the method will call UpdateTrackedProperties() Subclasses can override this method to initialize or clear additional properties. If there are properties that implement IUFNotifyDataChanged and TrackChildChange is used, the clear method should make sure the instances are existing. When true call Changed(). public virtual void Clear(bool aCallChanged) Parameters aCallChanged bool CopyFrom(UFModel, bool) Copies the property values from another instance to this instance. This method just calls CopyTo(UFModel, bool) on aSource using this instance as the target. public virtual void CopyFrom(UFModel aSource, bool aCallChanged = true) Parameters aSource UFModel Source to copy from aCallChanged bool When true call Changed(string, object?, object?) for every property value that is different. CopyTo(UFModel, bool) Copies the property values from this instance to another instance. The method will use SetPropertyValue(string, object?, bool) and GetPropertyValue(string) to copy the values. public virtual void CopyTo(UFModel aTarget, bool aCallChanged = true) Parameters aTarget UFModel Target to copy to aCallChanged bool When true call Changed(string, object?, object?) for every property value that is different. GetDataChangedToken() The data changed token value will be used when firing a DataChanged event and can be used to match events to certain changes. The value is increased and copied every time when creating an UFDataChangedEventArgs instance. If the event handler changes the data resulting in new events the token will be increased again. public int GetDataChangedToken() Returns int GetPropertyNames() Gets the name of all the properties managed by UFModel. public string[] GetPropertyNames() Returns string[] The property names. GetPropertyType(string) Gets the type for a property. public Type GetPropertyType(string aPropertyName) Parameters aPropertyName string A property name. Returns Type The type. GetPropertyValue(string) Gets the value for a property. public object GetPropertyValue(string aPropertyName) Parameters aPropertyName string A property name. Returns object The value. GetPropertyValue<T>(string) Gets the value for a property casting it to a certain type. public T GetPropertyValue<T>(string aPropertyName) where T : struct Parameters aPropertyName string Name of property Returns T Value Type Parameters T Type to cast to Get<T>(Func<T>, string) Gets an internally stored value for a property. Use Set(object?, string) to store a value internally. protected virtual T Get<T>(Func<T> aFactory, string aPropertyName = \"\") Parameters aFactory Func<T> Factory function that returns a value to be used as default value. aPropertyName string A property name. This parameter is optional and does not need to be set when calling this method from inside the property getter. Returns T The value of the property Type Parameters T The type of the property Remarks Subclasses can override this method to retrieve the value from some other location. Get<T>(T, string) Gets an internally stored value for a property. Use Set(object?, string) to store a value internally. This method will call Get<T>(Func<T>, string) with a simple factory function that returns aDefaultValue. protected T Get<T>(T aDefaultValue, string aPropertyName = \"\") Parameters aDefaultValue T Default value to use when no value was stored. aPropertyName string A property name. This parameter is optional and does not need to be set when calling this method from inside the property getter. Returns T The value of the property Type Parameters T The type of the property HasChanged() Checks if one or more properties have changed value while the UFModel instance is locked. If the data instance is not locked, this method will always return false. public bool HasChanged() Returns bool true one or more properties have changed value; otherwise, false. HasOption(Option) Check if a certain option is enabled. protected bool HasOption(UFModel.Option anOption) Parameters anOption UFModel.Option Option to check Returns bool true if anOption is enabled; otherwise, false. HasProperty(string) Checks if the UFModel (sub)class contains a certain property. public bool HasProperty(string aName) Parameters aName string A property name. Returns bool true if the property exists; otherwise, false. InitMeta() This method gets called the first time an instance of certain UFModel subclass is created. This subclass can contain calls to AddValidator(string, IUFValidateValue) and AddValidator(string, IUFValidateProperty). The validators are stored in the meta and will be shared by all instances. The default implementation does nothing. protected virtual void InitMeta() IsValid() Checks if all property have valid values. This method calls IsValidPropertyValue(string, object?) for every property. public virtual bool IsValid() Returns bool true if all values are valid; false if not IsValidPropertyValue(string, object?) Validate a value for a certain property. The default implementation checks the registered validators. Subclasses can override this method to use alternative validation. public virtual bool IsValidPropertyValue(string aPropertyName, object? aValue) Parameters aPropertyName string Property to validate value for aValue object Value to validate. Returns bool true if the value is valid for the property; otherwise, false. LoadFromStorage(UFKeyedStorage) Gets data from a keyed storage. The method uses the UFIOIgnoreAttribute to determine if a property can be retrieved. The method supports the UFIONameAttribute. If a property is read only but implements the IUFStorableObject, it will get initialized from the storage via LoadFromStorage(UFKeyedStorage). public virtual void LoadFromStorage(UFKeyedStorage aStorage) Parameters aStorage UFKeyedStorage A storage to get data from. LoadFromStream(int, Stream) Loads the model from a stream after validating the version. public bool LoadFromStream(int aVersion, Stream aStream) Parameters aVersion int Version that should be matched aStream Stream Stream to read from Returns bool True if loaded successfully, false if the version is incorrect. Lock() Call lock to prevent DataChanged events from occurring until Unlock() is called. While the instances is locked, changes are still tracked and with the last unlock an event will be fired containing all changed properties. The number of lock and unlock calls must match before events are fired again. If LockChildren is set, the Lock() method of all properties that implement IUFLockable gets called as well. public virtual int Lock() Returns int Current lock counter LogNewValue(string, object?) Checks if UFLogAttribute has been set for the property. If it set, a log entry for the new value is added to the log set by UseLog(UFHtmlLog). This method only does something if UFDEBUG has been defined. [Conditional(\"UFDEBUG\")] protected void LogNewValue(string aPropertyName, object? aNewValue) Parameters aPropertyName string Property name to log value for aNewValue object Value to log OnChildChanged(object, UFDataChangedEventArgs) Triggers the ChildChanged event. protected virtual void OnChildChanged(object aSender, UFDataChangedEventArgs anEvent) Parameters aSender object Sender of the event anEvent UFDataChangedEventArgs Event data OnDataChanged(UFDataChangedEventArgs) Triggers the DataChanged event. protected virtual void OnDataChanged(UFDataChangedEventArgs anEvent) Parameters anEvent UFDataChangedEventArgs The event OnPropertyChanged(object, PropertyChangedEventArgs) Triggers the PropertyChanged event. protected virtual void OnPropertyChanged(object aSender, PropertyChangedEventArgs anEvent) Parameters aSender object Sender of event anEvent PropertyChangedEventArgs Event data ResetChanged() Clears the changed state of properties. A call to unlock after a call to this method will not generate a DataChanged event. Calling this method while the data instance is not locked, has no use. public void ResetChanged() ResetLock() Resets the internal lock counter, bringing the data class back to the unlocked state. No events are fired. If LockChildren is set, the ResetLock() method of all properties that implement UFModel instance gets called as well. public virtual void ResetLock() SaveJson() Create JSON formatted string from the data. public string SaveJson() Returns string JSON formatted string SaveJson(StringBuilder) Add data to StringBuilder using JSON formatting. The method uses the UFIOIgnoreAttribute annotation and CanSave(string, object?) to determine if a property can be saved. The method supports UFIONameAttribute annotation. public virtual void SaveJson(StringBuilder aBuilder) Parameters aBuilder StringBuilder A builder to add data to. SaveToStorage(UFKeyedStorage) Stores data in a keyed storage. The method uses the UFIOIgnoreAttribute and CanSave(string, object?) to determine if a property can be stored. The method supports the UFIONameAttribute. If a property implements IUFStorableObject, the data is stored via SaveToStorage(UFKeyedStorage). public virtual void SaveToStorage(UFKeyedStorage aStorage) Parameters aStorage UFKeyedStorage A storage to store data in. SaveToStream(int, Stream) Saves the model to a stream together with a version. public void SaveToStream(int aVersion, Stream aStream) Parameters aVersion int Version to save aStream Stream Stream to write to Remarks The method use UFDictionaryStorage to save the data. Set(object?, string) Checks if a value is different; if it is the method stores the value internally and calls Changed(string, object?, object?) to fire an event. Use Get<T>(T, string) or Get<T>(Func<T>, string) to retrieve the internally stored value. protected virtual bool Set(object? aNewValue, string aPropertyName = \"\") Parameters aNewValue object wA new value. aPropertyName string A property name. This parameter is optional and does not need to be set when calling this method from inside the property setter. Returns bool true if the value has changed; otherwise false. Remarks Subclasses can override this method to store the value at some other location. The default implementation either stores the value (the first time) or calls Assign<T>(ref T, T, string) to assign the new value. SetPropertyValue(string, object?) Sets the value of a property. If the value is different the Changed(string, object?, object?) method is called. public bool SetPropertyValue(string aPropertyName, object? aValue) Parameters aPropertyName string A property name. aValue object A value. Returns bool True if aValue is different from the current value and has been assigned. SetPropertyValue(string, object?, bool) Sets the value of a property. public bool SetPropertyValue(string aPropertyName, object? aValue, bool aCallChanged) Parameters aPropertyName string A property name. aValue object A value. aCallChanged bool When true call Changed(string, object?, object?) if the aValue is not equal to the current value of aPropertyName Returns bool ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object. Unlock() Unlock to allow DataChanged events. If any property changed while the data was locked, a DataChanged event is fired with all properties that changed. If LockChildren is set, the unlock method of all properties that implement IUFLockable instance gets called as well. public virtual int Unlock() Returns int Current lock counter UpdateTrackedProperties() If TrackChildChange has been set, this method will check all properties and updates listeners for properties that contain values that implement the IUFNotifyDataChanged. This method should be called from within the Clear() method if new instances are assigned to one or more properties directly without any calls to Changed(string, object?, object?). protected void UpdateTrackedProperties() UseLog(UFHtmlLog) Sets a log to use to log changes for properties that are annotated with UFLogAttribute. This method only does something if UFDEBUG has been defined. [Conditional(\"UFDEBUG\")] public static void UseLog(UFHtmlLog aLog) Parameters aLog UFHtmlLog Log to use Events ChildChanged This event is fired when TrackChildChange is used and one of the child properties that implements the IUFNotifyDataChanged fires an DataChanged event. The sender of this event will be the original child property instance that fired the event. public event EventHandler<UFDataChangedEventArgs> ChildChanged Event Type EventHandler<UFDataChangedEventArgs> DataChanged This event is fired when one or more property value changed. public event EventHandler<UFDataChangedEventArgs> DataChanged Event Type EventHandler<UFDataChangedEventArgs> PropertyChanged This event is fired when a property changes. If the data was locked and is unlocked, multiple events will fire (once for every property that is changed). public event PropertyChangedEventHandler PropertyChanged Event Type PropertyChangedEventHandler"
  },
  "api/UltraForce.Library.NetStandard.Models.UFModelDictionary-2.html": {
    "href": "api/UltraForce.Library.NetStandard.Models.UFModelDictionary-2.html",
    "title": "Class UFModelDictionary<TKey, TValue> | UltraForce.Library.NetStandard",
    "keywords": "Class UFModelDictionary<TKey, TValue> Namespace UltraForce.Library.NetStandard.Models Assembly UltraForce.Library.NetStandard.dll Implements a generic IDictionary adding support for certain UFModel.Option values and implementing various UFModel methods. public class UFModelDictionary<TKey, TValue> : UFModel, IUFStorableObject, IUFJsonExport, IUFLockable, INotifyPropertyChanged, IUFClearable, IUFModel, IUFAccessProperty, IUFNotifyDataChanged, IUFValidatePropertyValue, IDictionary<TKey, TValue>, ICollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>, IEnumerable where TKey : struct where TValue : struct Type Parameters TKey Implements a generic adding support for certain values and implementing various methods. TValue Implements a generic adding support for certain values and implementing various methods. Inheritance object UFModel UFModelDictionary<TKey, TValue> Implements IUFStorableObject IUFJsonExport IUFLockable INotifyPropertyChanged IUFClearable IUFModel IUFAccessProperty IUFNotifyDataChanged IUFValidatePropertyValue IDictionary<TKey, TValue> ICollection<KeyValuePair<TKey, TValue>> IEnumerable<KeyValuePair<TKey, TValue>> IEnumerable Inherited Members UFModel.UseLog(UFHtmlLog) UFModel.GetPropertyType(string) UFModel.ResetLock() UFModel.HasChanged() UFModel.ResetChanged() UFModel.GetPropertyNames() UFModel.HasProperty(string) UFModel.IsValid() UFModel.SetPropertyValue(string, object, bool) UFModel.CopyTo(UFModel, bool) UFModel.CopyFrom(UFModel, bool) UFModel.GetDataChangedToken() UFModel.SaveToStream(int, Stream) UFModel.LoadFromStream(int, Stream) UFModel.ToString() UFModel.GetPropertyValue<T>(string) UFModel.SaveJson() UFModel.Clear() UFModel.GetPropertyValue(string) UFModel.SetPropertyValue(string, object) UFModel.IsValidPropertyValue(string, object) UFModel.DataChanged UFModel.PropertyChanged UFModel.ChildChanged UFModel.InitMeta() UFModel.CanSave(string, object) UFModel.Changed() UFModel.Changed(string, object, object) UFModel.ChildHasChanged(object, string[], UFDataChangedEventArgs) UFModel.OnChildChanged(object, UFDataChangedEventArgs) UFModel.OnPropertyChanged(object, PropertyChangedEventArgs) UFModel.OnDataChanged(UFDataChangedEventArgs) UFModel.UpdateTrackedProperties() UFModel.AddValidator(string, IUFValidateValue) UFModel.AddValidator(string, IUFValidateProperty) UFModel.Assign<T>(ref T, T, string) UFModel.Set(object, string) UFModel.Get<T>(T, string) UFModel.Get<T>(Func<T>, string) UFModel.HasOption(UFModel.Option) UFModel.LogNewValue(string, object) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks UFModelDictionary<TKey, TValue> will fire a DataChanged event whenever the contents of the dictionary changes. If LockChildren option is set and TValue implements the IUFLockable interface, Lock() will also lock all items within the list. If TrackChildChange option is set and TValue implements IUFNotifyDataChanged, UFModelDictionary<TKey, TValue> will install change listeners with every stored value and will fire DataChanged, ChildChanged and PropertyChanged events if a value changes. UFModelDictionary<TKey, TValue> will make sure to install only one listener, even if the same value instance is added for multiple keys. Constructors UFModelDictionary(IDictionary<TKey, TValue>, params Option[]) Initializes a new instance of the UFModelDictionary<TKey, TValue> class. public UFModelDictionary(IDictionary<TKey, TValue> aDictionary, params UFModel.Option[] anOptions) Parameters aDictionary IDictionary<TKey, TValue> Initial dictionary values. anOptions Option[] An options. UFModelDictionary(int, params Option[]) Initializes a new instance of the UFModelDictionary<TKey, TValue> class. public UFModelDictionary(int aCapacity, params UFModel.Option[] anOptions) Parameters aCapacity int Initial capacity. anOptions Option[] An options. UFModelDictionary(params Option[]) Initializes a new instance of the UFModelDictionary<TKey, TValue> class. public UFModelDictionary(params UFModel.Option[] anOptions) Parameters anOptions Option[] The options UFModel.Option Properties Count Gets the number of elements contained in the ICollection<T>. public int Count { get; } Property Value int The number of elements contained in the ICollection<T>. IsReadOnly Gets a value indicating whether the ICollection<T> is read-only. public bool IsReadOnly { get; } Property Value bool true if the ICollection<T> is read-only; otherwise, false. this[TKey] Gets or sets the element with the specified key. public TValue this[TKey aKey] { get; set; } Parameters aKey TKey Property Value TValue The element with the specified key. Exceptions ArgumentNullException key is null. KeyNotFoundException The property is retrieved and key is not found. NotSupportedException The property is set and the IDictionary<TKey, TValue> is read-only. Keys Gets an ICollection<T> containing the keys of the IDictionary<TKey, TValue>. public ICollection<TKey> Keys { get; } Property Value ICollection<TKey> An ICollection<T> containing the keys of the object that implements IDictionary<TKey, TValue>. Values Gets an ICollection<T> containing the values in the IDictionary<TKey, TValue>. public ICollection<TValue> Values { get; } Property Value ICollection<TValue> An ICollection<T> containing the values in the object that implements IDictionary<TKey, TValue>. Methods Add(KeyValuePair<TKey, TValue>) Adds an item to the ICollection<T>. public void Add(KeyValuePair<TKey, TValue> anItem) Parameters anItem KeyValuePair<TKey, TValue> Exceptions NotSupportedException The ICollection<T> is read-only. Add(TKey, TValue) Adds an element with the provided key and value to the IDictionary<TKey, TValue>. public void Add(TKey aKey, TValue aValue) Parameters aKey TKey aValue TValue Exceptions ArgumentNullException key is null. ArgumentException An element with the same key already exists in the IDictionary<TKey, TValue>. NotSupportedException The IDictionary<TKey, TValue> is read-only. Clear(bool) Initializes or clears the properties of the data structure to default values. The default implementation sets all the properties that have a DefaultValueAttribute attached to the value specified by that attribute. If the property has no DefaultValueAttribute attached the method will check if the property value has a method named Clear and will call that method if it does. As last step the method will call UpdateTrackedProperties() Subclasses can override this method to initialize or clear additional properties. If there are properties that implement IUFNotifyDataChanged and TrackChildChange is used, the clear method should make sure the instances are existing. When true call Changed(). public override void Clear(bool aCallChanged) Parameters aCallChanged bool Contains(KeyValuePair<TKey, TValue>) Determines whether the ICollection<T> contains a specific value. public bool Contains(KeyValuePair<TKey, TValue> anItem) Parameters anItem KeyValuePair<TKey, TValue> Returns bool true if item is found in the ICollection<T>; otherwise, false. ContainsKey(TKey) Determines whether the IDictionary<TKey, TValue> contains an element with the specified key. public bool ContainsKey(TKey aKey) Parameters aKey TKey Returns bool true if the IDictionary<TKey, TValue> contains an element with the key; otherwise, false. Exceptions ArgumentNullException key is null. CopyTo(KeyValuePair<TKey, TValue>[], int) Copies the elements of the ICollection<T> to an Array, starting at a particular Array index. public void CopyTo(KeyValuePair<TKey, TValue>[] anArray, int anArrayIndex) Parameters anArray KeyValuePair<TKey, TValue>[] anArrayIndex int Exceptions ArgumentNullException array is null. ArgumentOutOfRangeException arrayIndex is less than 0. ArgumentException The number of elements in the source ICollection<T> is greater than the available space from arrayIndex to the end of the destination array. GetEnumerator() Returns an enumerator that iterates through a collection. public IEnumerator GetEnumerator() Returns IEnumerator An IEnumerator object that can be used to iterate through the collection. LoadFromStorage(UFKeyedStorage) Loads the keys and values from the storage. public override void LoadFromStorage(UFKeyedStorage aStorage) Parameters aStorage UFKeyedStorage Storage to save the data to Lock() If LockChildren is set, call Lock() on all non-null items that implement IUFLockable. public override int Lock() Returns int Remove(KeyValuePair<TKey, TValue>) Removes the first occurrence of a specific object from the ICollection<T>. public bool Remove(KeyValuePair<TKey, TValue> anItem) Parameters anItem KeyValuePair<TKey, TValue> Returns bool true if item was successfully removed from the ICollection<T>; otherwise, false. This method also returns false if item is not found in the original ICollection<T>. Exceptions NotSupportedException The ICollection<T> is read-only. Remove(TKey) Removes the element with the specified key from the IDictionary<TKey, TValue>. public bool Remove(TKey aKey) Parameters aKey TKey Returns bool true if the element is successfully removed; otherwise, false. This method also returns false if key was not found in the original IDictionary<TKey, TValue>. Exceptions ArgumentNullException key is null. NotSupportedException The IDictionary<TKey, TValue> is read-only. SaveJson(StringBuilder) Save data as object definition. public override void SaveJson(StringBuilder aBuilder) Parameters aBuilder StringBuilder A builder to add data to. SaveToStorage(UFKeyedStorage) Saves the keys and values in the storage. public override void SaveToStorage(UFKeyedStorage aStorage) Parameters aStorage UFKeyedStorage Storage to save the data to TryGetValue(TKey, out TValue) Gets the value associated with the specified key. public bool TryGetValue(TKey aKey, out TValue aValue) Parameters aKey TKey aValue TValue Returns bool true if the object that implements IDictionary<TKey, TValue> contains an element with the specified key; otherwise, false. Exceptions ArgumentNullException key is null. Unlock() If LockChildren is set, call Unlock() on all non-null items that implement IUFLockable. public override int Unlock() Returns int"
  },
  "api/UltraForce.Library.NetStandard.Models.UFModelList-1.html": {
    "href": "api/UltraForce.Library.NetStandard.Models.UFModelList-1.html",
    "title": "Class UFModelList<TValue> | UltraForce.Library.NetStandard",
    "keywords": "Class UFModelList<TValue> Namespace UltraForce.Library.NetStandard.Models Assembly UltraForce.Library.NetStandard.dll Implements a generic IList adding support for certain UFModel.Option values and implementing various UFModel methods. public class UFModelList<TValue> : UFModel, IUFStorableObject, IUFJsonExport, IUFLockable, INotifyPropertyChanged, IUFClearable, IUFModel, IUFAccessProperty, IUFNotifyDataChanged, IUFValidatePropertyValue, IList<TValue>, ICollection<TValue>, IEnumerable<TValue>, IEnumerable Type Parameters TValue Implements a generic adding support for certain values and implementing various methods. Inheritance object UFModel UFModelList<TValue> Implements IUFStorableObject IUFJsonExport IUFLockable INotifyPropertyChanged IUFClearable IUFModel IUFAccessProperty IUFNotifyDataChanged IUFValidatePropertyValue IList<TValue> ICollection<TValue> IEnumerable<TValue> IEnumerable Derived UFModelObservableList<TValue> Inherited Members UFModel.UseLog(UFHtmlLog) UFModel.GetPropertyType(string) UFModel.ResetLock() UFModel.HasChanged() UFModel.ResetChanged() UFModel.GetPropertyNames() UFModel.HasProperty(string) UFModel.IsValid() UFModel.SetPropertyValue(string, object, bool) UFModel.CopyTo(UFModel, bool) UFModel.CopyFrom(UFModel, bool) UFModel.GetDataChangedToken() UFModel.SaveToStream(int, Stream) UFModel.LoadFromStream(int, Stream) UFModel.ToString() UFModel.GetPropertyValue<T>(string) UFModel.SaveJson() UFModel.Clear() UFModel.GetPropertyValue(string) UFModel.SetPropertyValue(string, object) UFModel.IsValidPropertyValue(string, object) UFModel.DataChanged UFModel.PropertyChanged UFModel.ChildChanged UFModel.InitMeta() UFModel.CanSave(string, object) UFModel.Changed() UFModel.Changed(string, object, object) UFModel.ChildHasChanged(object, string[], UFDataChangedEventArgs) UFModel.OnChildChanged(object, UFDataChangedEventArgs) UFModel.OnPropertyChanged(object, PropertyChangedEventArgs) UFModel.OnDataChanged(UFDataChangedEventArgs) UFModel.UpdateTrackedProperties() UFModel.AddValidator(string, IUFValidateValue) UFModel.AddValidator(string, IUFValidateProperty) UFModel.Assign<T>(ref T, T, string) UFModel.Set(object, string) UFModel.Get<T>(T, string) UFModel.Get<T>(Func<T>, string) UFModel.HasOption(UFModel.Option) UFModel.LogNewValue(string, object) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks UFModelList<TValue> will fire a DataChanged event whenever the contents of the list changes. If LockChildren option is set and TValue implements the IUFLockable interface, Lock() will also lock all items within the list. If TrackChildChange option is set and TValue implements IUFNotifyDataChanged, UFModelList<TValue> will install change listeners with every item and will fire DataChanged, ChildChanged and PropertyChanged events if an item changes. UFModelList<TValue> will make sure to install only one listener, even if the same instance is added multiple times. Constructors UFModelList(IEnumerable<TValue>, params Option[]) Initializes a new instance of the UFModelList<TValue> class. public UFModelList(IEnumerable<TValue> aCollection, params UFModel.Option[] anOptions) Parameters aCollection IEnumerable<TValue> An initial collection to fill list with anOptions Option[] UFModel.Option UFModelList(int, params Option[]) Initializes a new instance of the UFModelList<TValue> class. public UFModelList(int aCapacity, params UFModel.Option[] anOptions) Parameters aCapacity int Initial list capacity. anOptions Option[] UFModel.Option UFModelList(params Option[]) Initializes a new instance of the UFModelList<TValue> class. public UFModelList(params UFModel.Option[] anOptions) Parameters anOptions Option[] UFModel.Option Properties Capacity The capacity of the list (see Capacity) public int Capacity { get; set; } Property Value int Count Get the number of items public int Count { get; } Property Value int The number of items IsReadOnly Get a value indicating the list is read only; this property always returns false. public bool IsReadOnly { get; } Property Value bool true if the list is read only; otherwise, false. this[int] Access an item at an index. When assigning a new value, the instance will fire an DataChanged event. public TValue this[int anIndex] { get; set; } Parameters anIndex int Index in list. Property Value TValue Methods Add(TValue) Add the item to the end of the list. Will fire an DataChanged event. public void Add(TValue anItem) Parameters anItem TValue Item to add. AddRange(IEnumerable<TValue>) Adds another collection to the list. public virtual void AddRange(IEnumerable<TValue> aCollection) Parameters aCollection IEnumerable<TValue> Collection to add Clear(bool) Initializes or clears the properties of the data structure to default values. The default implementation sets all the properties that have a DefaultValueAttribute attached to the value specified by that attribute. If the property has no DefaultValueAttribute attached the method will check if the property value has a method named Clear and will call that method if it does. As last step the method will call UpdateTrackedProperties() Subclasses can override this method to initialize or clear additional properties. If there are properties that implement IUFNotifyDataChanged and TrackChildChange is used, the clear method should make sure the instances are existing. When true call Changed(). public override void Clear(bool aCallChanged) Parameters aCallChanged bool Contains(TValue) Check if the list contains the item. public bool Contains(TValue anItem) Parameters anItem TValue true if the list contains the item, false if not. Returns bool CopyTo(int, TValue[], int, int) Copies part of the list to an array. public void CopyTo(int anIndex, TValue[] anArray, int anArrayIndex, int aCount) Parameters anIndex int Starting index in list anArray TValue[] An array to copy to. anArrayIndex int Starting index in the array. aCount int Number of elements. CopyTo(TValue[]) Copies list to an array. public void CopyTo(TValue[] anArray) Parameters anArray TValue[] An array to copy to. CopyTo(TValue[], int) Copies list to an array. public void CopyTo(TValue[] anArray, int anArrayIndex) Parameters anArray TValue[] Array. anArrayIndex int Start in anArray to copy to Find(Predicate<TValue>) Find first value that matches aMatch. public TValue Find(Predicate<TValue> aMatch) Parameters aMatch Predicate<TValue> Match predicate Returns TValue An instance or null if no match was found FindAll(Predicate<TValue>) Find all values that match aMatch. public List<TValue> FindAll(Predicate<TValue> aMatch) Parameters aMatch Predicate<TValue> Match predicate Returns List<TValue> A list instance containing all the values. FindIndex(int, int, Predicate<TValue>) Find index of first value that matches aMatch. public int FindIndex(int aStart, int aCount, Predicate<TValue> aMatch) Parameters aStart int Index to searching from. aCount int Max number of values to test. aMatch Predicate<TValue> Match predicate Returns int The index or -1 if not found FindIndex(int, Predicate<TValue>) Find index of first value that matches aMatch. public int FindIndex(int aStart, Predicate<TValue> aMatch) Parameters aStart int Index to searching from. aMatch Predicate<TValue> Match predicate Returns int The index or -1 if not found FindIndex(Predicate<TValue>) Find index of first value that matches aMatch. public int FindIndex(Predicate<TValue> aMatch) Parameters aMatch Predicate<TValue> Match predicate Returns int The index or -1 if not found FindLast(Predicate<TValue>) Find last value that matches aMatch. public TValue FindLast(Predicate<TValue> aMatch) Parameters aMatch Predicate<TValue> Match predicate Returns TValue An instance or null if no match was found FindLastIndex(int, int, Predicate<TValue>) Find index of last value that matches aMatch. public int FindLastIndex(int aStart, int aCount, Predicate<TValue> aMatch) Parameters aStart int Index to searching from (backwards, so Index, Index-1, Index-2, etc). aCount int Max number of values to test. aMatch Predicate<TValue> Match predicate Returns int The index or -1 if not found FindLastIndex(int, Predicate<TValue>) Find index of last value that matches aMatch. public int FindLastIndex(int aStart, Predicate<TValue> aMatch) Parameters aStart int Index to searching from (backwards, so Index, Index-1, Index-2, etc). aMatch Predicate<TValue> Match predicate Returns int The index or -1 if not found FindLastIndex(Predicate<TValue>) Find index of last value that matches aMatch. public int FindLastIndex(Predicate<TValue> aMatch) Parameters aMatch Predicate<TValue> Match predicate Returns int The index or -1 if not found ForEach(Action<TValue>) Perform action on each item. public void ForEach(Action<TValue> anAction) Parameters anAction Action<TValue> An action for specific type. GetEnumerator() Gets the enumerator. public IEnumerator GetEnumerator() Returns IEnumerator The enumerator. GetRange(int, int) Gets a shallow copy of part of the list. public IList<TValue> GetRange(int aStart, int aCount) Parameters aStart int start of part aCount int number of items Returns IList<TValue> copy IndexOf(TValue) Get first index of item. public int IndexOf(TValue anItem) Parameters anItem TValue The item to get the index for Returns int The index or -1 if not found. IndexOf(TValue, int) Return the first index of a value starting from a certain position. public int IndexOf(TValue aValue, int aStart) Parameters aValue TValue The value to get the index of aStart int Starting position Returns int The index of the item or -1 if not found. IndexOf(TValue, int, int) Return the index of a value within a certain range. public int IndexOf(TValue aValue, int aStart, int aCount) Parameters aValue TValue The value to get the index of aStart int A starting position. aCount int Number of items to check. Returns int The index of the item or -1 if not found. Insert(int, TValue) Insert item at specified index. Will fire an DataChanged event. public void Insert(int anIndex, TValue anItem) Parameters anIndex int Index to insert at (must be a value between 0 and Count) anItem TValue Item to insert LoadFromStorage(UFKeyedStorage) Gets the items from a keyed storage. public override void LoadFromStorage(UFKeyedStorage aStorage) Parameters aStorage UFKeyedStorage A storage to get data from. Lock() If LockChildren is set, call Lock() on all non-null items that implement IUFLockable. public override int Lock() Returns int Remove(TValue) Remove the first occurrence of an item. public bool Remove(TValue anItem) Parameters anItem TValue Item to remove Returns bool true if item was removed, false if item could not be found. RemoveAt(int) Remove item at index. Will fire an DataChanged event. public void RemoveAt(int anIndex) Parameters anIndex int Index to remove item at. RemoveValues() Remove the values from internal list and call ValueRemoved in case of children are being tracked. protected virtual void RemoveValues() SaveJson(StringBuilder) Save the items as an array. This method does not save any other property. public override void SaveJson(StringBuilder aBuilder) Parameters aBuilder StringBuilder A builder to add data to. SaveToStorage(UFKeyedStorage) Stores the items in a keyed storage. public override void SaveToStorage(UFKeyedStorage aStorage) Parameters aStorage UFKeyedStorage A storage to store data in. Shuffle() Shuffle the elements inside the list. public void Shuffle() Shuffle(int, int) Shuffle a part of the list. public virtual void Shuffle(int aStart, int aCount) Parameters aStart int Start index. aCount int Number of elements. ToArray() Convert the list to an array. public TValue[] ToArray() Returns TValue[] Array of objects of type TValue containing the items Unlock() If LockChildren is set, call Unlock() on all non-null items that implement IUFLockable. public override int Unlock() Returns int ValueAdded(int, TValue, bool, bool, TValue?) A value has been added for a specific key. protected virtual void ValueAdded(int anIndex, TValue aValue, bool aFireChanged, bool anAdded, TValue? anOldValue = default) Parameters anIndex int The index the item has been added for. aValue TValue An item. aFireChanged bool true fire changed events, false not anAdded bool True if value was added, false if value was replaced anOldValue TValue Value that is getting replaced (only used if anAction is Replace). Can be null else. ValueRemoved(int, TValue, bool) A value has been removed for a specific key. protected virtual void ValueRemoved(int anIndex, TValue aValue, bool aFireChanged) Parameters anIndex int The index of the item has been removed for. aValue TValue An item. aFireChanged bool true fire DataChanged event, false not"
  },
  "api/UltraForce.Library.NetStandard.Models.UFModelObservableList-1.html": {
    "href": "api/UltraForce.Library.NetStandard.Models.UFModelObservableList-1.html",
    "title": "Class UFModelObservableList<TValue> | UltraForce.Library.NetStandard",
    "keywords": "Class UFModelObservableList<TValue> Namespace UltraForce.Library.NetStandard.Models Assembly UltraForce.Library.NetStandard.dll Extends UFModelList<TValue> and implements the INotifyCollectionChanged event. public class UFModelObservableList<TValue> : UFModelList<TValue>, IUFStorableObject, IUFJsonExport, IUFLockable, INotifyPropertyChanged, IUFClearable, IUFModel, IUFAccessProperty, IUFNotifyDataChanged, IUFValidatePropertyValue, IList<TValue>, ICollection<TValue>, IEnumerable<TValue>, IEnumerable, INotifyCollectionChanged Type Parameters TValue Extends and implements the event. Inheritance object UFModel UFModelList<TValue> UFModelObservableList<TValue> Implements IUFStorableObject IUFJsonExport IUFLockable INotifyPropertyChanged IUFClearable IUFModel IUFAccessProperty IUFNotifyDataChanged IUFValidatePropertyValue IList<TValue> ICollection<TValue> IEnumerable<TValue> IEnumerable INotifyCollectionChanged Inherited Members UFModelList<TValue>.Clear(bool) UFModelList<TValue>.Shuffle() UFModelList<TValue>.Find(Predicate<TValue>) UFModelList<TValue>.FindLast(Predicate<TValue>) UFModelList<TValue>.FindIndex(Predicate<TValue>) UFModelList<TValue>.FindIndex(int, Predicate<TValue>) UFModelList<TValue>.FindIndex(int, int, Predicate<TValue>) UFModelList<TValue>.FindLastIndex(Predicate<TValue>) UFModelList<TValue>.FindLastIndex(int, Predicate<TValue>) UFModelList<TValue>.FindLastIndex(int, int, Predicate<TValue>) UFModelList<TValue>.FindAll(Predicate<TValue>) UFModelList<TValue>.IndexOf(TValue, int) UFModelList<TValue>.IndexOf(TValue, int, int) UFModelList<TValue>.ForEach(Action<TValue>) UFModelList<TValue>.Lock() UFModelList<TValue>.Unlock() UFModelList<TValue>.SaveToStorage(UFKeyedStorage) UFModelList<TValue>.LoadFromStorage(UFKeyedStorage) UFModelList<TValue>.SaveJson(StringBuilder) UFModelList<TValue>.CopyTo(TValue[]) UFModelList<TValue>.CopyTo(int, TValue[], int, int) UFModelList<TValue>.ToArray() UFModelList<TValue>.GetRange(int, int) UFModelList<TValue>.Capacity UFModelList<TValue>.IndexOf(TValue) UFModelList<TValue>.Insert(int, TValue) UFModelList<TValue>.RemoveAt(int) UFModelList<TValue>.this[int] UFModelList<TValue>.GetEnumerator() UFModelList<TValue>.Add(TValue) UFModelList<TValue>.Contains(TValue) UFModelList<TValue>.CopyTo(TValue[], int) UFModelList<TValue>.Remove(TValue) UFModelList<TValue>.Count UFModelList<TValue>.IsReadOnly UFModel.UseLog(UFHtmlLog) UFModel.GetPropertyType(string) UFModel.ResetLock() UFModel.HasChanged() UFModel.ResetChanged() UFModel.GetPropertyNames() UFModel.HasProperty(string) UFModel.IsValid() UFModel.SetPropertyValue(string, object, bool) UFModel.CopyTo(UFModel, bool) UFModel.CopyFrom(UFModel, bool) UFModel.GetDataChangedToken() UFModel.SaveToStream(int, Stream) UFModel.LoadFromStream(int, Stream) UFModel.ToString() UFModel.GetPropertyValue<T>(string) UFModel.SaveJson() UFModel.Clear() UFModel.GetPropertyValue(string) UFModel.SetPropertyValue(string, object) UFModel.IsValidPropertyValue(string, object) UFModel.DataChanged UFModel.PropertyChanged UFModel.ChildChanged UFModel.InitMeta() UFModel.CanSave(string, object) UFModel.Changed() UFModel.Changed(string, object, object) UFModel.ChildHasChanged(object, string[], UFDataChangedEventArgs) UFModel.OnChildChanged(object, UFDataChangedEventArgs) UFModel.OnPropertyChanged(object, PropertyChangedEventArgs) UFModel.OnDataChanged(UFDataChangedEventArgs) UFModel.UpdateTrackedProperties() UFModel.AddValidator(string, IUFValidateValue) UFModel.AddValidator(string, IUFValidateProperty) UFModel.Assign<T>(ref T, T, string) UFModel.Set(object, string) UFModel.Get<T>(T, string) UFModel.Get<T>(Func<T>, string) UFModel.HasOption(UFModel.Option) UFModel.LogNewValue(string, object) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks The CollectionChanged uses weak references to the instances implementing the handler methods. Constructors UFModelObservableList(IEnumerable<TValue>, params Option[]) Initializes a new instance of the UFModelObservableList<TValue> class. public UFModelObservableList(IEnumerable<TValue> aCollection, params UFModel.Option[] anOptions) Parameters aCollection IEnumerable<TValue> An initial collection to fill list with anOptions Option[] UFModel.Option UFModelObservableList(int, params Option[]) Initializes a new instance of the UFModelObservableList<TValue> class. public UFModelObservableList(int aCapacity, params UFModel.Option[] anOptions) Parameters aCapacity int Initial list capacity. anOptions Option[] UFModel.Option UFModelObservableList(params Option[]) Initializes a new instance of the UFModelObservableList<TValue>. class. public UFModelObservableList(params UFModel.Option[] anOptions) Parameters anOptions Option[] UFModel.Option Methods AddRange(IEnumerable<TValue>) Adds another collection to the list. public override void AddRange(IEnumerable<TValue> aCollection) Parameters aCollection IEnumerable<TValue> Collection to add RemoveValues() Remove the values from internal list and call ValueRemoved in case of children are being tracked. protected override void RemoveValues() Shuffle(int, int) Shuffle a part of the list. public override void Shuffle(int aStart, int aCount) Parameters aStart int Start index. aCount int Number of elements. ValueAdded(int, TValue, bool, bool, TValue?) A value has been added for a specific key. protected override void ValueAdded(int anIndex, TValue aValue, bool aFireChanged, bool anAdded, TValue? anOldValue = default) Parameters anIndex int The index the item has been added for. aValue TValue An item. aFireChanged bool true fire changed events, false not anAdded bool True if value was added, false if value was replaced anOldValue TValue Value that is getting replaced (only used if anAction is Replace). Can be null else. ValueRemoved(int, TValue, bool) A value has been removed for a specific key. protected override void ValueRemoved(int anIndex, TValue aValue, bool aFireChanged) Parameters anIndex int The index of the item has been removed for. aValue TValue An item. aFireChanged bool true fire DataChanged event, false not Events CollectionChanged Occurs when the collection changes. public event NotifyCollectionChangedEventHandler CollectionChanged Event Type NotifyCollectionChangedEventHandler"
  },
  "api/UltraForce.Library.NetStandard.Models.UFModelStorageWrapper.html": {
    "href": "api/UltraForce.Library.NetStandard.Models.UFModelStorageWrapper.html",
    "title": "Class UFModelStorageWrapper | UltraForce.Library.NetStandard",
    "keywords": "Class UFModelStorageWrapper Namespace UltraForce.Library.NetStandard.Models Assembly UltraForce.Library.NetStandard.dll UFModelStorageWrapper can be used to create models that map their properties directly to a storage. Use Get<T>(Func<T>, string) to get a property value from the storage and use Set(object?, string) to store a property value to the storage. The class handles properties that implement IUFNotifyDataChanged. The class uses TrackChildChange and will update the object in storage whenever it changes. If a property is a (sub)class of UFModelStorageWrapper the class will call SetParentKeyPrefix(string) whenever a new instance is created or assigned. The class will never store the value itself in the storage. The class assumes the property value will take care of storing/retrieving itself. This allows for a UFModelStorageWrapper subclass to be used for multiple properties without key name conflicts. Properties that implement IUFStorableObject are treated slightly different. The first time a property's value is referenced and none exists, a new instance is created and its data is loaded from the wrapped UFKeyedStorage using GetStorableObject(string, IUFStorableObject). public class UFModelStorageWrapper : UFModel, IUFStorableObject, IUFJsonExport, IUFLockable, INotifyPropertyChanged, IUFClearable, IUFModel, IUFAccessProperty, IUFNotifyDataChanged, IUFValidatePropertyValue Inheritance object UFModel UFModelStorageWrapper Implements IUFStorableObject IUFJsonExport IUFLockable INotifyPropertyChanged IUFClearable IUFModel IUFAccessProperty IUFNotifyDataChanged IUFValidatePropertyValue Inherited Members UFModel.UseLog(UFHtmlLog) UFModel.GetPropertyType(string) UFModel.ResetLock() UFModel.HasChanged() UFModel.ResetChanged() UFModel.GetPropertyNames() UFModel.HasProperty(string) UFModel.IsValid() UFModel.SetPropertyValue(string, object, bool) UFModel.CopyTo(UFModel, bool) UFModel.CopyFrom(UFModel, bool) UFModel.GetDataChangedToken() UFModel.SaveToStream(int, Stream) UFModel.LoadFromStream(int, Stream) UFModel.ToString() UFModel.GetPropertyValue<T>(string) UFModel.SaveJson() UFModel.Clear() UFModel.Lock() UFModel.Unlock() UFModel.GetPropertyValue(string) UFModel.SetPropertyValue(string, object) UFModel.IsValidPropertyValue(string, object) UFModel.DataChanged UFModel.SaveToStorage(UFKeyedStorage) UFModel.LoadFromStorage(UFKeyedStorage) UFModel.SaveJson(StringBuilder) UFModel.PropertyChanged UFModel.ChildChanged UFModel.InitMeta() UFModel.CanSave(string, object) UFModel.Changed() UFModel.Changed(string, object, object) UFModel.OnChildChanged(object, UFDataChangedEventArgs) UFModel.OnPropertyChanged(object, PropertyChangedEventArgs) UFModel.OnDataChanged(UFDataChangedEventArgs) UFModel.UpdateTrackedProperties() UFModel.AddValidator(string, IUFValidateValue) UFModel.AddValidator(string, IUFValidateProperty) UFModel.Assign<T>(ref T, T, string) UFModel.Get<T>(T, string) UFModel.HasOption(UFModel.Option) UFModel.LogNewValue(string, object) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors UFModelStorageWrapper(UFKeyedStorage, string) Constructs an instance UFModelStorageWrapper. protected UFModelStorageWrapper(UFKeyedStorage aStorage, string aPrefix = \"\") Parameters aStorage UFKeyedStorage UFKeyedStorage instance to wrap aPrefix string Prefix used to create storage key names from property names. Methods ChildHasChanged(object, string[], UFDataChangedEventArgs) This method is called when the TrackChildChange is used. The default implementation does nothing. protected override void ChildHasChanged(object aValue, string[] aPropertyNames, UFDataChangedEventArgs anEvent) Parameters aValue object Property value (is the sender of the event) aPropertyNames string[] One or more property names the value is assigned to anEvent UFDataChangedEventArgs The change event Clear(bool) Initializes or clears the properties of the data structure to default values. The default implementation sets all the properties that have a DefaultValueAttribute attached to the value specified by that attribute. If the property has no DefaultValueAttribute attached the method will check if the property value has a method named Clear and will call that method if it does. As last step the method will call UpdateTrackedProperties() Subclasses can override this method to initialize or clear additional properties. If there are properties that implement IUFNotifyDataChanged and TrackChildChange is used, the clear method should make sure the instances are existing. When true call Changed(). public override void Clear(bool aCallChanged) Parameters aCallChanged bool DeleteFromStorage(string) Removes a value from the settings. It assigns null as new property value. protected void DeleteFromStorage(string aPropertyName) Parameters aPropertyName string Name of property to remove GetStorageKey(string) Gets key for storage. The default implementation prefixes the key with the value from SetParentKeyPrefix(string) and the prefix passed with the constructor. protected virtual string GetStorageKey(string aName) Parameters aName string Name to convert to unique key Returns string Unique key Get<T>(Func<T>, string) Gets a value from storage. protected override T Get<T>(Func<T> aFactory, string aPropertyName = \"\") Parameters aFactory Func<T> Default value to use when the value is not available in the storage aPropertyName string Name of property used as storage key Returns T Value from storage or aDefault Type Parameters T Type of property Remarks The first time this method is called for a type that is implementing IUFStorableObject the method will create the object with aFactory and then will load it from the storage. Subsequent calls just return the stored instance. Set(object?, string) Sets a value in storage. Will fire a changed event if value is new. protected override bool Set(object? aValue, string aPropertyName = \"\") Parameters aValue object Value to store. If a value is null, it will get deleted from the storage. aPropertyName string Name of property used as storage key Returns bool True if new value got stored; false if the value already stored is equal to aValue. Remarks If the value assigned is a subclass of UFModelStorageWrapper, a call will be made to SetParentKeyPrefix(string). SetParentKeyPrefix(string) This method is called when this instance is assigned to a property in a parent UFModelStorageWrapper instance. It stores a prefix that is used when getting the storage key via GetStorageKey(string). The default implementation just stores the key. protected virtual void SetParentKeyPrefix(string aKeyPrefix) Parameters aKeyPrefix string Prefix to use"
  },
  "api/UltraForce.Library.NetStandard.Models.UFPropertyBinding.html": {
    "href": "api/UltraForce.Library.NetStandard.Models.UFPropertyBinding.html",
    "title": "Class UFPropertyBinding | UltraForce.Library.NetStandard",
    "keywords": "Class UFPropertyBinding Namespace UltraForce.Library.NetStandard.Models Assembly UltraForce.Library.NetStandard.dll This class keeps two properties synchronized, whenever one of the properties changes value UFPropertyBinding will update the other property. public class UFPropertyBinding Inheritance object UFPropertyBinding Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UFPropertyBinding(IUFModel, string, IUFModel, string) Constructs an instance of UFPropertyBinding. public UFPropertyBinding(IUFModel aFirstData, string aFirstPropertyName, IUFModel aSecondData, string aSecondPropertyName) Parameters aFirstData IUFModel First data aFirstPropertyName string Name of property aSecondData IUFModel Second data aSecondPropertyName string Name of property Properties FirstData First object that implements IUFModel public IUFModel? FirstData { get; set; } Property Value IUFModel FirstPropertyName Name of property in FirstData public string FirstPropertyName { get; set; } Property Value string SecondData Second object that implements IUFModel public IUFModel? SecondData { get; set; } Property Value IUFModel SecondPropertyName Name of property in SecondData public string SecondPropertyName { get; set; } Property Value string Methods Unbind() Unbinds the binding by clearing reference to both UFModel instances. public void Unbind()"
  },
  "api/UltraForce.Library.NetStandard.Models.Validators.IUFValidateProperty.html": {
    "href": "api/UltraForce.Library.NetStandard.Models.Validators.IUFValidateProperty.html",
    "title": "Interface IUFValidateProperty | UltraForce.Library.NetStandard",
    "keywords": "Interface IUFValidateProperty Namespace UltraForce.Library.NetStandard.Models.Validators Assembly UltraForce.Library.NetStandard.dll A simple interface to validate a value of a property. public interface IUFValidateProperty Remarks This interface can be implemented by validators that need access to data instance containing the property (for example if other property values need to be tested as well). Methods IsValid(string, IUFModel) Determines if the value is valid. bool IsValid(string aPropertyName, IUFModel aData) Parameters aPropertyName string Name of property to validate aData IUFModel Data where to retrieve the property value. Returns bool true if the valid is valid; otherwise, false."
  },
  "api/UltraForce.Library.NetStandard.Models.Validators.IUFValidateValue.html": {
    "href": "api/UltraForce.Library.NetStandard.Models.Validators.IUFValidateValue.html",
    "title": "Interface IUFValidateValue | UltraForce.Library.NetStandard",
    "keywords": "Interface IUFValidateValue Namespace UltraForce.Library.NetStandard.Models.Validators Assembly UltraForce.Library.NetStandard.dll A simple interface to validate a value. public interface IUFValidateValue Methods IsValid(object?) Determines if the value is valid. bool IsValid(object? aValue) Parameters aValue object The value to validate. Returns bool true if the valid is valid; otherwise, false."
  },
  "api/UltraForce.Library.NetStandard.Models.Validators.UFValidateAnotherField.html": {
    "href": "api/UltraForce.Library.NetStandard.Models.Validators.UFValidateAnotherField.html",
    "title": "Class UFValidateAnotherField | UltraForce.Library.NetStandard",
    "keywords": "Class UFValidateAnotherField Namespace UltraForce.Library.NetStandard.Models.Validators Assembly UltraForce.Library.NetStandard.dll Validate a value by validating another field in a data structure. If the other field validates, this validator will return true as well. public class UFValidateAnotherField : IUFValidateProperty Inheritance object UFValidateAnotherField Implements IUFValidateProperty Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UFValidateAnotherField(string) Initializes a new instance of the UFValidateAnotherField class. public UFValidateAnotherField(string aProperty) Parameters aProperty string Name of field inside data. Methods IsValid(string, IUFModel) Determines if the value is valid. public bool IsValid(string aPropertyName, IUFModel aData) Parameters aPropertyName string Name of property to validate aData IUFModel Data where to retrieve the property value. Returns bool true if the valid is valid; otherwise, false."
  },
  "api/UltraForce.Library.NetStandard.Models.Validators.UFValidateArray.html": {
    "href": "api/UltraForce.Library.NetStandard.Models.Validators.UFValidateArray.html",
    "title": "Class UFValidateArray | UltraForce.Library.NetStandard",
    "keywords": "Class UFValidateArray Namespace UltraForce.Library.NetStandard.Models.Validators Assembly UltraForce.Library.NetStandard.dll Validate an array on the correct number of elements. public class UFValidateArray : IUFValidateValue Inheritance object UFValidateArray Implements IUFValidateValue Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UFValidateArray(int, int) Initializes a new instance of the UFValidateArray class. public UFValidateArray(int aMinLength, int aMaxLength) Parameters aMinLength int A minimum length (inclusive). aMaxLength int A maximum length (inclusive). Methods IsValid(object?) See if aValue supports a Length property or field. If it does check if the value falls inside the set range. In all other cases the method returns false. The range includes the specified minimum and maximum value. public bool IsValid(object? aValue) Parameters aValue object Value to validate. Returns bool true if aValue has a Length property/field and its value falls inside the range; otherwise, false."
  },
  "api/UltraForce.Library.NetStandard.Models.Validators.UFValidateBoolean.html": {
    "href": "api/UltraForce.Library.NetStandard.Models.Validators.UFValidateBoolean.html",
    "title": "Class UFValidateBoolean | UltraForce.Library.NetStandard",
    "keywords": "Class UFValidateBoolean Namespace UltraForce.Library.NetStandard.Models.Validators Assembly UltraForce.Library.NetStandard.dll Validate that a value is either true or false. public class UFValidateBoolean : IUFValidateValue Inheritance object UFValidateBoolean Implements IUFValidateValue Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UFValidateBoolean(bool) Initializes a new instance of the UFValidateBoolean class. public UFValidateBoolean(bool aValue) Parameters aValue bool Value that needs be matched. Methods IsValid(object?) A value is valid if it matches the stored boolean value. public bool IsValid(object? aValue) Parameters aValue object Value to check. Returns bool true the value is equal to the stored boolean value; otherwise, false."
  },
  "api/UltraForce.Library.NetStandard.Models.Validators.UFValidateCityName.html": {
    "href": "api/UltraForce.Library.NetStandard.Models.Validators.UFValidateCityName.html",
    "title": "Class UFValidateCityName | UltraForce.Library.NetStandard",
    "keywords": "Class UFValidateCityName Namespace UltraForce.Library.NetStandard.Models.Validators Assembly UltraForce.Library.NetStandard.dll Assumes a city name is made up of A-Z, a-z, spaces, ', \" and . chars public class UFValidateCityName : UFValidateRegex, IUFValidateValue Inheritance object UFValidateRegex UFValidateCityName Implements IUFValidateValue Inherited Members UFValidateRegex.IsValid(object) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UFValidateCityName() Pass correct regular expression to base class. public UFValidateCityName()"
  },
  "api/UltraForce.Library.NetStandard.Models.Validators.UFValidateConditional.html": {
    "href": "api/UltraForce.Library.NetStandard.Models.Validators.UFValidateConditional.html",
    "title": "Class UFValidateConditional | UltraForce.Library.NetStandard",
    "keywords": "Class UFValidateConditional Namespace UltraForce.Library.NetStandard.Models.Validators Assembly UltraForce.Library.NetStandard.dll UFValidateConditional can be used to validate a value only if another property is valid as well. public class UFValidateConditional : IUFValidateProperty Inheritance object UFValidateConditional Implements IUFValidateProperty Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UFValidateConditional(string, IUFValidateValue, IUFValidateValue, bool) Constructs an instance of UFValidateConditional. public UFValidateConditional(string anOtherPropertyName, IUFValidateValue anOtherValidator, IUFValidateValue aValidator, bool aDefault = true) Parameters anOtherPropertyName string Name of other property to validate anOtherValidator IUFValidateValue Validator to use for other property aValidator IUFValidateValue Validator to use when other property is valid aDefault bool Default validation value to return if the other property is not valid Methods IsValid(string, IUFModel) Determines if the value is valid. public bool IsValid(string aPropertyName, IUFModel aData) Parameters aPropertyName string Name of property to validate aData IUFModel Data where to retrieve the property value. Returns bool true if the valid is valid; otherwise, false."
  },
  "api/UltraForce.Library.NetStandard.Models.Validators.UFValidateDay.html": {
    "href": "api/UltraForce.Library.NetStandard.Models.Validators.UFValidateDay.html",
    "title": "Class UFValidateDay | UltraForce.Library.NetStandard",
    "keywords": "Class UFValidateDay Namespace UltraForce.Library.NetStandard.Models.Validators Assembly UltraForce.Library.NetStandard.dll Validate a day by using year and month values. public class UFValidateDay : IUFValidateValue Inheritance object UFValidateDay Implements IUFValidateValue Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UFValidateDay(string, string, IUFAccessProperty) Initializes a new instance of the UFValidateDay class. public UFValidateDay(string aMonthFieldName, string aYearFieldName, IUFAccessProperty aData) Parameters aMonthFieldName string The name of month property in data. aYearFieldName string The name of year property in data. aData IUFAccessProperty A data to obtain month and year from. Methods IsValid(object?) Validate a day value. Use year and month values to determine maximum day.If the month and/or year are invalid(not an integer or in the case of month outside the valid range), the method will only validate day at the maximum range. public bool IsValid(object? aValue) Parameters aValue object value to compare Returns bool True if day is valid day value or if month or year values are invalid themselves."
  },
  "api/UltraForce.Library.NetStandard.Models.Validators.UFValidateDouble.html": {
    "href": "api/UltraForce.Library.NetStandard.Models.Validators.UFValidateDouble.html",
    "title": "Class UFValidateDouble | UltraForce.Library.NetStandard",
    "keywords": "Class UFValidateDouble Namespace UltraForce.Library.NetStandard.Models.Validators Assembly UltraForce.Library.NetStandard.dll Check if a value is a valid double. public class UFValidateDouble : IUFValidateValue Inheritance object UFValidateDouble Implements IUFValidateValue Derived UFValidateDoubleRange Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods IsValid(object?) public virtual bool IsValid(object? aValue) Parameters aValue object value to check Returns bool True if aValue is parsed correctly"
  },
  "api/UltraForce.Library.NetStandard.Models.Validators.UFValidateDoubleRange.html": {
    "href": "api/UltraForce.Library.NetStandard.Models.Validators.UFValidateDoubleRange.html",
    "title": "Class UFValidateDoubleRange | UltraForce.Library.NetStandard",
    "keywords": "Class UFValidateDoubleRange Namespace UltraForce.Library.NetStandard.Models.Validators Assembly UltraForce.Library.NetStandard.dll Check if a value is an integer within a certain range. public class UFValidateDoubleRange : UFValidateDouble, IUFValidateValue Inheritance object UFValidateDouble UFValidateDoubleRange Implements IUFValidateValue Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UFValidateDoubleRange(double, double) Initializes a new instance of the UFValidateDoubleRange class. public UFValidateDoubleRange(double aMin, double aMax) Parameters aMin double Minimal value allowed (including this value) aMax double Maximal value allowed (including this value) Methods IsValid(object?) public override bool IsValid(object? aValue) Parameters aValue object value to check Returns bool True if aValue is parsed correctly"
  },
  "api/UltraForce.Library.NetStandard.Models.Validators.UFValidateEmail.html": {
    "href": "api/UltraForce.Library.NetStandard.Models.Validators.UFValidateEmail.html",
    "title": "Class UFValidateEmail | UltraForce.Library.NetStandard",
    "keywords": "Class UFValidateEmail Namespace UltraForce.Library.NetStandard.Models.Validators Assembly UltraForce.Library.NetStandard.dll See if a value is a valid email address. public class UFValidateEmail : UFValidateRegex, IUFValidateValue Inheritance object UFValidateRegex UFValidateEmail Implements IUFValidateValue Inherited Members UFValidateRegex.IsValid(object) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UFValidateEmail() Initializes a new instance of the UFValidateEmail class. public UFValidateEmail()"
  },
  "api/UltraForce.Library.NetStandard.Models.Validators.UFValidateEqualToProperty.html": {
    "href": "api/UltraForce.Library.NetStandard.Models.Validators.UFValidateEqualToProperty.html",
    "title": "Class UFValidateEqualToProperty | UltraForce.Library.NetStandard",
    "keywords": "Class UFValidateEqualToProperty Namespace UltraForce.Library.NetStandard.Models.Validators Assembly UltraForce.Library.NetStandard.dll This validator checks if the value is equal to the value of property in a data structure. It can be used for example with password properties. public class UFValidateEqualToProperty : IUFValidateProperty Inheritance object UFValidateEqualToProperty Implements IUFValidateProperty Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UFValidateEqualToProperty(string) Initializes a new instance of the UFValidateEqualToProperty class. public UFValidateEqualToProperty(string aProperty) Parameters aProperty string Name of property inside data. Methods IsValid(string, IUFModel) Determines if the value is valid. public bool IsValid(string aPropertyName, IUFModel aData) Parameters aPropertyName string Name of property to validate aData IUFModel Data where to retrieve the property value. Returns bool true if the valid is valid; otherwise, false."
  },
  "api/UltraForce.Library.NetStandard.Models.Validators.UFValidateEqualsValue.html": {
    "href": "api/UltraForce.Library.NetStandard.Models.Validators.UFValidateEqualsValue.html",
    "title": "Class UFValidateEqualsValue | UltraForce.Library.NetStandard",
    "keywords": "Class UFValidateEqualsValue Namespace UltraForce.Library.NetStandard.Models.Validators Assembly UltraForce.Library.NetStandard.dll This validator uses Equals(object). A value is valid if it matches one of the values passed in the constructor. public class UFValidateEqualsValue : IUFValidateValue Inheritance object UFValidateEqualsValue Implements IUFValidateValue Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UFValidateEqualsValue(params object[]) Constructs an instance of UFValidateEqualsValue. public UFValidateEqualsValue(params object[] aValues) Parameters aValues object[] Values to test with Methods IsValid(object?) Determines if the value is valid. public bool IsValid(object? aValue) Parameters aValue object The value to validate. Returns bool true if the valid is valid; otherwise, false."
  },
  "api/UltraForce.Library.NetStandard.Models.Validators.UFValidateInteger.html": {
    "href": "api/UltraForce.Library.NetStandard.Models.Validators.UFValidateInteger.html",
    "title": "Class UFValidateInteger | UltraForce.Library.NetStandard",
    "keywords": "Class UFValidateInteger Namespace UltraForce.Library.NetStandard.Models.Validators Assembly UltraForce.Library.NetStandard.dll See if a value is a valid integer. public class UFValidateInteger : IUFValidateValue Inheritance object UFValidateInteger Implements IUFValidateValue Derived UFValidateIntegerRange Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods IsValid(object?) public virtual bool IsValid(object? aValue) Parameters aValue object value to check Returns bool True if aValue is parsed correctly"
  },
  "api/UltraForce.Library.NetStandard.Models.Validators.UFValidateIntegerRange.html": {
    "href": "api/UltraForce.Library.NetStandard.Models.Validators.UFValidateIntegerRange.html",
    "title": "Class UFValidateIntegerRange | UltraForce.Library.NetStandard",
    "keywords": "Class UFValidateIntegerRange Namespace UltraForce.Library.NetStandard.Models.Validators Assembly UltraForce.Library.NetStandard.dll Check if a value is an integer within a certain range. public class UFValidateIntegerRange : UFValidateInteger, IUFValidateValue Inheritance object UFValidateInteger UFValidateIntegerRange Implements IUFValidateValue Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UFValidateIntegerRange(int, int) Initializes a new instance of the UFValidateIntegerRange class. public UFValidateIntegerRange(int aMin, int aMax) Parameters aMin int Minimal value allowed (including this value) aMax int Maximal value allowed (including this value) Methods IsValid(object?) public override bool IsValid(object? aValue) Parameters aValue object value to check Returns bool True if aValue is parsed correctly"
  },
  "api/UltraForce.Library.NetStandard.Models.Validators.UFValidateNonEmptyText.html": {
    "href": "api/UltraForce.Library.NetStandard.Models.Validators.UFValidateNonEmptyText.html",
    "title": "Class UFValidateNonEmptyText | UltraForce.Library.NetStandard",
    "keywords": "Class UFValidateNonEmptyText Namespace UltraForce.Library.NetStandard.Models.Validators Assembly UltraForce.Library.NetStandard.dll Validator to check non empty text. public class UFValidateNonEmptyText : IUFValidateValue Inheritance object UFValidateNonEmptyText Implements IUFValidateValue Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods IsValid(object?) Check if aValue as string has content. public bool IsValid(object? aValue) Parameters aValue object Value to validate. Returns bool true if aValue is not empty and not null; false otherwise."
  },
  "api/UltraForce.Library.NetStandard.Models.Validators.UFValidateOptional.html": {
    "href": "api/UltraForce.Library.NetStandard.Models.Validators.UFValidateOptional.html",
    "title": "Class UFValidateOptional | UltraForce.Library.NetStandard",
    "keywords": "Class UFValidateOptional Namespace UltraForce.Library.NetStandard.Models.Validators Assembly UltraForce.Library.NetStandard.dll This validator can be used to validate optional values. If a value is empty or '' then this class will return a default value else it will pass the value to another validator. public class UFValidateOptional : IUFValidateValue Inheritance object UFValidateOptional Implements IUFValidateValue Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UFValidateOptional(IUFValidateValue, bool) Initializes a new instance of the UFValidateOptional class. public UFValidateOptional(IUFValidateValue aValidate, bool anEmptyResult = true) Parameters aValidate IUFValidateValue Validator to apply on non-null/non-empty values. anEmptyResult bool Result value to return for null/empty values. Methods IsValid(object?) Validate aValue; return the stored empty result value if aValue is null or empty; else use the stored validator. public bool IsValid(object? aValue) Parameters aValue object value to validate Returns bool Stored empty result if aValue is empty or valid, false if value is not empty and not valid."
  },
  "api/UltraForce.Library.NetStandard.Models.Validators.UFValidateRegex.html": {
    "href": "api/UltraForce.Library.NetStandard.Models.Validators.UFValidateRegex.html",
    "title": "Class UFValidateRegex | UltraForce.Library.NetStandard",
    "keywords": "Class UFValidateRegex Namespace UltraForce.Library.NetStandard.Models.Validators Assembly UltraForce.Library.NetStandard.dll Validator using regular expression to validate. public class UFValidateRegex : IUFValidateValue Inheritance object UFValidateRegex Implements IUFValidateValue Derived UFValidateCityName UFValidateEmail UFValidateZipCodeDutch Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UFValidateRegex(string) Initializes a new instance of the UFValidateRegex class. public UFValidateRegex(string aPattern) Parameters aPattern string Pattern to build reg expression from. UFValidateRegex(Regex) Initializes a new instance of the UFValidateRegex class. public UFValidateRegex(Regex aRegExp) Parameters aRegExp Regex Regular expression to match. Methods IsValid(object?) public virtual bool IsValid(object? aValue) Parameters aValue object value to check Returns bool True if aValue matches the expression"
  },
  "api/UltraForce.Library.NetStandard.Models.Validators.UFValidateTextLength.html": {
    "href": "api/UltraForce.Library.NetStandard.Models.Validators.UFValidateTextLength.html",
    "title": "Class UFValidateTextLength | UltraForce.Library.NetStandard",
    "keywords": "Class UFValidateTextLength Namespace UltraForce.Library.NetStandard.Models.Validators Assembly UltraForce.Library.NetStandard.dll Check if a text has certain number of characters. For example to validate a minimum length on passwords. public class UFValidateTextLength : IUFValidateValue Inheritance object UFValidateTextLength Implements IUFValidateValue Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UFValidateTextLength(int, int) Initializes a new instance of the UFValidateTextLength class. public UFValidateTextLength(int aMin, int aMax = 2147483647) Parameters aMin int Minimal number of characters allowed. aMax int Maximum number of characters allowed. Methods IsValid(object?) Verify if a text value length falls inside the set range. public bool IsValid(object? aValue) Parameters aValue object Value to check Returns bool True if aValue is valid"
  },
  "api/UltraForce.Library.NetStandard.Models.Validators.UFValidateZipCodeDutch.html": {
    "href": "api/UltraForce.Library.NetStandard.Models.Validators.UFValidateZipCodeDutch.html",
    "title": "Class UFValidateZipCodeDutch | UltraForce.Library.NetStandard",
    "keywords": "Class UFValidateZipCodeDutch Namespace UltraForce.Library.NetStandard.Models.Validators Assembly UltraForce.Library.NetStandard.dll Validates that the text is of the form '####[ ]XX', where # is a number and XX a letter. The number group can be separated by one or no space character. public class UFValidateZipCodeDutch : UFValidateRegex, IUFValidateValue Inheritance object UFValidateRegex UFValidateZipCodeDutch Implements IUFValidateValue Inherited Members UFValidateRegex.IsValid(object) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UFValidateZipCodeDutch() Initializes a new instance of the UFValidateZipCodeDutch class. public UFValidateZipCodeDutch()"
  },
  "api/UltraForce.Library.NetStandard.Models.Validators.html": {
    "href": "api/UltraForce.Library.NetStandard.Models.Validators.html",
    "title": "Namespace UltraForce.Library.NetStandard.Models.Validators | UltraForce.Library.NetStandard",
    "keywords": "Namespace UltraForce.Library.NetStandard.Models.Validators Classes UFValidateAnotherField Validate a value by validating another field in a data structure. If the other field validates, this validator will return true as well. UFValidateArray Validate an array on the correct number of elements. UFValidateBoolean Validate that a value is either true or false. UFValidateCityName Assumes a city name is made up of A-Z, a-z, spaces, ', \" and . chars UFValidateConditional UFValidateConditional can be used to validate a value only if another property is valid as well. UFValidateDay Validate a day by using year and month values. UFValidateDouble Check if a value is a valid double. UFValidateDoubleRange Check if a value is an integer within a certain range. UFValidateEmail See if a value is a valid email address. UFValidateEqualToProperty This validator checks if the value is equal to the value of property in a data structure. It can be used for example with password properties. UFValidateEqualsValue This validator uses Equals(object). A value is valid if it matches one of the values passed in the constructor. UFValidateInteger See if a value is a valid integer. UFValidateIntegerRange Check if a value is an integer within a certain range. UFValidateNonEmptyText Validator to check non empty text. UFValidateOptional This validator can be used to validate optional values. If a value is empty or '' then this class will return a default value else it will pass the value to another validator. UFValidateRegex Validator using regular expression to validate. UFValidateTextLength Check if a text has certain number of characters. For example to validate a minimum length on passwords. UFValidateZipCodeDutch Validates that the text is of the form '####[ ]XX', where # is a number and XX a letter. The number group can be separated by one or no space character. Interfaces IUFValidateProperty A simple interface to validate a value of a property. IUFValidateValue A simple interface to validate a value."
  },
  "api/UltraForce.Library.NetStandard.Models.html": {
    "href": "api/UltraForce.Library.NetStandard.Models.html",
    "title": "Namespace UltraForce.Library.NetStandard.Models | UltraForce.Library.NetStandard",
    "keywords": "Namespace UltraForce.Library.NetStandard.Models Classes UFModel Base class for data classes. UFModelDictionary<TKey, TValue> Implements a generic IDictionary adding support for certain UFModel.Option values and implementing various UFModel methods. UFModelList<TValue> Implements a generic IList adding support for certain UFModel.Option values and implementing various UFModel methods. UFModelObservableList<TValue> Extends UFModelList<TValue> and implements the INotifyCollectionChanged event. UFModelStorageWrapper UFModelStorageWrapper can be used to create models that map their properties directly to a storage. Use Get<T>(Func<T>, string) to get a property value from the storage and use Set(object?, string) to store a property value to the storage. The class handles properties that implement IUFNotifyDataChanged. The class uses TrackChildChange and will update the object in storage whenever it changes. If a property is a (sub)class of UFModelStorageWrapper the class will call SetParentKeyPrefix(string) whenever a new instance is created or assigned. The class will never store the value itself in the storage. The class assumes the property value will take care of storing/retrieving itself. This allows for a UFModelStorageWrapper subclass to be used for multiple properties without key name conflicts. Properties that implement IUFStorableObject are treated slightly different. The first time a property's value is referenced and none exists, a new instance is created and its data is loaded from the wrapped UFKeyedStorage using GetStorableObject(string, IUFStorableObject). UFPropertyBinding This class keeps two properties synchronized, whenever one of the properties changes value UFPropertyBinding will update the other property. Interfaces IUFModel IUFModel defines an interface with methods a model should implement. It combines IUFAccessProperty, IUFNotifyDataChanged and IUFValidatePropertyValue. Enums UFModel.Option Options for the UFModel"
  },
  "api/UltraForce.Library.NetStandard.Net.UFExtendedErrorResponseModel-1.html": {
    "href": "api/UltraForce.Library.NetStandard.Net.UFExtendedErrorResponseModel-1.html",
    "title": "Class UFExtendedErrorResponseModel<TEnum> | UltraForce.Library.NetStandard",
    "keywords": "Class UFExtendedErrorResponseModel<TEnum> Namespace UltraForce.Library.NetStandard.Net Assembly UltraForce.Library.NetStandard.dll This model can be used to return extended error information with a bad request result. public class UFExtendedErrorResponseModel<TEnum> where TEnum : struct Type Parameters TEnum Inheritance object UFExtendedErrorResponseModel<TEnum> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Code Extended error code public TEnum Code { get; set; } Property Value TEnum Name Extended error code type casted to string public string? Name { get; set; } Property Value string"
  },
  "api/UltraForce.Library.NetStandard.Net.html": {
    "href": "api/UltraForce.Library.NetStandard.Net.html",
    "title": "Namespace UltraForce.Library.NetStandard.Net | UltraForce.Library.NetStandard",
    "keywords": "Namespace UltraForce.Library.NetStandard.Net Classes UFExtendedErrorResponseModel<TEnum> This model can be used to return extended error information with a bad request result."
  },
  "api/UltraForce.Library.NetStandard.Security.UFCryptoHelper.html": {
    "href": "api/UltraForce.Library.NetStandard.Security.UFCryptoHelper.html",
    "title": "Class UFCryptoHelper | UltraForce.Library.NetStandard",
    "keywords": "Class UFCryptoHelper Namespace UltraForce.Library.NetStandard.Security Assembly UltraForce.Library.NetStandard.dll UFCryptoHelper library is a library that implements various encryption and decryption methods. public class UFCryptoHelper Inheritance object UFCryptoHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UFCryptoHelper(byte[], int, string) Constructs an instance of UFCryptoHelper. public UFCryptoHelper(byte[] aSalt, int aDerivationIterations = 1000, string aHashNibbles = \"0123456789ABCDEF\") Parameters aSalt byte[] Salt to use (must at least be 8 bytes in length) aDerivationIterations int Number of derivations to use aHashNibbles string A string of 16 unique characters to use as nibble values when processing 'hex' strings. Methods AsymmetricDecrypt(string, object) Decrypts text using asymmetric encryption with RSA. public string AsymmetricDecrypt(string aData, object aPrivateKey) Parameters aData string Data to decrypt aPrivateKey object Private key to decrypt with Returns string Decrypted data AsymmetricEncrypt(string, string) Encrypts text using asymmetric encryption with RSA. public string AsymmetricEncrypt(string aData, string aPublicKey) Parameters aData string Data to encrypt aPublicKey string Key to encrypt with (Pkcs1key format) Returns string base64 encoded data Remarks Assumes public key is a base64 encoded key using Pkcs1key format AsymmetricSign(string, object) Generates a signature using an asymmetric key using SHA256. public string AsymmetricSign(string aData, object aPrivateKey) Parameters aData string Data to create signature for aPrivateKey object Private key to sign with Returns string Signature base64 encoded CalcHash(string) Generates an hash value using SHA512. public string CalcHash(string aData) Parameters aData string Data to get hash from Returns string hashed data Encrypt(string, string) Encrypts a value using AES encryption. public string Encrypt(string aValue, string aKey) Parameters aValue string Value to encrypt aKey string Key to encrypt with Returns string GetAsymmetricKeys(out string, out object) Gets a public and private key pair for RSA encryption. public void GetAsymmetricKeys(out string aPublicKey, out object aPrivateKey) Parameters aPublicKey string Public key in private format aPrivateKey object Private key GetAsymmetricKeysPEM(out string, out object) Gets a public and private key pair for RSA encryption. public void GetAsymmetricKeysPEM(out string aPublicKey, out object aPrivateKey) Parameters aPublicKey string Public key in PEM format aPrivateKey object Private key SymmetricDecrypt(string, string) Decrypt a text previously encrypted with SymmetricEncrypt(string, string). public string SymmetricDecrypt(string aEncryptedValue, string aKey) Parameters aEncryptedValue string Encrypted text aKey string Key used to encrypt Returns string Decrypted text Remarks Based on: https://xamarinhelp.com/cryptography-in-xamarin-forms/ SymmetricEncrypt(string, string) Encrypt a text with a key. public string SymmetricEncrypt(string aText, string aKey) Parameters aText string Text to encrypt aKey string Key to use Returns string Encrypted text (base64 encoded with one ';' character) Remarks Based on: https://xamarinhelp.com/cryptography-in-xamarin-forms/"
  },
  "api/UltraForce.Library.NetStandard.Security.html": {
    "href": "api/UltraForce.Library.NetStandard.Security.html",
    "title": "Namespace UltraForce.Library.NetStandard.Security | UltraForce.Library.NetStandard",
    "keywords": "Namespace UltraForce.Library.NetStandard.Security Classes UFCryptoHelper UFCryptoHelper library is a library that implements various encryption and decryption methods."
  },
  "api/UltraForce.Library.NetStandard.Services.IUFServiceCollection.html": {
    "href": "api/UltraForce.Library.NetStandard.Services.IUFServiceCollection.html",
    "title": "Interface IUFServiceCollection | UltraForce.Library.NetStandard",
    "keywords": "Interface IUFServiceCollection Namespace UltraForce.Library.NetStandard.Services Assembly UltraForce.Library.NetStandard.dll IUFServiceCollection extends IServiceProvider and adds minimal number of methods to register services and providers. public interface IUFServiceCollection : IServiceProvider Inherited Members IServiceProvider.GetService(Type) Remarks Use With(IUFServiceCollection) for registration types using generic methods. Methods IsRegistered(Type) Checks if there is a registration for a service type. bool IsRegistered(Type aServiceType) Parameters aServiceType Type Service type to check registration for Returns bool True if there is a registration; otherwise false. Register(Type, Type) Registers a provider type for a certain service type. A new instance will be created every time the service type is requested. void Register(Type aServiceType, Type aProvider) Parameters aServiceType Type Service type to register provider type for. aProvider Type Type to create instance of when then service is requested. RegisterSingleton(Type, object) Registers a singleton provider instance for a certain service type. void RegisterSingleton(Type aServiceType, object aProviderInstance) Parameters aServiceType Type Service type to register provider type for. aProviderInstance object Instance to return when the service is requested. RegisterSingleton(Type, Type) Registers a provider type for a certain service type. The first time the service is requested an instance is created. Subsequent requests will use the same instance. Use RegisterSingleton(Type, object) to register an existing instance. void RegisterSingleton(Type aServiceType, Type aProvider) Parameters aServiceType Type Service type to register provider type for. aProvider Type Type to create singleton instance of when the service is requested."
  },
  "api/UltraForce.Library.NetStandard.Services.IUFServiceProvider.html": {
    "href": "api/UltraForce.Library.NetStandard.Services.IUFServiceProvider.html",
    "title": "Interface IUFServiceProvider | UltraForce.Library.NetStandard",
    "keywords": "Interface IUFServiceProvider Namespace UltraForce.Library.NetStandard.Services Assembly UltraForce.Library.NetStandard.dll This interface can be implemented by classes that can create instances of an object providing a certain service. It is similar to IServiceProvider which is available from NetStandard 2.0+ [Obsolete(\"Use IServiceProvider instead of IUFServiceProvider\")] public interface IUFServiceProvider : IServiceProvider Inherited Members IServiceProvider.GetService(Type) Remarks This interface is provided for backwards compatibility, the rest of the Ultra Force NetStandard Library uses IServiceProvider."
  },
  "api/UltraForce.Library.NetStandard.Services.UFCache-2.html": {
    "href": "api/UltraForce.Library.NetStandard.Services.UFCache-2.html",
    "title": "Class UFCache<TKey, TValue> | UltraForce.Library.NetStandard",
    "keywords": "Class UFCache<TKey, TValue> Namespace UltraForce.Library.NetStandard.Services Assembly UltraForce.Library.NetStandard.dll UFCache<TKey, TValue> is a base class to create a simple memory cache for a certain type and storing it for a certain key type. The methods are thread safe (using the `lock` construct). public abstract class UFCache<TKey, TValue> Type Parameters TKey Type of the key TValue Type of the value Inheritance object UFCache<TKey, TValue> Derived UFStringCache<TKey> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks Subclasses must override the GetSize(TValue) method. Constructors UFCache(long, TValue) Constructs an instance of UFCache<TKey, TValue>. protected UFCache(long aCapacity, TValue anUnknown) Parameters aCapacity long Maximums size of cache anUnknown TValue Value to return when trying to get a value that is not in the cache. Properties Unknown This value is returned by Get(TKey) when there is no value stored for a certain key. public TValue Unknown { get; } Property Value TValue Methods Add(TKey, TValue) Adds a value to the cache. If the size of the value is bigger then the cache capacity, nothing happens and the value is not cached. The method will remove the oldest cached items (access times most in the past) if the cache would exceed its capacity. public void Add(TKey aKey, TValue aValue) Parameters aKey TKey Key of value to add aValue TValue Value to add Clear() Clears the whole cache. public void Clear() Get(TKey) Gets a value for a key from the cache. If the value can not be found, the method will return the value of Unknown. Accessing a value will also update its access time. public TValue Get(TKey aKey) Parameters aKey TKey Key to get value for Returns TValue Value or Unknown GetSize(TValue) Gets the size of a value. protected abstract long GetSize(TValue aValue) Parameters aValue TValue Value to get a size for Returns long Size of value Has(TKey) Checks if there is a value for a key. public bool Has(TKey aKey) Parameters aKey TKey Key to check Returns bool True if there is a value Remove(TKey) Removes a value for a key from the cache. If the value can not be found, the method will return the value of Unknown. public TValue Remove(TKey aKey) Parameters aKey TKey Key to get value for Returns TValue Removed value or Unknown"
  },
  "api/UltraForce.Library.NetStandard.Services.UFSimpleServiceCollection.html": {
    "href": "api/UltraForce.Library.NetStandard.Services.UFSimpleServiceCollection.html",
    "title": "Class UFSimpleServiceCollection | UltraForce.Library.NetStandard",
    "keywords": "Class UFSimpleServiceCollection Namespace UltraForce.Library.NetStandard.Services Assembly UltraForce.Library.NetStandard.dll UFSimpleServiceCollection is a basic implementation of IUFServiceCollection. The class does not implement any constructor matching code. If there are multiple constructors, the class will skip constructors without parameters and use the first constructor with parameters to create an instance with. It is possible to annotate a constructor with UFInjectAttribute to force the use of that constructor. If multiple constructors are annotated, the class will use the first annotated constructor. public class UFSimpleServiceCollection : IUFServiceCollection, IServiceProvider Inheritance object UFSimpleServiceCollection Implements IUFServiceCollection IServiceProvider Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UFSimpleServiceCollection() Constructs an instance of UFSimpleServiceCollection public UFSimpleServiceCollection() Methods CreateInstance(Type) Creates an instance of certain class type. The type does not have to be a registered service. The method will still use dependency injection to resolve constructor parameters. public object CreateInstance(Type aType) Parameters aType Type Type to create instance of Returns object Instance of the requested type CreateInstance<T>() Generic version of CreateInstance(Type) public T CreateInstance<T>() Returns T Instance of the specified type Type Parameters T Type of class to create instance of GetService(Type) Gets the service object of the specified type. public object? GetService(Type aServiceType) Parameters aServiceType Type Returns object A service object of type serviceType. -or- null if there is no service object of type serviceType. IsRegistered(Type) Checks if there is a registration for a service type. public bool IsRegistered(Type aServiceType) Parameters aServiceType Type Service type to check registration for Returns bool True if there is a registration; otherwise false. ProcessInjects(object) Processes methods, properties and fields annotated with UFInjectAttribute by calling ProcessInjects(object, IServiceProvider) public void ProcessInjects(object anInstance) Parameters anInstance object Object instance to check methods, properties and fields for Register(Type, Type) Registers a provider type for a certain service type. A new instance will be created every time the service type is requested. public void Register(Type aServiceType, Type aProvider) Parameters aServiceType Type Service type to register provider type for. aProvider Type Type to create instance of when then service is requested. RegisterSingleton(Type, object) Registers a singleton provider instance for a certain service type. public void RegisterSingleton(Type aServiceType, object aProviderInstance) Parameters aServiceType Type Service type to register provider type for. aProviderInstance object Instance to return when the service is requested. RegisterSingleton(Type, Type) Registers a provider type for a certain service type. The first time the service is requested an instance is created. Subsequent requests will use the same instance. Use RegisterSingleton(Type, object) to register an existing instance. public void RegisterSingleton(Type aServiceType, Type aProvider) Parameters aServiceType Type Service type to register provider type for. aProvider Type Type to create singleton instance of when the service is requested."
  },
  "api/UltraForce.Library.NetStandard.Services.UFStringCache-1.html": {
    "href": "api/UltraForce.Library.NetStandard.Services.UFStringCache-1.html",
    "title": "Class UFStringCache<TKey> | UltraForce.Library.NetStandard",
    "keywords": "Class UFStringCache<TKey> Namespace UltraForce.Library.NetStandard.Services Assembly UltraForce.Library.NetStandard.dll UFStringCache<TKey> is a subclass of UFCache<TKey, TValue> for use with string values. It uses a GUID as the unknown value. public class UFStringCache<TKey> : UFCache<TKey, string> Type Parameters TKey Type for the key Inheritance object UFCache<TKey, string> UFStringCache<TKey> Inherited Members UFCache<TKey, string>.Add(TKey, string) UFCache<TKey, string>.Get(TKey) UFCache<TKey, string>.Remove(TKey) UFCache<TKey, string>.Has(TKey) UFCache<TKey, string>.Clear() UFCache<TKey, string>.Unknown UFCache<TKey, string>.GetSize(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UFStringCache(long) public UFStringCache(long aCapacity) Parameters aCapacity long Methods GetSize(string) Gets the size of a value. protected override long GetSize(string aValue) Parameters aValue string Value to get a size for Returns long Size of value"
  },
  "api/UltraForce.Library.NetStandard.Services.html": {
    "href": "api/UltraForce.Library.NetStandard.Services.html",
    "title": "Namespace UltraForce.Library.NetStandard.Services | UltraForce.Library.NetStandard",
    "keywords": "Namespace UltraForce.Library.NetStandard.Services Classes UFCache<TKey, TValue> UFCache<TKey, TValue> is a base class to create a simple memory cache for a certain type and storing it for a certain key type. The methods are thread safe (using the `lock` construct). UFSimpleServiceCollection UFSimpleServiceCollection is a basic implementation of IUFServiceCollection. The class does not implement any constructor matching code. If there are multiple constructors, the class will skip constructors without parameters and use the first constructor with parameters to create an instance with. It is possible to annotate a constructor with UFInjectAttribute to force the use of that constructor. If multiple constructors are annotated, the class will use the first annotated constructor. UFStringCache<TKey> UFStringCache<TKey> is a subclass of UFCache<TKey, TValue> for use with string values. It uses a GUID as the unknown value. Interfaces IUFServiceCollection IUFServiceCollection extends IServiceProvider and adds minimal number of methods to register services and providers. IUFServiceProvider This interface can be implemented by classes that can create instances of an object providing a certain service. It is similar to IServiceProvider which is available from NetStandard 2.0+"
  },
  "api/UltraForce.Library.NetStandard.Storage.IUFStorableObject.html": {
    "href": "api/UltraForce.Library.NetStandard.Storage.IUFStorableObject.html",
    "title": "Interface IUFStorableObject | UltraForce.Library.NetStandard",
    "keywords": "Interface IUFStorableObject Namespace UltraForce.Library.NetStandard.Storage Assembly UltraForce.Library.NetStandard.dll This interface defines methods an object can implement if it can store itself to a and retrieve itself from a UFKeyedStorage public interface IUFStorableObject Methods LoadFromStorage(UFKeyedStorage) Loads this instance from a UFKeyedStorage void LoadFromStorage(UFKeyedStorage aStorage) Parameters aStorage UFKeyedStorage Storage where property was saved to SaveToStorage(UFKeyedStorage) Saves this instance to a UFKeyedStorage void SaveToStorage(UFKeyedStorage aStorage) Parameters aStorage UFKeyedStorage Storage where property is saved to"
  },
  "api/UltraForce.Library.NetStandard.Storage.IUFStorableObjectAsync.html": {
    "href": "api/UltraForce.Library.NetStandard.Storage.IUFStorableObjectAsync.html",
    "title": "Interface IUFStorableObjectAsync | UltraForce.Library.NetStandard",
    "keywords": "Interface IUFStorableObjectAsync Namespace UltraForce.Library.NetStandard.Storage Assembly UltraForce.Library.NetStandard.dll This interface defines methods an object can implement if it can store itself to a and retrieve itself from a UFKeyedStorageAsync public interface IUFStorableObjectAsync Methods LoadFromStorageAsync(UFKeyedStorageAsync) Loads this instance from a UFKeyedStorageAsync Task LoadFromStorageAsync(UFKeyedStorageAsync aStorage) Parameters aStorage UFKeyedStorageAsync Storage where property was saved to Returns Task SaveToStorageAsync(UFKeyedStorageAsync) Saves this instance to a UFKeyedStorageAsync Task SaveToStorageAsync(UFKeyedStorageAsync aStorage) Parameters aStorage UFKeyedStorageAsync Storage where property is saved to Returns Task"
  },
  "api/UltraForce.Library.NetStandard.Storage.UFCachedStorage.html": {
    "href": "api/UltraForce.Library.NetStandard.Storage.UFCachedStorage.html",
    "title": "Class UFCachedStorage | UltraForce.Library.NetStandard",
    "keywords": "Class UFCachedStorage Namespace UltraForce.Library.NetStandard.Storage Assembly UltraForce.Library.NetStandard.dll UFCachedStorage by caching values from another UFKeyedStorage. public class UFCachedStorage : UFKeyedStorage Inheritance object UFKeyedStorage UFCachedStorage Inherited Members UFKeyedStorage.GetString(string) UFKeyedStorage.GetByte(string, byte) UFKeyedStorage.GetByte(string) UFKeyedStorage.SetByte(string, byte) UFKeyedStorage.GetSByte(string, sbyte) UFKeyedStorage.GetSByte(string) UFKeyedStorage.SetSByte(string, sbyte) UFKeyedStorage.GetShort(string, short) UFKeyedStorage.GetShort(string) UFKeyedStorage.SetShort(string, short) UFKeyedStorage.GetUShort(string, ushort) UFKeyedStorage.GetUShort(string) UFKeyedStorage.SetUShort(string, ushort) UFKeyedStorage.GetInt(string, int) UFKeyedStorage.GetInt(string) UFKeyedStorage.SetInt(string, int) UFKeyedStorage.GetUInt(string, uint) UFKeyedStorage.GetUInt(string) UFKeyedStorage.SetUInt(string, uint) UFKeyedStorage.GetLong(string, long) UFKeyedStorage.GetLong(string) UFKeyedStorage.SetLong(string, long) UFKeyedStorage.GetULong(string, ulong) UFKeyedStorage.GetULong(string) UFKeyedStorage.SetULong(string, ulong) UFKeyedStorage.GetFloat(string, float) UFKeyedStorage.GetFloat(string) UFKeyedStorage.SetFloat(string, float) UFKeyedStorage.GetDouble(string, double) UFKeyedStorage.GetDouble(string) UFKeyedStorage.SetDouble(string, double) UFKeyedStorage.GetBool(string, bool) UFKeyedStorage.GetBool(string) UFKeyedStorage.SetBool(string, bool) UFKeyedStorage.GetChar(string, char) UFKeyedStorage.GetChar(string) UFKeyedStorage.SetChar(string, char) UFKeyedStorage.GetBytes(string, byte[]) UFKeyedStorage.GetBytes(string) UFKeyedStorage.SetBytes(string, byte[]) UFKeyedStorage.GetDateTime(string, DateTime) UFKeyedStorage.GetDateTime(string) UFKeyedStorage.SetDateTime(string, DateTime) UFKeyedStorage.GetGuid(string, Guid) UFKeyedStorage.GetGuid(string) UFKeyedStorage.SetGuid(string, Guid) UFKeyedStorage.GetStorableObject(string, IUFStorableObject) UFKeyedStorage.SetStorableObject(string, IUFStorableObject) UFKeyedStorage.GetObject(string, Type) UFKeyedStorage.GetObject<T>(string) UFKeyedStorage.GetObject(string, Type, Func<Type, object>) UFKeyedStorage.SetObject(string, object, Type) UFKeyedStorage.SetObject(string, object) UFKeyedStorage.SetObject<T>(string, object) UFKeyedStorage.SerializeObject(string, object) UFKeyedStorage.DeserializeObject(string, Type, Func<Type, object>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UFCachedStorage(TimeSpan, UFKeyedStorage, bool) Constructs an instance of UFCachedStorage. protected UFCachedStorage(TimeSpan aCacheLife, UFKeyedStorage aStorage, bool aKeepAlive = false) Parameters aCacheLife TimeSpan Maximum time a value is cached aStorage UFKeyedStorage Storage to encapsulate aKeepAlive bool When true if a cached value is accessed before it expires, its life time is expanded from the moment it was last accessed. UFCachedStorage(UFKeyedStorage, bool) Constructs an instance of UFCachedStorage if a maximum cache life time of 1 minute . protected UFCachedStorage(UFKeyedStorage aStorage, bool aKeepAlive = false) Parameters aStorage UFKeyedStorage Storage to encapsulate aKeepAlive bool When true if a cached value is accessed before it expires, its life time is expanded from the moment it was last accessed. Methods DeleteAll() Calls DeleteAll() of the wrapped UFKeyedStorage and removes all cached values. public override void DeleteAll() DeleteKey(string) Calls DeleteKey(string) of the wrapped UFKeyedStorage and removes the cached value (if any). public override void DeleteKey(string aKey) Parameters aKey string GetString(string, string) Gets a string from the cache if any, else get it from the wrapped UFKeyedStorage and store it in the cache. public override string GetString(string aKey, string aDefault) Parameters aKey string Key to get value for aDefault string Default value to use if none exists Returns string Value for aKey HasKey(string) Checks if a valid entry exists in the cache, else calls HasKey(string) of the wrapped UFKeyedStorage. public override bool HasKey(string aKey) Parameters aKey string Returns bool SetString(string, string) Sets a string in the wrapped UFKeyedStorage and store or update in the cache. public override void SetString(string aKey, string aValue) Parameters aKey string Key to store the value for aValue string Value to store"
  },
  "api/UltraForce.Library.NetStandard.Storage.UFCachedStorageAsync.html": {
    "href": "api/UltraForce.Library.NetStandard.Storage.UFCachedStorageAsync.html",
    "title": "Class UFCachedStorageAsync | UltraForce.Library.NetStandard",
    "keywords": "Class UFCachedStorageAsync Namespace UltraForce.Library.NetStandard.Storage Assembly UltraForce.Library.NetStandard.dll UFCachedStorageAsync by caching values from another UFKeyedStorageAsync. public class UFCachedStorageAsync : UFKeyedStorageAsync Inheritance object UFKeyedStorageAsync UFCachedStorageAsync Inherited Members UFKeyedStorageAsync.GetStringAsync(string) UFKeyedStorageAsync.GetByteAsync(string, byte) UFKeyedStorageAsync.GetByteAsync(string) UFKeyedStorageAsync.SetByteAsync(string, byte) UFKeyedStorageAsync.GetSByteAsync(string, sbyte) UFKeyedStorageAsync.GetSByteAsync(string) UFKeyedStorageAsync.SetSByteAsync(string, sbyte) UFKeyedStorageAsync.GetShortAsync(string, short) UFKeyedStorageAsync.GetShortAsync(string) UFKeyedStorageAsync.SetShortAsync(string, short) UFKeyedStorageAsync.GetUShortAsync(string, ushort) UFKeyedStorageAsync.GetUShortAsync(string) UFKeyedStorageAsync.SetUShortAsync(string, ushort) UFKeyedStorageAsync.GetIntAsync(string, int) UFKeyedStorageAsync.GetIntAsync(string) UFKeyedStorageAsync.SetIntAsync(string, int) UFKeyedStorageAsync.GetUIntAsync(string, uint) UFKeyedStorageAsync.GetUIntAsync(string) UFKeyedStorageAsync.SetUIntAsync(string, uint) UFKeyedStorageAsync.GetLongAsync(string, long) UFKeyedStorageAsync.GetLongAsync(string) UFKeyedStorageAsync.SetLongAsync(string, long) UFKeyedStorageAsync.GetULongAsync(string, ulong) UFKeyedStorageAsync.GetULongAsync(string) UFKeyedStorageAsync.SetULongAsync(string, ulong) UFKeyedStorageAsync.GetFloatAsync(string, float) UFKeyedStorageAsync.GetFloatAsync(string) UFKeyedStorageAsync.SetFloatAsync(string, float) UFKeyedStorageAsync.GetDoubleAsync(string, double) UFKeyedStorageAsync.GetDoubleAsync(string) UFKeyedStorageAsync.SetDoubleAsync(string, double) UFKeyedStorageAsync.GetBoolAsync(string, bool) UFKeyedStorageAsync.GetBoolAsync(string) UFKeyedStorageAsync.SetBoolAsync(string, bool) UFKeyedStorageAsync.GetCharAsync(string, char) UFKeyedStorageAsync.GetCharAsync(string) UFKeyedStorageAsync.SetCharAsync(string, char) UFKeyedStorageAsync.GetBytesAsync(string, byte[]) UFKeyedStorageAsync.GetBytesAsync(string) UFKeyedStorageAsync.SetBytesAsync(string, byte[]) UFKeyedStorageAsync.GetDateTimeAsync(string, DateTime) UFKeyedStorageAsync.GetDateTimeAsync(string) UFKeyedStorageAsync.SetDateTimeAsync(string, DateTime) UFKeyedStorageAsync.GetGuidAsync(string, Guid) UFKeyedStorageAsync.GetGuidAsync(string) UFKeyedStorageAsync.SetGuidAsync(string, Guid) UFKeyedStorageAsync.GetStorableObjectAsync(string, IUFStorableObject) UFKeyedStorageAsync.SetStorableObjectAsync(string, IUFStorableObject) UFKeyedStorageAsync.GetObjectAsync(string, Type) UFKeyedStorageAsync.GetObjectAsync<T>(string) UFKeyedStorageAsync.SetObjectAsync(string, object, Type) UFKeyedStorageAsync.SetObjectAsync(string, object) UFKeyedStorageAsync.SerializeObjectAsync(string, object) UFKeyedStorageAsync.DeserializeObjectAsync(string, Type) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UFCachedStorageAsync(TimeSpan, UFKeyedStorageAsync, bool) Constructs an instance of UFCachedStorageAsync. protected UFCachedStorageAsync(TimeSpan aCacheLife, UFKeyedStorageAsync aStorage, bool aKeepAlive = false) Parameters aCacheLife TimeSpan Maximum time a value is cached aStorage UFKeyedStorageAsync Storage to encapsulate aKeepAlive bool When true if a cached value is accessed before it expires, its life time is expanded from the moment it was last accessed. UFCachedStorageAsync(UFKeyedStorageAsync, bool) Constructs an instance of UFCachedStorage if a maximum cache life time of 1 minute . protected UFCachedStorageAsync(UFKeyedStorageAsync aStorage, bool aKeepAlive = false) Parameters aStorage UFKeyedStorageAsync Storage to encapsulate aKeepAlive bool When true if a cached value is accessed before it expires, its life time is expanded from the moment it was last accessed. Methods DeleteAllAsync() Calls DeleteAllAsync() of the wrapped UFKeyedStorageAsync and removes all cached values. public override Task DeleteAllAsync() Returns Task DeleteKeyAsync(string) Calls DeleteKeyAsync(string) of the wrapped UFKeyedStorageAsync and removes the cached value (if any). public override Task DeleteKeyAsync(string aKey) Parameters aKey string Returns Task GetStringAsync(string, string) Gets a string from the cache if any, else get it from the wrapped UFKeyedStorageAsync and store it in the cache. public override Task<string> GetStringAsync(string aKey, string aDefault) Parameters aKey string Key to get value for aDefault string Default value to use if none exists Returns Task<string> Value for aKey HasKeyAsync(string) Checks if a valid entry exists in the cache, else calls HasKeyAsync(string) of the wrapped UFKeyedStorageAsync. public override Task<bool> HasKeyAsync(string aKey) Parameters aKey string Returns Task<bool> SetStringAsync(string, string) Sets a string in the wrapped UFKeyedStorageAsync and store or update in the cache. public override Task SetStringAsync(string aKey, string aValue) Parameters aKey string Key to store the value for aValue string Value to store Returns Task"
  },
  "api/UltraForce.Library.NetStandard.Storage.UFDictionaryStorage.html": {
    "href": "api/UltraForce.Library.NetStandard.Storage.UFDictionaryStorage.html",
    "title": "Class UFDictionaryStorage | UltraForce.Library.NetStandard",
    "keywords": "Class UFDictionaryStorage Namespace UltraForce.Library.NetStandard.Storage Assembly UltraForce.Library.NetStandard.dll UFDictionaryStorage extends UFKeyedStorage and stores the values into a Dictionary<TKey, TValue>. The class adds also various save and load methods. public class UFDictionaryStorage : UFKeyedStorage, IUFJsonExport Inheritance object UFKeyedStorage UFDictionaryStorage Implements IUFJsonExport Inherited Members UFKeyedStorage.GetString(string) UFKeyedStorage.GetByte(string, byte) UFKeyedStorage.GetByte(string) UFKeyedStorage.SetByte(string, byte) UFKeyedStorage.GetSByte(string, sbyte) UFKeyedStorage.GetSByte(string) UFKeyedStorage.SetSByte(string, sbyte) UFKeyedStorage.GetShort(string, short) UFKeyedStorage.GetShort(string) UFKeyedStorage.SetShort(string, short) UFKeyedStorage.GetUShort(string, ushort) UFKeyedStorage.GetUShort(string) UFKeyedStorage.SetUShort(string, ushort) UFKeyedStorage.GetInt(string, int) UFKeyedStorage.GetInt(string) UFKeyedStorage.SetInt(string, int) UFKeyedStorage.GetUInt(string, uint) UFKeyedStorage.GetUInt(string) UFKeyedStorage.SetUInt(string, uint) UFKeyedStorage.GetLong(string, long) UFKeyedStorage.GetLong(string) UFKeyedStorage.SetLong(string, long) UFKeyedStorage.GetULong(string, ulong) UFKeyedStorage.GetULong(string) UFKeyedStorage.SetULong(string, ulong) UFKeyedStorage.GetFloat(string, float) UFKeyedStorage.GetFloat(string) UFKeyedStorage.SetFloat(string, float) UFKeyedStorage.GetDouble(string, double) UFKeyedStorage.GetDouble(string) UFKeyedStorage.SetDouble(string, double) UFKeyedStorage.GetBool(string, bool) UFKeyedStorage.GetBool(string) UFKeyedStorage.SetBool(string, bool) UFKeyedStorage.GetChar(string, char) UFKeyedStorage.GetChar(string) UFKeyedStorage.SetChar(string, char) UFKeyedStorage.GetBytes(string, byte[]) UFKeyedStorage.GetBytes(string) UFKeyedStorage.SetBytes(string, byte[]) UFKeyedStorage.GetDateTime(string, DateTime) UFKeyedStorage.GetDateTime(string) UFKeyedStorage.SetDateTime(string, DateTime) UFKeyedStorage.GetGuid(string, Guid) UFKeyedStorage.GetGuid(string) UFKeyedStorage.SetGuid(string, Guid) UFKeyedStorage.GetStorableObject(string, IUFStorableObject) UFKeyedStorage.SetStorableObject(string, IUFStorableObject) UFKeyedStorage.GetObject(string, Type) UFKeyedStorage.GetObject<T>(string) UFKeyedStorage.GetObject(string, Type, Func<Type, object>) UFKeyedStorage.SetObject(string, object, Type) UFKeyedStorage.SetObject(string, object) UFKeyedStorage.SetObject<T>(string, object) UFKeyedStorage.SerializeObject(string, object) UFKeyedStorage.DeserializeObject(string, Type, Func<Type, object>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UFDictionaryStorage() Constructs an instance of UFDictionaryStorage. public UFDictionaryStorage() Methods DeleteAll() Deletes all stored data. public override void DeleteAll() DeleteKey(string) Deletes the data for specific key. public override void DeleteKey(string aKey) Parameters aKey string A key to Delete the data for. GetString(string, string) Gets a string. public override string GetString(string aKey, string aDefault) Parameters aKey string A key to get the string for. aDefault string A default value to use when there is no string stored for the key. Returns string The stored string or aDefault. HasKey(string) Checks if there is a locally stored data for a specific key. public override bool HasKey(string aKey) Parameters aKey string A key to check. Returns bool True if has there is data for the key; otherwise, false. LoadFromBytes(byte[]) Loads the storage from a byte array. This method creates a MemoryStream from the byte array and calls LoadFromStream(Stream). public void LoadFromBytes(byte[] aBytes) Parameters aBytes byte[] The data to get values from LoadFromReader(BinaryReader) Load property values from a BinaryReader. public void LoadFromReader(BinaryReader aReader) Parameters aReader BinaryReader A reader to read values from. LoadFromStream(Stream) Loads the storage from a stream. This method creates a BinaryReader and calls LoadFromReader(BinaryReader). public void LoadFromStream(Stream aStream) Parameters aStream Stream LoadFromString(string) Loads the storage from a base64 encoded string. public void LoadFromString(string aData) Parameters aData string The string data to get values from SaveJson() Create JSON formatted string from the data. The method returns an object definition, using the keys for property names and the values as their value. public string SaveJson() Returns string JSON formatted string SaveJson(StringBuilder) Add data to StringBuilder using json formatting. The method returns an object definition, using the keys for property names and the values as their value. public void SaveJson(StringBuilder aBuilder) Parameters aBuilder StringBuilder A builder to add data to. SaveToBytes() Saves storage to a byte array. This method creates a MemoryStream and calls SaveToStream(Stream). public byte[] SaveToBytes() Returns byte[] A byte array SaveToStream(Stream) Saves the storage to a stream. This method creates a BinaryWriter and calls SaveToWriter(BinaryWriter). public void SaveToStream(Stream aStream) Parameters aStream Stream Stream to save values to SaveToString() Saves the storage to a base64 encoded string. public string SaveToString() Returns string The property data stored as string. SaveToWriter(BinaryWriter) Saves the storage to a BinaryWriter by writing both the key and data. An unique marker is determined which is written first and after all data has been stored. public void SaveToWriter(BinaryWriter aWriter) Parameters aWriter BinaryWriter The writer to save to. SetString(string, string) Stores a string in the storage. public override void SetString(string aKey, string aValue) Parameters aKey string Key to store value for. aValue string A value to store."
  },
  "api/UltraForce.Library.NetStandard.Storage.UFKeyedStorage.html": {
    "href": "api/UltraForce.Library.NetStandard.Storage.UFKeyedStorage.html",
    "title": "Class UFKeyedStorage | UltraForce.Library.NetStandard",
    "keywords": "Class UFKeyedStorage Namespace UltraForce.Library.NetStandard.Storage Assembly UltraForce.Library.NetStandard.dll UFKeyedStorage is a base class for storage classes that store different type of values using unique keys. public abstract class UFKeyedStorage Inheritance object UFKeyedStorage Derived UFCachedStorage UFDictionaryStorage Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks The default implementations of the storage methods for the various types use the GetString(string) and SetString(string, string) method to store textual representations of the data. The class itself is an abstract class, the following methods need to be implemented in a subclass: GetString(string, string), SetString(string, string), HasKey(string) and DeleteKey(string). If possible a subclass should also implement DeleteAll(). Constructors UFKeyedStorage() Constructs an instance of UFKeyedStorage protected UFKeyedStorage() Methods DeleteAll() Deletes all stored data. public virtual void DeleteAll() DeleteKey(string) Deletes the data for specific key. public abstract void DeleteKey(string aKey) Parameters aKey string A key to Delete the data for. DeserializeObject(string, Type?, Func<Type, object>) Deserializes an object that was stored previously with SerializeObject(string, object). protected virtual object DeserializeObject(string aKey, Type? aType, Func<Type, object> aFactory) Parameters aKey string Key to retrieve serialized object with aType Type Type of object to create (might be null) aFactory Func<Type, object> A factory to create a new instance of aType Returns object Retrieved object GetBool(string) Gets a bool. public bool GetBool(string aKey) Parameters aKey string A key to get the bool for. Returns bool The stored bool or true when missing. GetBool(string, bool) Gets a bool. The default implementation uses GetString(string) and converts its value back to a bool. public virtual bool GetBool(string aKey, bool aDefault) Parameters aKey string A key to get the bool for. aDefault bool A default value to use when there is no bool stored for the key. Returns bool The stored bool or aDefault. GetByte(string) Gets a byte. public byte GetByte(string aKey) Parameters aKey string A key to get the byte for. Returns byte The stored byte or 0 if none could be found. GetByte(string, byte) Gets a byte. The default implementation calls GetInt(string). public virtual byte GetByte(string aKey, byte aDefault) Parameters aKey string A key to get the byte for. aDefault byte A default value to use when there is no byte stored for the key. Returns byte The stored byte or aDefault. GetBytes(string) Gets an array of bytes. public byte[]? GetBytes(string aKey) Parameters aKey string Key to get array for Returns byte[] Array of byte or null when missing GetBytes(string, byte[]?) Gets an array of bytes. The default implementation uses GetString(string) and assumes the data is is a base64 encoded string. public virtual byte[]? GetBytes(string aKey, byte[]? aDefault) Parameters aKey string Key to get array for aDefault byte[] Default value to use when no data exists for aKey Returns byte[] Array of byte or aDefault GetChar(string) Gets a char. public char GetChar(string aKey) Parameters aKey string A key to get the char for. Returns char The stored char or '\\0' when missing. GetChar(string, char) Gets a char. The default implementation uses GetString(string) to get the stored character. public virtual char GetChar(string aKey, char aDefault) Parameters aKey string A key to get the char for. aDefault char A default value to use when there is no char stored for the key. Returns char The stored char or aDefault. GetDateTime(string) Gets a date and time. public DateTime GetDateTime(string aKey) Parameters aKey string Key to get date and time for Returns DateTime Date and time or Now when missing GetDateTime(string, DateTime) Gets a DateTime value using GetLong(string) and FromBinary(long). public virtual DateTime GetDateTime(string aKey, DateTime aDefault) Parameters aKey string Key to get date and time for aDefault DateTime Default value to use Returns DateTime Store value or aDefault GetDouble(string) Gets a double number. public double GetDouble(string aKey) Parameters aKey string A key to get the double number for. Returns double The stored double number or 0.0 when missing. GetDouble(string, double) Gets a double number. The default implementation uses GetString(string) and uses Parse(string) to convert it back to a double. public virtual double GetDouble(string aKey, double aDefault) Parameters aKey string A key to get the double number for. aDefault double A default value to use when there is no double number stored for the key. Returns double The stored floating number or aDefault. GetFloat(string) Gets a floating number. public float GetFloat(string aKey) Parameters aKey string A key to get the floating number for. Returns float The stored floating number or 0.0 when missing. GetFloat(string, float) Gets a floating number. The default implementation just calls GetDouble(string) and typecast the value back to float. public virtual float GetFloat(string aKey, float aDefault) Parameters aKey string A key to get the floating number for. aDefault float A default value to use when there is no floating number stored for the key. Returns float The stored floating number or aDefault. GetGuid(string) Gets a guid. public Guid GetGuid(string aKey) Parameters aKey string Key to get value for Returns Guid Stored value or Empty when missing GetGuid(string, Guid) Gets a guid using GetBytes(string). public virtual Guid GetGuid(string aKey, Guid aDefault) Parameters aKey string Key to get value for aDefault Guid Default value to use Returns Guid Stored value or aDefault GetInt(string) Gets an integer. public int GetInt(string aKey) Parameters aKey string A key to get the integer for. Returns int The stored integer or 0 if none could be found. GetInt(string, int) Gets an integer. The default implementation uses GetString(string) and uses Parse(string) to convert it back to a integer. public virtual int GetInt(string aKey, int aDefault) Parameters aKey string A key to get the integer for. aDefault int A default value to use when there is no integer stored for the key. Returns int The stored integer or aDefault. GetLong(string) Gets a long. public long GetLong(string aKey) Parameters aKey string A key to get the long for. Returns long The stored long or 0 if none could be found. GetLong(string, long) Gets a long. The default implementation uses GetString(string) and uses Parse(string) to convert it back to a long. public virtual long GetLong(string aKey, long aDefault) Parameters aKey string A key to get the long for. aDefault long A default value to use when there is no long stored for the key. Returns long The stored long or aDefault. GetObject(string, Type) Calls GetObject(string, Type?, Func<Type, object>) using Activator to create an instance of aType. public object? GetObject(string aKey, Type aType) Parameters aKey string Key to get object for aType Type type of object Returns object instance or null if object could not be found GetObject(string, Type?, Func<Type, object>) Gets an object of a specific type. public virtual object? GetObject(string aKey, Type? aType, Func<Type, object> aFactory) Parameters aKey string Key to get object for aType Type Type of object or null if type is unknown aFactory Func<Type, object> A factory to create a new instance of aType Returns object Object instance or null if none was found and no type was provided Remarks The default implementation checks for certain type situations. If the object is a primitive type, its value gets retrieved with one of the GetXXXX methods. If the object implements the IUFStorableObject interface the method uses GetStorableObject(string, IUFStorableObject). If the object is a DateTime the data is retrieved via GetDateTime(string). If the object is a Guid the data is retrieved via GetGuid(string). If the object is a string the method uses GetString(string) to get its value. If the object is a enum the method assumes the value was stored as integer. If the object is a nullable value, the method will return null if no data exists (null values are not stored) or will call itself recursively using the underlying type. If none of the above fits, the method will call DeserializeObject(string, Type?, Func<Type, object>). GetObject<T>(string) A generic version of GetObject(string, Type). public T? GetObject<T>(string aKey) where T : struct Parameters aKey string Key value was stored with Returns T? Value or null if none could be found Type Parameters T Type of value to get GetSByte(string) Gets a sbyte. public sbyte GetSByte(string aKey) Parameters aKey string A key to get the sbyte for. Returns sbyte The stored sbyte or 0 if none could be found. GetSByte(string, sbyte) Gets a sbyte. The default implementation calls GetInt(string). public virtual sbyte GetSByte(string aKey, sbyte aDefault) Parameters aKey string A key to get the sbyte for. aDefault sbyte A default value to use when there is no sbyte stored for the key. Returns sbyte The stored sbyte or aDefault. GetShort(string) Gets a short. public short GetShort(string aKey) Parameters aKey string A key to get the short for. Returns short The stored short or 0 if none could be found. GetShort(string, short) Gets a short. The default implementation calls GetInt(string). public virtual short GetShort(string aKey, short aDefault) Parameters aKey string A key to get the short for. aDefault short A default value to use when there is no short stored for the key. Returns short The stored short or aDefault. GetStorableObject(string, IUFStorableObject) Gets the data by loading it into an object that implements the IUFStorableObject interface. public virtual IUFStorableObject GetStorableObject(string aKey, IUFStorableObject anObject) Parameters aKey string Key to get data for anObject IUFStorableObject Object to load from the storage Returns IUFStorableObject Value of anObject GetString(string) Gets a string. public string GetString(string aKey) Parameters aKey string A key to get the string for. Returns string The stored string or \"\" if none could be found. GetString(string, string) Gets a string. public abstract string GetString(string aKey, string aDefault) Parameters aKey string A key to get the string for. aDefault string A default value to use when there is no string stored for the key. Returns string The stored string or aDefault. GetUInt(string) Gets an unsigned integer. public uint GetUInt(string aKey) Parameters aKey string A key to get the unsigned integer for. Returns uint The stored unsigned integer or 0 if none could be found. GetUInt(string, uint) Gets an unsigned integer. The default implementation uses GetString(string) and uses Parse(string) to convert it back to an unsigned integer. public virtual uint GetUInt(string aKey, uint aDefault) Parameters aKey string A key to get the unsigned integer for. aDefault uint A default value to use when there is no unsigned integer stored for the key. Returns uint The stored unsigned integer or aDefault. GetULong(string) Gets a ulong. public ulong GetULong(string aKey) Parameters aKey string A key to get the ulong for. Returns ulong The stored ulong or 0 if none could be found. GetULong(string, ulong) Gets a ulong. The default implementation uses GetString(string) and uses Parse(string) to convert it back to a ulong. public virtual ulong GetULong(string aKey, ulong aDefault) Parameters aKey string A key to get the ulong for. aDefault ulong A default value to use when there is no ulong stored for the key. Returns ulong The stored ulong or aDefault. GetUShort(string) Gets a ushort. public ushort GetUShort(string aKey) Parameters aKey string A key to get the ushort for. Returns ushort The stored ushort or 0 if none could be found. GetUShort(string, ushort) Gets a ushort. The default implementation calls GetInt(string). public virtual ushort GetUShort(string aKey, ushort aDefault) Parameters aKey string A key to get the ushort for. aDefault ushort A default value to use when there is no ushort stored for the key. Returns ushort The stored ushort or aDefault. HasKey(string) Checks if there is a locally stored data for a specific key. public abstract bool HasKey(string aKey) Parameters aKey string A key to check. Returns bool True if has there is data for the key; otherwise, false. SerializeObject(string, object) Serializes an object. This method is called when the class can not store the object in any other way. The default implementation throws an exception. protected virtual void SerializeObject(string aKey, object anObject) Parameters aKey string Key to store serializes object with anObject object Object to store SetBool(string, bool) Stores a bool in the storage. The default implementation convert the value to a string and uses SetString(string, string) to store it. public virtual void SetBool(string aKey, bool aValue) Parameters aKey string Key to store value for. aValue bool A value to store. SetByte(string, byte) Stores a byte in the storage. The default implementation calls SetInt(string, int). public virtual void SetByte(string aKey, byte aValue) Parameters aKey string Key to store value for. aValue byte A value to store. SetBytes(string, byte[]) Stores an array of bytes to the storage. The default implementation converts the array to a base64 encoded string and uses SetString(string, string) to store it. public virtual void SetBytes(string aKey, byte[] aValue) Parameters aKey string Key to store value for aValue byte[] Array of byte to store SetChar(string, char) Stores a char in the storage. The default implementation just uses SetString(string, string) to store the value. public virtual void SetChar(string aKey, char aValue) Parameters aKey string Key to store value for. aValue char A value to store. SetDateTime(string, DateTime) Stores a date and time using SetLong(string, long) and ToBinary(). public virtual void SetDateTime(string aKey, DateTime aValue) Parameters aKey string Key to store value for aValue DateTime Value to store SetDouble(string, double) Stores a double number in the storage. The default implementation convert the value to a string and uses SetString(string, string) to store it. public virtual void SetDouble(string aKey, double aValue) Parameters aKey string Key to store value for. aValue double A value to store. SetFloat(string, float) Stores a floating number in the storage. The default implementation calls SetDouble(string, double). public virtual void SetFloat(string aKey, float aValue) Parameters aKey string Key to store value for. aValue float A value to store. SetGuid(string, Guid) Stores a guid using SetBytes(string, byte[]) and ToByteArray() public virtual void SetGuid(string aKey, Guid aValue) Parameters aKey string Key to store value for aValue Guid Value to store SetInt(string, int) Stores an integer in the storage. The default implementation convert the value to a string and uses SetString(string, string) to store it. public virtual void SetInt(string aKey, int aValue) Parameters aKey string Key to store value for. aValue int A value to store. SetLong(string, long) Stores a long in the storage. The default implementation convert the value to a string and uses SetString(string, string) to store it. public virtual void SetLong(string aKey, long aValue) Parameters aKey string Key to store value for. aValue long A value to store. SetObject(string, object) Stores an object. It calls SetObject(string, object?, Type?) using GetType() (if anObject is non null). public void SetObject(string aKey, object anObject) Parameters aKey string Key to store object for anObject object Object to store SetObject(string, object?, Type?) Stores an object to the storage using a certain type. public virtual void SetObject(string aKey, object? anObject, Type? aType) Parameters aKey string Key to store object for anObject object object to store aType Type type of object Remarks The default implementation checks for certain type situations. If the object is null, the method will remove the data stored with the key value by calling DeleteKey(string) If the object is a primitive type, its value gets stored with one of the SetXXXX methods. If the object implements the IUFStorableObject interface the method uses SetStorableObject(string, IUFStorableObject). If the object is a DateTime the data is stored via SetDateTime(string, DateTime). If the object is a Guid the data is stored via SetGuid(string, Guid). If the object is a string the method uses SetString(string, string) to store its value. If the object is a nullable value, the method will remove any value stored with aKey if the object is null else it will call itself recursively using the underlying type. If none of the above fits, the method will call SerializeObject(string, object). SetObject<T>(string, object) Generic version of SetObject(string, object?, Type?). public void SetObject<T>(string aKey, object anObject) Parameters aKey string Key to store object for anObject object Object to store Type Parameters T Type to store SetSByte(string, sbyte) Stores a sbyte in the storage. The default implementation calls SetInt(string, int). public virtual void SetSByte(string aKey, sbyte aValue) Parameters aKey string Key to store value for. aValue sbyte A value to store. SetShort(string, short) Stores a short in the storage. The default implementation calls SetInt(string, int). public virtual void SetShort(string aKey, short aValue) Parameters aKey string Key to store value for. aValue short A value to store. SetStorableObject(string, IUFStorableObject) Sets the data by saving it from an object that implements the IUFStorableObject interface. The default implementation uses a UFDictionaryStorage to store the data as string. public virtual void SetStorableObject(string aKey, IUFStorableObject anObject) Parameters aKey string Key to set data for anObject IUFStorableObject Object to save to the storage SetString(string, string) Stores a string in the storage. public abstract void SetString(string aKey, string aValue) Parameters aKey string Key to store value for. aValue string A value to store. SetUInt(string, uint) Stores an unsigned integer in the storage. The default implementation convert the value to a string and uses SetString(string, string) to store it. public virtual void SetUInt(string aKey, uint aValue) Parameters aKey string Key to store value for. aValue uint A value to store. SetULong(string, ulong) Stores a ulong in the storage. The default implementation convert the value to a string and uses SetString(string, string) to store it. public virtual void SetULong(string aKey, ulong aValue) Parameters aKey string Key to store value for. aValue ulong A value to store. SetUShort(string, ushort) Stores a ushort in the storage. The default implementation calls SetInt(string, int). public virtual void SetUShort(string aKey, ushort aValue) Parameters aKey string Key to store value for. aValue ushort A value to store."
  },
  "api/UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html": {
    "href": "api/UltraForce.Library.NetStandard.Storage.UFKeyedStorageAsync.html",
    "title": "Class UFKeyedStorageAsync | UltraForce.Library.NetStandard",
    "keywords": "Class UFKeyedStorageAsync Namespace UltraForce.Library.NetStandard.Storage Assembly UltraForce.Library.NetStandard.dll UFKeyedStorageAsync is a base class for storage classes that store different type of values using unique keys. public abstract class UFKeyedStorageAsync Inheritance object UFKeyedStorageAsync Derived UFCachedStorageAsync Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks It is a async version of UFKeyedStorage. Constructors UFKeyedStorageAsync() Constructs an instance of UFKeyedStorageAsync protected UFKeyedStorageAsync() Methods DeleteAllAsync() Deletes all stored data. The default implemetnation does nothing. public virtual Task DeleteAllAsync() Returns Task DeleteKeyAsync(string) Deletes the data for specific key. public abstract Task DeleteKeyAsync(string aKey) Parameters aKey string A key to Delete the data for. Returns Task DeserializeObjectAsync(string, Type?) Deserializes an object that was stored previously with SerializeObjectAsync(string, object). protected virtual Task<object> DeserializeObjectAsync(string aKey, Type? aType) Parameters aKey string Key to retrieve serialized object with aType Type Type of object to create (might be null) Returns Task<object> Retrieved object GetBoolAsync(string) Gets a bool. public Task<bool> GetBoolAsync(string aKey) Parameters aKey string A key to get the bool for. Returns Task<bool> The stored bool or true when missing. GetBoolAsync(string, bool) Gets a bool. The default implementation uses GetStringAsync(string) and converts its value back to a bool. public virtual Task<bool> GetBoolAsync(string aKey, bool aDefault) Parameters aKey string A key to get the bool for. aDefault bool A default value to use when there is no bool stored for the key. Returns Task<bool> The stored bool or aDefault. GetByteAsync(string) Gets a byte. public Task<byte> GetByteAsync(string aKey) Parameters aKey string A key to get the byte for. Returns Task<byte> The stored byte or 0 if none could be found. GetByteAsync(string, byte) Gets a byte. The default implementation calls GetIntAsync(string). public virtual Task<byte> GetByteAsync(string aKey, byte aDefault) Parameters aKey string A key to get the byte for. aDefault byte A default value to use when there is no byte stored for the key. Returns Task<byte> The stored byte or aDefault. GetBytesAsync(string) Gets an array of bytes. public Task<byte[]?> GetBytesAsync(string aKey) Parameters aKey string Key to get array for Returns Task<byte[]> Array of byte or null when missing GetBytesAsync(string, byte[]?) Gets an array of bytes. The default implementation uses GetStringAsync(string) and assumes the data is is a base64 encoded string. public virtual Task<byte[]?> GetBytesAsync(string aKey, byte[]? aDefault) Parameters aKey string Key to get array for aDefault byte[] Default value to use when no data exists for aKey Returns Task<byte[]> Array of byte or aDefault GetCharAsync(string) Gets a char. public Task<char> GetCharAsync(string aKey) Parameters aKey string A key to get the char for. Returns Task<char> The stored char or '\\0' when missing. GetCharAsync(string, char) Gets a char. The default implementation uses GetStringAsync(string) to get the stored character. public virtual Task<char> GetCharAsync(string aKey, char aDefault) Parameters aKey string A key to get the char for. aDefault char A default value to use when there is no char stored for the key. Returns Task<char> The stored char or aDefault. GetDateTimeAsync(string) Gets a date and time. public Task<DateTime> GetDateTimeAsync(string aKey) Parameters aKey string Key to get date and time for Returns Task<DateTime> Date and time or Now when missing GetDateTimeAsync(string, DateTime) Gets a DateTime value using GetLongAsync(string) and FromBinary(long). public virtual Task<DateTime> GetDateTimeAsync(string aKey, DateTime aDefault) Parameters aKey string Key to get date and time for aDefault DateTime Default value to use Returns Task<DateTime> Store value or aDefault GetDoubleAsync(string) Gets a double number. public Task<double> GetDoubleAsync(string aKey) Parameters aKey string A key to get the double number for. Returns Task<double> The stored double number or 0.0 when missing. GetDoubleAsync(string, double) Gets a double number. The default implementation uses GetStringAsync(string) and uses Parse(string) to convert it back to a double. public virtual Task<double> GetDoubleAsync(string aKey, double aDefault) Parameters aKey string A key to get the double number for. aDefault double A default value to use when there is no double number stored for the key. Returns Task<double> The stored floating number or aDefault. GetFloatAsync(string) Gets a floating number. public Task<float> GetFloatAsync(string aKey) Parameters aKey string A key to get the floating number for. Returns Task<float> The stored floating number or 0.0 when missing. GetFloatAsync(string, float) Gets a floating number. The default implementation just calls GetDoubleAsync(string) and typecast the value back to float. public virtual Task<float> GetFloatAsync(string aKey, float aDefault) Parameters aKey string A key to get the floating number for. aDefault float A default value to use when there is no floating number stored for the key. Returns Task<float> The stored floating number or aDefault. GetGuidAsync(string) Gets a guid. public Task<Guid> GetGuidAsync(string aKey) Parameters aKey string Key to get value for Returns Task<Guid> Stored value or Empty when missing GetGuidAsync(string, Guid) Gets a guid using GetBytesAsync(string). public virtual Task<Guid> GetGuidAsync(string aKey, Guid aDefault) Parameters aKey string Key to get value for aDefault Guid Default value to use Returns Task<Guid> Stored value or aDefault GetIntAsync(string) Gets an integer. public Task<int> GetIntAsync(string aKey) Parameters aKey string A key to get the integer for. Returns Task<int> The stored integer or 0 if none could be found. GetIntAsync(string, int) Gets an integer. The default implementation uses GetStringAsync(string) and uses Parse(string) to convert it back to a integer. public virtual Task<int> GetIntAsync(string aKey, int aDefault) Parameters aKey string A key to get the integer for. aDefault int A default value to use when there is no integer stored for the key. Returns Task<int> The stored integer or aDefault. GetLongAsync(string) Gets a long. public Task<long> GetLongAsync(string aKey) Parameters aKey string A key to get the long for. Returns Task<long> The stored long or 0 if none could be found. GetLongAsync(string, long) Gets a long. The default implementation uses GetStringAsync(string) and uses Parse(string) to convert it back to a long. public virtual Task<long> GetLongAsync(string aKey, long aDefault) Parameters aKey string A key to get the long for. aDefault long A default value to use when there is no long stored for the key. Returns Task<long> The stored long or aDefault. GetObjectAsync(string, Type?) Gets an object of a specific type. public virtual Task<object?> GetObjectAsync(string aKey, Type? aType) Parameters aKey string Key to get object for aType Type Type of object or null if type is unknown Returns Task<object> Object instance or null if none was found Remarks The default implementation checks for certain type situations. If the object is a primitive type, its value gets retrieved with one of the GetXXXX methods. If the object implements the IUFStorableObject interface the method uses GetStorableObjectAsync(string, IUFStorableObject) using aKey. If the object is a DateTime the data is retrieved via GetDateTimeAsync(string). If the object is a Guid the data is retrieved via GetGuidAsync(string). If the object is a string the method uses GetStringAsync(string) to get its value. If the object is a nullable value, the method will return null if no data exists (null values are not stored) or will call itself recursively using the underlying type. If none of the above fits, the method will call DeserializeObjectAsync(string, Type?). GetObjectAsync<T>(string) A generic version of GetObjectAsync(string, Type?). public Task<T?> GetObjectAsync<T>(string aKey) Parameters aKey string Key to get object for Returns Task<T> object Type Parameters T Type of object to get GetSByteAsync(string) Gets a sbyte. public Task<sbyte> GetSByteAsync(string aKey) Parameters aKey string A key to get the sbyte for. Returns Task<sbyte> The stored sbyte or 0 if none could be found. GetSByteAsync(string, sbyte) Gets a sbyte. The default implementation calls GetIntAsync(string). public virtual Task<sbyte> GetSByteAsync(string aKey, sbyte aDefault) Parameters aKey string A key to get the sbyte for. aDefault sbyte A default value to use when there is no sbyte stored for the key. Returns Task<sbyte> The stored sbyte or aDefault. GetShortAsync(string) Gets a short. public Task<short> GetShortAsync(string aKey) Parameters aKey string A key to get the short for. Returns Task<short> The stored short or 0 if none could be found. GetShortAsync(string, short) Gets a short. The default implementation calls GetIntAsync(string). public virtual Task<short> GetShortAsync(string aKey, short aDefault) Parameters aKey string A key to get the short for. aDefault short A default value to use when there is no short stored for the key. Returns Task<short> The stored short or aDefault. GetStorableObjectAsync(string, IUFStorableObject) Gets the data by loading it into an object that implements the IUFStorableObject interface. public virtual Task<IUFStorableObject> GetStorableObjectAsync(string aKey, IUFStorableObject anObject) Parameters aKey string Key to get data for anObject IUFStorableObject Object to load from the storage Returns Task<IUFStorableObject> Value of anObject GetStringAsync(string) Gets a string. public Task<string> GetStringAsync(string aKey) Parameters aKey string A key to get the string for. Returns Task<string> The stored string or \"\" if none could be found. GetStringAsync(string, string) Gets a string. public abstract Task<string> GetStringAsync(string aKey, string aDefault) Parameters aKey string A key to get the string for. aDefault string A default value to use when there is no string stored for the key. Returns Task<string> The stored string or aDefault. GetUIntAsync(string) Gets an unsigned integer. public Task<uint> GetUIntAsync(string aKey) Parameters aKey string A key to get the unsigned integer for. Returns Task<uint> The stored unsigned integer or 0 if none could be found. GetUIntAsync(string, uint) Gets an unsigned integer. The default implementation uses GetStringAsync(string) and uses Parse(string) to convert it back to an unsigned integer. public virtual Task<uint> GetUIntAsync(string aKey, uint aDefault) Parameters aKey string A key to get the unsigned integer for. aDefault uint A default value to use when there is no unsigned integer stored for the key. Returns Task<uint> The stored unsigned integer or aDefault. GetULongAsync(string) Gets a ulong. public Task<ulong> GetULongAsync(string aKey) Parameters aKey string A key to get the ulong for. Returns Task<ulong> The stored ulong or 0 if none could be found. GetULongAsync(string, ulong) Gets a ulong. The default implementation uses GetStringAsync(string) and uses Parse(string) to convert it back to a ulong. public virtual Task<ulong> GetULongAsync(string aKey, ulong aDefault) Parameters aKey string A key to get the ulong for. aDefault ulong A default value to use when there is no ulong stored for the key. Returns Task<ulong> The stored ulong or aDefault. GetUShortAsync(string) Gets a ushort. public Task<ushort> GetUShortAsync(string aKey) Parameters aKey string A key to get the ushort for. Returns Task<ushort> The stored ushort or 0 if none could be found. GetUShortAsync(string, ushort) Gets a ushort. The default implementation calls GetIntAsync(string). public virtual Task<ushort> GetUShortAsync(string aKey, ushort aDefault) Parameters aKey string A key to get the ushort for. aDefault ushort A default value to use when there is no ushort stored for the key. Returns Task<ushort> The stored ushort or aDefault. HasKeyAsync(string) Checks if there is a locally stored data for a specific key. public abstract Task<bool> HasKeyAsync(string aKey) Parameters aKey string A key to check. Returns Task<bool> True if has there is data for the key; otherwise, false. SerializeObjectAsync(string, object) Serializes an object. This method is called when the class can not store the object in any other way. The default implementation throws an exception. protected virtual Task SerializeObjectAsync(string aKey, object anObject) Parameters aKey string Key to store serializes object with anObject object Object to store Returns Task SetBoolAsync(string, bool) Stores a bool in the storage. The default implementation convert the value to a string and uses SetStringAsync(string, string) to store it. public virtual Task SetBoolAsync(string aKey, bool aValue) Parameters aKey string Key to store value for. aValue bool A value to store. Returns Task SetByteAsync(string, byte) Stores a byte in the storage. The default implementation calls SetIntAsync(string, int). public virtual Task SetByteAsync(string aKey, byte aValue) Parameters aKey string Key to store value for. aValue byte A value to store. Returns Task SetBytesAsync(string, byte[]) Stores an array of bytes to the storage. The default implementation converts the array to a base64 encoded string and uses SetStringAsync(string, string) to store it. public virtual Task SetBytesAsync(string aKey, byte[] aValue) Parameters aKey string Key to store value for aValue byte[] Array of byte to store Returns Task SetCharAsync(string, char) Stores a char in the storage. The default implementation just uses SetStringAsync(string, string) to store the value. public virtual Task SetCharAsync(string aKey, char aValue) Parameters aKey string Key to store value for. aValue char A value to store. Returns Task SetDateTimeAsync(string, DateTime) Stores a date and time using SetLongAsync(string, long) and ToBinary(). public virtual Task SetDateTimeAsync(string aKey, DateTime aValue) Parameters aKey string Key to store value for aValue DateTime Value to store Returns Task SetDoubleAsync(string, double) Stores a double number in the storage. The default implementation convert the value to a string and uses SetStringAsync(string, string) to store it. public virtual Task SetDoubleAsync(string aKey, double aValue) Parameters aKey string Key to store value for. aValue double A value to store. Returns Task SetFloatAsync(string, float) Stores a floating number in the storage. The default implementation calls SetDoubleAsync(string, double). public virtual Task SetFloatAsync(string aKey, float aValue) Parameters aKey string Key to store value for. aValue float A value to store. Returns Task SetGuidAsync(string, Guid) Stores a guid using SetBytesAsync(string, byte[]) and ToByteArray() public virtual Task SetGuidAsync(string aKey, Guid aValue) Parameters aKey string Key to store value for aValue Guid Value to store Returns Task SetIntAsync(string, int) Stores an integer in the storage. The default implementation convert the value to a string and uses SetStringAsync(string, string) to store it. public virtual Task SetIntAsync(string aKey, int aValue) Parameters aKey string Key to store value for. aValue int A value to store. Returns Task SetLongAsync(string, long) Stores a long in the storage. The default implementation convert the value to a string and uses SetStringAsync(string, string) to store it. public virtual Task SetLongAsync(string aKey, long aValue) Parameters aKey string Key to store value for. aValue long A value to store. Returns Task SetObjectAsync(string, object?) Stores an object. public Task SetObjectAsync(string aKey, object? anObject) Parameters aKey string Key to store object for anObject object Object to store Returns Task SetObjectAsync(string, object?, Type?) Stores an object to the storage. public virtual Task SetObjectAsync(string aKey, object? anObject, Type? aType) Parameters aKey string anObject object aType Type Returns Task Remarks The default implementation checks for certain type situations. If the object is null, the method will remove the data stored with the key value by calling DeleteKeyAsync(string) If the object is a primitive type, its value gets stored with one of the SetXXXX methods. If the object implements the IUFStorableObject interface the method uses SetStorableObjectAsync(string, IUFStorableObject). If the object is a DateTime the data is stored via SetDateTimeAsync(string, DateTime). If the object is a Guid the data is stored via SetGuidAsync(string, Guid). If the object is a string the method uses SetStringAsync(string, string) to store its value. If the object is a nullable value, the method will remove any value stored with aKey if the object is null else it will call itself recursively using the underlying type. If none of the above fits, the method will call SerializeObjectAsync(string, object). SetSByteAsync(string, sbyte) Stores a sbyte in the storage. The default implementation calls SetIntAsync(string, int). public virtual Task SetSByteAsync(string aKey, sbyte aValue) Parameters aKey string Key to store value for. aValue sbyte A value to store. Returns Task SetShortAsync(string, short) Stores a short in the storage. The default implementation calls SetIntAsync(string, int). public virtual Task SetShortAsync(string aKey, short aValue) Parameters aKey string Key to store value for. aValue short A value to store. Returns Task SetStorableObjectAsync(string, IUFStorableObject) Sets the data by saving it from an object that implements the IUFStorableObject interface. The default implementation uses a UFDictionaryStorage to store the data as string. public virtual Task SetStorableObjectAsync(string aKey, IUFStorableObject anObject) Parameters aKey string Key to set data for anObject IUFStorableObject Object to save to the storage Returns Task SetStringAsync(string, string) Stores a string in the storage. public abstract Task SetStringAsync(string aKey, string aValue) Parameters aKey string Key to store value for. aValue string A value to store. Returns Task SetUIntAsync(string, uint) Stores an unsigned integer in the storage. The default implementation convert the value to a string and uses SetStringAsync(string, string) to store it. public virtual Task SetUIntAsync(string aKey, uint aValue) Parameters aKey string Key to store value for. aValue uint A value to store. Returns Task SetULongAsync(string, ulong) Stores a ulong in the storage. The default implementation convert the value to a string and uses SetStringAsync(string, string) to store it. public virtual Task SetULongAsync(string aKey, ulong aValue) Parameters aKey string Key to store value for. aValue ulong A value to store. Returns Task SetUShortAsync(string, ushort) Stores a ushort in the storage. The default implementation calls SetIntAsync(string, int). public virtual Task SetUShortAsync(string aKey, ushort aValue) Parameters aKey string Key to store value for. aValue ushort A value to store. Returns Task"
  },
  "api/UltraForce.Library.NetStandard.Storage.html": {
    "href": "api/UltraForce.Library.NetStandard.Storage.html",
    "title": "Namespace UltraForce.Library.NetStandard.Storage | UltraForce.Library.NetStandard",
    "keywords": "Namespace UltraForce.Library.NetStandard.Storage Classes UFCachedStorage UFCachedStorage by caching values from another UFKeyedStorage. UFCachedStorageAsync UFCachedStorageAsync by caching values from another UFKeyedStorageAsync. UFDictionaryStorage UFDictionaryStorage extends UFKeyedStorage and stores the values into a Dictionary<TKey, TValue>. The class adds also various save and load methods. UFKeyedStorage UFKeyedStorage is a base class for storage classes that store different type of values using unique keys. UFKeyedStorageAsync UFKeyedStorageAsync is a base class for storage classes that store different type of values using unique keys. Interfaces IUFStorableObject This interface defines methods an object can implement if it can store itself to a and retrieve itself from a UFKeyedStorage IUFStorableObjectAsync This interface defines methods an object can implement if it can store itself to a and retrieve itself from a UFKeyedStorageAsync"
  },
  "api/UltraForce.Library.NetStandard.Testing.UFPropertiesComparer-1.html": {
    "href": "api/UltraForce.Library.NetStandard.Testing.UFPropertiesComparer-1.html",
    "title": "Class UFPropertiesComparer<T> | UltraForce.Library.NetStandard",
    "keywords": "Class UFPropertiesComparer<T> Namespace UltraForce.Library.NetStandard.Testing Assembly UltraForce.Library.NetStandard.dll UFPropertiesComparer<T> implements IEqualityComparer<T> by comparing all public properties of a type. Based on code from: https://stackoverflow.com/a/49825057/968451 public class UFPropertiesComparer<T> : IEqualityComparer<T> Type Parameters T Type to compare properties from Inheritance object UFPropertiesComparer<T> Implements IEqualityComparer<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UFPropertiesComparer(bool, IEnumerable<string>?) Constructs an instance of UFPropertiesComparer<T> public UFPropertiesComparer(bool aThrowException = false, IEnumerable<string>? aNotEqualProperties = null) Parameters aThrowException bool When true throw an exception with Equals(T, T) if there is a value mismatch instead of returning false. aNotEqualProperties IEnumerable<string> A list of property names that should not be equal when comparing. Methods Equals(T, T) Compare two instances of T by comparing all public properties. Properties using UFCompareIgnoreAttribute are skipped. public bool Equals(T anExpected, T anActual) Parameters anExpected T anActual T Returns bool True if all properties are equal Exceptions Exception Might be thrown depending on the constructor. GetHashCode(T) Returns a hash code for the specified object. public int GetHashCode(T aParameterValue) Parameters aParameterValue T Returns int A hash code for the specified object. Exceptions ArgumentNullException The type of obj is a reference type and obj is null."
  },
  "api/UltraForce.Library.NetStandard.Testing.html": {
    "href": "api/UltraForce.Library.NetStandard.Testing.html",
    "title": "Namespace UltraForce.Library.NetStandard.Testing | UltraForce.Library.NetStandard",
    "keywords": "Namespace UltraForce.Library.NetStandard.Testing Classes UFPropertiesComparer<T> UFPropertiesComparer<T> implements IEqualityComparer<T> by comparing all public properties of a type. Based on code from: https://stackoverflow.com/a/49825057/968451"
  },
  "api/UltraForce.Library.NetStandard.Tools.UFArrayTools.html": {
    "href": "api/UltraForce.Library.NetStandard.Tools.UFArrayTools.html",
    "title": "Class UFArrayTools | UltraForce.Library.NetStandard",
    "keywords": "Class UFArrayTools Namespace UltraForce.Library.NetStandard.Tools Assembly UltraForce.Library.NetStandard.dll Array related utility methods. public static class UFArrayTools Inheritance object UFArrayTools Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Fill<T>(T[]) Fills an array with new instances of a certain type. public static T[] Fill<T>(T[] anArray) Parameters anArray T[] Array to set items in Returns T[] Value of anArray Type Parameters T Type Remarks Type T must have a parameterless constructor. Fill<T>(T[], int, int) Fills a part of an array with new instances of a certain type. public static T[] Fill<T>(T[] anArray, int aStart, int aCount) Parameters anArray T[] Array to set items in aStart int Starting index aCount int Number of items Returns T[] Value of anArray Type Parameters T Type Remarks Type T must have a parameterless constructor. RandomItem<T>(T[]) Returns a random item from an array. public static T RandomItem<T>(T[] anArray) Parameters anArray T[] The array to get a value from. Returns T An item from the array. Type Parameters T Item type. RandomItem<T>(T[], int, int) Returns a random item from a part of an array. public static T RandomItem<T>(T[] anArray, int aStart, int aCount) Parameters anArray T[] The array to get a value from. aStart int Start index aCount int Number of elements Returns T An item from the list. Type Parameters T Item type. Shuffle<T>(T[]) Shuffles an array. public static T[] Shuffle<T>(T[] anArray) Parameters anArray T[] The array to shuffle. Returns T[] The value of the anArray parameter Type Parameters T Item type. Swap<T>(T[], int, int) Swaps two elements in an array. public static T[] Swap<T>(T[] anArray, int anIndex0, int anIndex1) Parameters anArray T[] An array to update anIndex0 int First element. anIndex1 int Second element. Returns T[] The value of the anArray parameter Type Parameters T Item type."
  },
  "api/UltraForce.Library.NetStandard.Tools.UFAssemblyTools.html": {
    "href": "api/UltraForce.Library.NetStandard.Tools.UFAssemblyTools.html",
    "title": "Class UFAssemblyTools | UltraForce.Library.NetStandard",
    "keywords": "Class UFAssemblyTools Namespace UltraForce.Library.NetStandard.Tools Assembly UltraForce.Library.NetStandard.dll Support methods for the Assembly type. public static class UFAssemblyTools Inheritance object UFAssemblyTools Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetResourceAsText(Assembly, string) Gets a resource and return as text. public static string GetResourceAsText(Assembly anAssembly, string aResourceId) Parameters anAssembly Assembly Assembly to get resource from aResourceId string ID of resource Returns string text GetTypesInNamespace(Assembly, string) Gets all types defined in a namespace. public static IEnumerable<Type> GetTypesInNamespace(Assembly anAssembly, string aNameSpace) Parameters anAssembly Assembly aNameSpace string Returns IEnumerable<Type>"
  },
  "api/UltraForce.Library.NetStandard.Tools.UFAttributeTools.html": {
    "href": "api/UltraForce.Library.NetStandard.Tools.UFAttributeTools.html",
    "title": "Class UFAttributeTools | UltraForce.Library.NetStandard",
    "keywords": "Class UFAttributeTools Namespace UltraForce.Library.NetStandard.Tools Assembly UltraForce.Library.NetStandard.dll A static class with methods related to Attribute subclasses public static class UFAttributeTools Inheritance object UFAttributeTools Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Find<T>(FieldInfo, bool) Finds an instance of a certain attribute class. public static T? Find<T>(FieldInfo anInfo, bool anInherited = true) where T : Attribute Parameters anInfo FieldInfo Field to search attribute for. anInherited bool When true search also inherited attributes. Returns T The first attribute of type T or null if none could be found. Type Parameters T A subclass of Attribute Find<T>(MethodInfo, bool) Finds an instance of a certain attribute class. public static T? Find<T>(MethodInfo anInfo, bool anInherited = true) where T : Attribute Parameters anInfo MethodInfo Method to search attribute for. anInherited bool When true search also inherited attributes. Returns T The first attribute of type T or null if none could be found. Type Parameters T A subclass of Attribute Find<T>(PropertyInfo, bool) Finds an instance of a certain attribute class. public static T? Find<T>(PropertyInfo anInfo, bool anInherited = true) where T : Attribute Parameters anInfo PropertyInfo Property to search attribute for. anInherited bool When true search also inherited attributes. Returns T The first attribute of type T or null if none could be found. Type Parameters T A subclass of Attribute Find<T>(Type, bool) Finds an instance of a certain attribute class. public static T? Find<T>(Type aType, bool anInherited = true) where T : Attribute Parameters aType Type Type to search attribute for. anInherited bool When true search also inherited attributes. Returns T The first attribute of type T or null if none could be found. Type Parameters T A subclass of Attribute"
  },
  "api/UltraForce.Library.NetStandard.Tools.UFDateTimeTools.html": {
    "href": "api/UltraForce.Library.NetStandard.Tools.UFDateTimeTools.html",
    "title": "Class UFDateTimeTools | UltraForce.Library.NetStandard",
    "keywords": "Class UFDateTimeTools Namespace UltraForce.Library.NetStandard.Tools Assembly UltraForce.Library.NetStandard.dll DateTime related utility methods. public static class UFDateTimeTools Inheritance object UFDateTimeTools Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CalcAge(DateTime, DateTime?) Calculates the age of a person based on the birth date and a reference date. public static int CalcAge(DateTime aBirthDate, DateTime? aNow = null) Parameters aBirthDate DateTime Date of birth aNow DateTime? When null, use the current UTC date and time. Returns int Age in years CalcDifferenceMonths(DateTime, DateTime, bool) Calculates the difference in months. public static int CalcDifferenceMonths(DateTime aStart, DateTime anEnd, bool anIgnoreDay = false) Parameters aStart DateTime Starting month anEnd DateTime Ending month (inclusive) anIgnoreDay bool When true ignore day, else adjust the result if the difference between days is less then a month. Returns int Number of months difference CalcNearestPeriodDateWithDays(int, DateTime, DateTime) Calculates the nearest date of a period of a certain days before a certain date. public static DateTime CalcNearestPeriodDateWithDays(int aDays, DateTime aPeriodStartDate, DateTime aDate) Parameters aDays int Number of days in period aPeriodStartDate DateTime Start date of first period aDate DateTime Date to get nearest date before Returns DateTime next date CalcNearestPeriodDateWithMonths(int, DateTime, DateTime) Calculates the nearest date of a period of a certain months before a certain date. public static DateTime CalcNearestPeriodDateWithMonths(int aMonths, DateTime aPeriodStartDate, DateTime aDate) Parameters aMonths int Number of months in period aPeriodStartDate DateTime Start date of first period aDate DateTime Date to get nearest date before Returns DateTime next date CalcNearestPeriodDateWithYears(int, DateTime, DateTime) Calculates the nearest date of a period of a certain years before a certain date. public static DateTime CalcNearestPeriodDateWithYears(int aYears, DateTime aPeriodStartDate, DateTime aDate) Parameters aYears int Number of years in period aPeriodStartDate DateTime Start date of first period aDate DateTime Date to get nearest date before Returns DateTime next date CalcNextPeriodDateWithDays(int, DateTime, DateTime) Calculates the next date of a period of a certain days. public static DateTime CalcNextPeriodDateWithDays(int aDays, DateTime aPeriodStartDate, DateTime aDate) Parameters aDays int Number of days in period aPeriodStartDate DateTime Start date of first period aDate DateTime Date to get next date on or after Returns DateTime next date CalcNextPeriodDateWithMonths(int, DateTime, DateTime) Calculates the next date of a period of a certain months. public static DateTime CalcNextPeriodDateWithMonths(int aMonths, DateTime aPeriodStartDate, DateTime aDate) Parameters aMonths int Number of months in period aPeriodStartDate DateTime Start date of first period aDate DateTime Date to get next date on or after Returns DateTime next date CalcNextPeriodDateWithYears(int, DateTime, DateTime) Calculates the next date of a period of a certain years. public static DateTime CalcNextPeriodDateWithYears(int aYears, DateTime aPeriodStartDate, DateTime aDate) Parameters aYears int Number of years in period aPeriodStartDate DateTime Start date of first period aDate DateTime Date to get next date on or after Returns DateTime next date CalcPeriodCountWithDays(int, DateTime, DateTime, DateTime) Calculates the number of periods within a date range with a certain period length in days. public static int CalcPeriodCountWithDays(int aDays, DateTime aPeriodStartDate, DateTime aStartDate, DateTime anEndDate) Parameters aDays int Number of days in period aPeriodStartDate DateTime Start date of first period aStartDate DateTime Start date of range anEndDate DateTime End date of range Returns int Number of periods CalcPeriodCountWithMonths(int, DateTime, DateTime, DateTime) Calculates the number of periods within a date range with a certain period length in months. public static int CalcPeriodCountWithMonths(int aMonths, DateTime aPeriodStartDate, DateTime aStartDate, DateTime anEndDate) Parameters aMonths int Number of months in period aPeriodStartDate DateTime Start date of first period aStartDate DateTime Start date of range anEndDate DateTime End date of range Returns int Number of periods CalcPeriodCountWithYears(int, DateTime, DateTime, DateTime) Calculates the number of periods within a date range with a certain period length in years. public static int CalcPeriodCountWithYears(int aYears, DateTime aPeriodStartDate, DateTime aStartDate, DateTime anEndDate) Parameters aYears int Number of years in period aPeriodStartDate DateTime Start date of first period aStartDate DateTime Start date of range anEndDate DateTime End date of range Returns int Number of periods EqualDate(DateTime, DateTime) Compares the date part of a DateTime type. The method checks if the year, month and day are equal. public static bool EqualDate(DateTime aDate1, DateTime aDate2) Parameters aDate1 DateTime First date to compare aDate2 DateTime Second date to compare Returns bool True if dates are equal. GetLastDayOfMonth(DateTime) Gets the last day of the month. public static int GetLastDayOfMonth(DateTime aDate) Parameters aDate DateTime Date to get last day of month for Returns int last day of the month GetMilliseconds() Gets current time/date in milliseconds, just returns GetMilliseconds(DateTime.Now) public static long GetMilliseconds() Returns long Now in milliseconds. GetMilliseconds(DateTime) Get time/date in milliseconds. public static long GetMilliseconds(DateTime aTime) Parameters aTime DateTime A time/date. Returns long aTime.Ticks in milliseconds. IsLeapYear(int) Checks if a year is a leap year. public static bool IsLeapYear(int aYear) Parameters aYear int Year to check Returns bool True if year is a leap year"
  },
  "api/UltraForce.Library.NetStandard.Tools.UFDictionaryTools.html": {
    "href": "api/UltraForce.Library.NetStandard.Tools.UFDictionaryTools.html",
    "title": "Class UFDictionaryTools | UltraForce.Library.NetStandard",
    "keywords": "Class UFDictionaryTools Namespace UltraForce.Library.NetStandard.Tools Assembly UltraForce.Library.NetStandard.dll IDictionary<TKey, TValue> related utility methods. public static class UFDictionaryTools Inheritance object UFDictionaryTools Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Dump<TKey, TValue>(IDictionary<TKey, TValue>, string) Dumps a dictionary public static string Dump<TKey, TValue>(IDictionary<TKey, TValue> aDictionary, string aSeparator = \"\\n\") Parameters aDictionary IDictionary<TKey, TValue> Dictionary to dump aSeparator string separator to use between values Returns string string in the form of 'k=v'[+ aSeparator + 'k=v' ...] Type Parameters TKey type for key TValue type for value GetValueAsBoolean<TKey, TValue>(IDictionary<TKey, TValue>?, TKey, bool) Tries to get value for a key, if not found returns a default value. Returns true if the ToString() equals \"test\" (case insensitive compare). public static bool GetValueAsBoolean<TKey, TValue>(IDictionary<TKey, TValue>? aDictionary, TKey aKey, bool aDefault) Parameters aDictionary IDictionary<TKey, TValue> A dictionary to get value from aKey TKey Key to get value for aDefault bool Default value to return if value could not be obtained Returns bool Value for the key or default value Type Parameters TKey The type for key TValue The type for value GetValueAsDouble<TKey, TValue>(IDictionary<TKey, TValue>?, TKey, double) Tries to get value for a key, if not found returns a default value. Uses the Parse(string) on the result of ToString() of the value. public static double GetValueAsDouble<TKey, TValue>(IDictionary<TKey, TValue>? aDictionary, TKey aKey, double aDefault) Parameters aDictionary IDictionary<TKey, TValue> A dictionary to get value from aKey TKey Key to get value for aDefault double Default value to return if value could not be obtained Returns double Value for the key or default value Type Parameters TKey The type for key TValue The type for value GetValueAsFloat<TKey, TValue>(IDictionary<TKey, TValue>?, TKey, float) Tries to get value for a key, if not found returns a default value. Uses the Parse(string) on the result of ToString() of the value. public static float GetValueAsFloat<TKey, TValue>(IDictionary<TKey, TValue>? aDictionary, TKey aKey, float aDefault) Parameters aDictionary IDictionary<TKey, TValue> A dictionary to get value from aKey TKey Key to get value for aDefault float Default value to return if value could not be obtained Returns float Value for the key or default value Type Parameters TKey The type for key TValue The type for value GetValueAsInt<TKey, TValue>(IDictionary<TKey, TValue>?, TKey, int) Tries to get value for a key, if not found returns a default value. Uses the Parse(string) on the result of ToString() of the value. public static int GetValueAsInt<TKey, TValue>(IDictionary<TKey, TValue>? aDictionary, TKey aKey, int aDefault) Parameters aDictionary IDictionary<TKey, TValue> A dictionary to get value from aKey TKey Key to get value for aDefault int Default value to return if value could not be obtained Returns int Value for the key or default value Type Parameters TKey The type for key TValue The type for value GetValueAsString<TKey, TValue>(IDictionary<TKey, TValue>?, TKey, string) Tries to get value for a key, if not found returns a default value. Uses ToString() to get the string from the value. public static string GetValueAsString<TKey, TValue>(IDictionary<TKey, TValue>? aDictionary, TKey aKey, string aDefault) Parameters aDictionary IDictionary<TKey, TValue> A dictionary to get value from aKey TKey Key to get value for aDefault string Default value to return if value could not be obtained Returns string Value for the key or default value Type Parameters TKey The type for key TValue The type for value GetValue<K, V>(IDictionary<K, V>, K, V) Tries to get value for a key, if not found returns a default value. public static V GetValue<K, V>(IDictionary<K, V> aDictionary, K aKey, V aDefault) Parameters aDictionary IDictionary<K, V> A dictionary to get value from aKey K Key to get value for aDefault V Default value to return if value could not be obtained Returns V Value for the key or default value Type Parameters K The type for key V The type for value Merge<TKey, TValue>(params IDictionary<TKey, TValue>?[]) Merges multiple dictionaries into a single dictionary. The first non null entry will be used to merge the others into. If multiple dictionary contain the same key, the value of the last dictionary with that key will be used. public static IDictionary<TKey, TValue>? Merge<TKey, TValue>(params IDictionary<TKey, TValue>?[] aDictionaries) Parameters aDictionaries IDictionary<TKey, TValue>[] Dictionaries to merge (can be null) Returns IDictionary<TKey, TValue> The first non null parameter with the values of all others merged into it. If all parameters are null, the method will return null. Type Parameters TKey Key type TValue Value type"
  },
  "api/UltraForce.Library.NetStandard.Tools.UFEnumTools.html": {
    "href": "api/UltraForce.Library.NetStandard.Tools.UFEnumTools.html",
    "title": "Class UFEnumTools | UltraForce.Library.NetStandard",
    "keywords": "Class UFEnumTools Namespace UltraForce.Library.NetStandard.Tools Assembly UltraForce.Library.NetStandard.dll public static class UFEnumTools Inheritance object UFEnumTools Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AsList<TEnum>() Gets all values of an enum as a List<T> public static List<TEnum> AsList<TEnum>() where TEnum : Enum Returns List<TEnum> Type Parameters TEnum FindValue(Type, int) Gets the enum value for a given integer. public static object FindValue(Type anEnumType, int aValue) Parameters anEnumType Type aValue int Returns object Enum equivalent Exceptions ArgumentException FindValue<TEnum>(int) Gets the enum value for a given integer. public static TEnum FindValue<TEnum>(int aValue) where TEnum : Enum Parameters aValue int Returns TEnum Type Parameters TEnum Random<TEnum>() Gets a random value from an enum. public static TEnum Random<TEnum>() where TEnum : Enum Returns TEnum Type Parameters TEnum TryGet<TEnum>(int, out TEnum) Tries to get an enum equivalent for a given integer. public static bool TryGet<TEnum>(int aValue, out TEnum anEnumValue) where TEnum : Enum Parameters aValue int anEnumValue TEnum Returns bool True if the integer matches an enum; false when not Type Parameters TEnum"
  },
  "api/UltraForce.Library.NetStandard.Tools.UFExceptionTools.html": {
    "href": "api/UltraForce.Library.NetStandard.Tools.UFExceptionTools.html",
    "title": "Class UFExceptionTools | UltraForce.Library.NetStandard",
    "keywords": "Class UFExceptionTools Namespace UltraForce.Library.NetStandard.Tools Assembly UltraForce.Library.NetStandard.dll Support methods for Exception public static class UFExceptionTools Inheritance object UFExceptionTools Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetInnerExceptionMessages(Exception) Checks if an exception has an inner exception, if it does return its message and call GetInnerExceptionMessages(Exception) recursively for the inner exception. public static string GetInnerExceptionMessages(Exception anException) Parameters anException Exception Exception to check Returns string the inner exception message and recursively its inner exception"
  },
  "api/UltraForce.Library.NetStandard.Tools.UFFileTools.html": {
    "href": "api/UltraForce.Library.NetStandard.Tools.UFFileTools.html",
    "title": "Class UFFileTools | UltraForce.Library.NetStandard",
    "keywords": "Class UFFileTools Namespace UltraForce.Library.NetStandard.Tools Assembly UltraForce.Library.NetStandard.dll Static support methods related to files and folders. public static class UFFileTools Inheritance object UFFileTools Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddRootPath(string, char) This method first calls UpdateSeparator(string, char) and then checks if the path specification starts with a root character and adds it if needed. public static string AddRootPath(string aPath, char aPathSeparator = '\\\\') Parameters aPath string Path to update aPathSeparator char Separator to use Returns string Path starting with separator RemoveRootPath(string) Removes forward or backward slash if it is the first character. public static string RemoveRootPath(string aPath) Parameters aPath string Path to check Returns string Updated path UpdateSeparator(string, char) Replace forward or backward slash with the opposite. public static string UpdateSeparator(string aPath, char aPathSeparator = '\\\\') Parameters aPath string Path to update aPathSeparator char Separator to use Returns string updated path ValidateFilename(string) Validates a file name. public static bool ValidateFilename(string aName) Parameters aName string name to validate Returns bool True=valid name, false=name contains invalid chars or contains folder specifications ValidateFilename(string, bool) Validates a file or folder name. public static bool ValidateFilename(string aName, bool aFileOnly) Parameters aName string name to validate aFileOnly bool When true aName should not contain path, else aName also contains path part Returns bool True=valid name, false=name contains invalid chars or starts with path separator or contains relative folder parts ValidateFilename(string, bool, bool) Validates a file or folder name. public static bool ValidateFilename(string aName, bool aFileOnly, bool aRelativeDir) Parameters aName string name to validate aFileOnly bool When true aName should not contain path, else aName also can contain path parts aRelativeDir bool When true the path part can contain '..' Returns bool True=valid name, false=name contains invalid chars or start with a path separator"
  },
  "api/UltraForce.Library.NetStandard.Tools.UFHtmlTools.html": {
    "href": "api/UltraForce.Library.NetStandard.Tools.UFHtmlTools.html",
    "title": "Class UFHtmlTools | UltraForce.Library.NetStandard",
    "keywords": "Class UFHtmlTools Namespace UltraForce.Library.NetStandard.Tools Assembly UltraForce.Library.NetStandard.dll An utility class that contains HTML related methods. public static class UFHtmlTools Inheritance object UFHtmlTools Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddProtocol(string, string) Adds a protocol to an url that starts with \"//\" or does not contain \"://\". public static string AddProtocol(string anUrl, string aProtocol = \"http\") Parameters anUrl string Url to check aProtocol string Protocol to add Returns string Url with protocol EntityToUnicode(string) Replace html entity definitions with their unicode equivalent Entity replace code based upon code from: https://github.com/Cratesmith/RestSharp-for-unity3d/blob/master/RestSharp/Extensions/MonoHttp/HtmlEncoder.cs public static string EntityToUnicode(string aText) Parameters aText string Text with entity definitions Returns string String with entities replaced NewDomId() Generates an unique id for a DOM element. public static string NewDomId() Returns string Valid dom id ToHtml(string) Convert plain text to html formatted text. It will replace special characters with their entity code and all other chars > 159 with their unicode value. It will replace \"\\n\" with \" \"; \"\\r\" characters are not copied. public static string ToHtml(string aPlainText) Parameters aPlainText string Plain text to convert Returns string Html safe text ToPlain(string) Converts an HTML formatted string to plain string by replacing br and closing p tags with \\r\\n, removing all other html tags and replacing html entities with their unicode equivalent. public static string ToPlain(string aHtmlText) Parameters aHtmlText string Html formatted string Returns string String without html tags UnicodeToEntity(string) Replace certain unicode definitions with their html entity definition public static string UnicodeToEntity(string aText) Parameters aText string Text to check Returns string String with entities"
  },
  "api/UltraForce.Library.NetStandard.Tools.UFIOTools.html": {
    "href": "api/UltraForce.Library.NetStandard.Tools.UFIOTools.html",
    "title": "Class UFIOTools | UltraForce.Library.NetStandard",
    "keywords": "Class UFIOTools Namespace UltraForce.Library.NetStandard.Tools Assembly UltraForce.Library.NetStandard.dll IO support methods. public static class UFIOTools Inheritance object UFIOTools Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ReadByteArray(BinaryReader) Gets a byte array from a reader, that was previously written to it with WriteByteArray(BinaryWriter, byte[]?). public static byte[]? ReadByteArray(BinaryReader aReader) Parameters aReader BinaryReader Reader to get data from. Returns byte[] Byte array or null WriteByteArray(BinaryWriter, byte[]?) Writes a byte array to a writer. Supports also null values. The method first writes the length and then the bytes. If aValue is null the method will write -1 as length. Use ReadByteArray(BinaryReader) to read the byte array back public static void WriteByteArray(BinaryWriter aWriter, byte[]? aValue) Parameters aWriter BinaryWriter Writer to write data to aValue byte[] Byte array or null"
  },
  "api/UltraForce.Library.NetStandard.Tools.UFJavaScriptTools.html": {
    "href": "api/UltraForce.Library.NetStandard.Tools.UFJavaScriptTools.html",
    "title": "Class UFJavaScriptTools | UltraForce.Library.NetStandard",
    "keywords": "Class UFJavaScriptTools Namespace UltraForce.Library.NetStandard.Tools Assembly UltraForce.Library.NetStandard.dll Static support methods related to JavaScript public static class UFJavaScriptTools Inheritance object UFJavaScriptTools Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetString(IEnumerable<string>) Joins the strings in aList by calling GetString(string, IEnumerable<string>?) using ', ' as separator value. public static string GetString(IEnumerable<string> aList) Parameters aList IEnumerable<string> List of strings to join Returns string javascript string specification GetString(string?) Returns a string value for use within javascript. It surrounds the text with the javascript string quotes and escapes any occurrence of the quote within aText. If aText is null the method will return \"null\" public static string GetString(string? aText) Parameters aText string Text to convert Returns string javascript string specification GetString(string, IEnumerable<string>?) Joins the strings in aList and calls GetString(string?). If aList is null, the method will return \"null\" public static string GetString(string aSeparator, IEnumerable<string>? aList) Parameters aSeparator string Separator to join with aList IEnumerable<string> List of strings to join Returns string javascript string specification GetTime(DateTime) Returns a value which can be used as Time (number of milliseconds since 1970-1-1) parameter to get the date/time in javascript. public static long GetTime(DateTime aDateTime) Parameters aDateTime DateTime DateTime value to get Time value for Returns long Time value"
  },
  "api/UltraForce.Library.NetStandard.Tools.UFJsonTools.html": {
    "href": "api/UltraForce.Library.NetStandard.Tools.UFJsonTools.html",
    "title": "Class UFJsonTools | UltraForce.Library.NetStandard",
    "keywords": "Class UFJsonTools Namespace UltraForce.Library.NetStandard.Tools Assembly UltraForce.Library.NetStandard.dll UFJsonTools can be used to create JSON formatted data. It supports IUFJsonExport. public static class UFJsonTools Inheritance object UFJsonTools Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks The code is based upon MiniJSONs code (added support for IUFJsonExport): MiniJSON Copyright (c) 2013 Calvin Rien THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Methods SaveDictionary(IDictionary) Saves an IDictionary as JSON structure. public static string SaveDictionary(IDictionary aDictionary) Parameters aDictionary IDictionary A dictionary. Returns string JSON formatted string SaveDictionary(StringBuilder, IDictionary) Adds an IDictionary as JSON object to StringBuilder. The keys are used for property names, the values as property values. public static void SaveDictionary(StringBuilder aBuilder, IDictionary aDictionary) Parameters aBuilder StringBuilder A builder to add data to. aDictionary IDictionary A dictionary to add. SaveList(IList) Saves an IList as JSON structure. public static string SaveList(IList aList) Parameters aList IList A list to add. Returns string JSON formatted string SaveList(StringBuilder, IList) Adds an IList as JSON array to StringBuilder. public static void SaveList(StringBuilder aBuilder, IList aList) Parameters aBuilder StringBuilder A builder to add data to. aList IList A list to add. SaveString(StringBuilder, string) Adds a string to StringBuilder using JON formatting. public static void SaveString(StringBuilder aBuilder, string aValue) Parameters aBuilder StringBuilder A builder to add string to. aValue string A value to add. SaveValue(object) Saves a value as JSON structure. public static string SaveValue(object aValue) Parameters aValue object A value to save. Returns string JSON formatted string SaveValue(StringBuilder, object?) Adds a value to StringBuilder using JSON formatting. This method tries to create the correct formatted JSON based on the type of aValue. The method supports objects implementing IUFJsonExport. public static void SaveValue(StringBuilder aBuilder, object? aValue) Parameters aBuilder StringBuilder A builder to add value to. aValue object A value to add."
  },
  "api/UltraForce.Library.NetStandard.Tools.UFListTools.html": {
    "href": "api/UltraForce.Library.NetStandard.Tools.UFListTools.html",
    "title": "Class UFListTools | UltraForce.Library.NetStandard",
    "keywords": "Class UFListTools Namespace UltraForce.Library.NetStandard.Tools Assembly UltraForce.Library.NetStandard.dll IList related utility methods. public static class UFListTools Inheritance object UFListTools Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Compact<T>(List<T>, Func<T, bool>) Compacts a list by removing items that do not pass a test function. public static List<T> Compact<T>(List<T> aList, Func<T, bool> aTest) Parameters aList List<T> List to compact aTest Func<T, bool> Test function Returns List<T> value of aList Type Parameters T Type of list items EqualContent<T>(IList<T>, IList<T>) Checks if two lists are equal, in that they contain the same items. The order of the items does not have to be the same. public static bool EqualContent<T>(IList<T> aFirst, IList<T> aSecond) Parameters aFirst IList<T> aSecond IList<T> Returns bool Type Parameters T FillAsync<T>(int, Func<Task<T>>) Creates a list of items by calling a factory function a number of times. public static Task<List<T>> FillAsync<T>(int aCount, Func<Task<T>> aFactory) Parameters aCount int aFactory Func<Task<T>> Returns Task<List<T>> Type Parameters T Fill<T>(IList<T>, int) Fills a list by adding a number of new instances of a certain type. public static IList<T> Fill<T>(IList<T> aList, int aCount) Parameters aList IList<T> List to add new instances to aCount int Number of new instances to add Returns IList<T> Value of aList Type Parameters T Type to add Remarks Type T must have a parameterless constructor. Fill<T>(List<T>) Fills a list by adding Capacity new instances of a certain type. public static List<T> Fill<T>(List<T> aList) Parameters aList List<T> List to add new instances to Returns List<T> Value of aList Type Parameters T Type to add Remarks Type T must have a parameterless constructor. Fill<T>(int, Func<T>) Creates a list of items by calling a factory function a number of times. public static List<T> Fill<T>(int aCount, Func<T> aFactory) Parameters aCount int aFactory Func<T> Returns List<T> Type Parameters T IndexOf<T>(IList<T>, Func<T, bool>, int) Finds the index of the first element that passes a test. public static int IndexOf<T>(IList<T> aList, Func<T, bool> aTest, int aStart = 0) Parameters aList IList<T> List to process aTest Func<T, bool> Test to pass aStart int Optional starting index Returns int Index of -1 if no item passes the test Type Parameters T RandomItem<T>(IList<T>) Returns random item from a list. public static T RandomItem<T>(IList<T> aList) Parameters aList IList<T> The list to get a value from. Returns T An item from the list. Type Parameters T Item type. RandomItem<T>(IList<T>, int, int) Returns random item from a part of a list. public static T RandomItem<T>(IList<T> aList, int aStart, int aCount) Parameters aList IList<T> The list to get a value from. aStart int Start index aCount int Number of elements Returns T An item from the list. Type Parameters T Item type. RemoveRandomItem<T>(IList<T>) Removes and returns random item from a list. public static T RemoveRandomItem<T>(IList<T> aList) Parameters aList IList<T> The list to get a value from. Returns T An item from the list (which is also removed). Type Parameters T Item type. RemoveRandomItem<T>(IList<T>, int, int) Removes and returns random item from a part of a list. public static T RemoveRandomItem<T>(IList<T> aList, int aStart, int aCount) Parameters aList IList<T> The list to get a value from. aStart int Start index aCount int Number of elements Returns T An item from the list. Type Parameters T Item type. Shuffle<T>(IList<T>) Shuffles a list. public static IList<T> Shuffle<T>(IList<T> aList) Parameters aList IList<T> The list to shuffle. Returns IList<T> The value of the anArray parameter Type Parameters T Shuffle<T>(IList<T>, int, int) Shuffles a part of a list. public static IList<T> Shuffle<T>(IList<T> aList, int aStart, int aCount) Parameters aList IList<T> The list to shuffle. aStart int Start index aCount int Number of elements Returns IList<T> The value of the anArray parameter Type Parameters T Item type. Swap<T>(IList<T>, int, int) Swaps two elements in a list. public static IList<T> Swap<T>(IList<T> aList, int anIndex0, int anIndex1) Parameters aList IList<T> An array to update anIndex0 int First element. anIndex1 int Second element. Returns IList<T> The value of the anArray parameter Type Parameters T Item type."
  },
  "api/UltraForce.Library.NetStandard.Tools.UFMath.html": {
    "href": "api/UltraForce.Library.NetStandard.Tools.UFMath.html",
    "title": "Class UFMath | UltraForce.Library.NetStandard",
    "keywords": "Class UFMath Namespace UltraForce.Library.NetStandard.Tools Assembly UltraForce.Library.NetStandard.dll Additional Math support methods. public static class UFMath Inheritance object UFMath Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ClampAngle(float, float, float) Clamps an angle within a min and max angle range. The angles are normalized via NormalizeAngle(float) . public static float ClampAngle(float aValue, float aMinAngle, float aMaxAngle) Parameters aValue float Value to limit aMinAngle float Minimum angle allowed aMaxAngle float Maximum angle allowed Returns float angle within within min and max range DistanceOnCircle(float, float) Calculates the smallest distance to travel on a circle between two angles. public static float DistanceOnCircle(float aStartAngle, float anEndAngle) Parameters aStartAngle float Starting angle anEndAngle float Ending angle Returns float Nearest distance, when traveling clockwise it will be positive. When traveling counter clock wise the value will be negative. Equal(double, double, double) Checks if two double are equal when their difference is less then a certain value. public static bool Equal(double aValue0, double aValue1, double aMaxDelta = 0.001) Parameters aValue0 double First value to compare aValue1 double Second value to compare aMaxDelta double Max difference between values to be considered equal Returns bool True if the difference between the two values is equal or less then specified maximum difference Equal(float, float, float) Checks if two double are equal when their difference is less then a certain value. public static bool Equal(float aValue0, float aValue1, float aMaxDelta = 0.001) Parameters aValue0 float First value to compare aValue1 float Second value to compare aMaxDelta float Max difference between values to be considered equal Returns bool True if the difference between the two values is equal or less then specified maximum difference GetPercentage(string) Gets the percentage value from a value that contains a % (either %xxx.xx or xxx.xx%) public static float GetPercentage(string aValue) Parameters aValue string Value to get percentage from Returns float Percentage or 0.0f if no '%' was found or value without '%' is an invalid number Max<T>(params T[]) Gets the maximum item of a list of items public static T Max<T>(params T[] anItems) where T : IComparable Parameters anItems T[] one or more item values Returns T item with the highest value Type Parameters T Type of item Min<T>(params T[]) Gets the minimum item of a list of items public static T Min<T>(params T[] anItems) where T : IComparable Parameters anItems T[] one or more item values Returns T item with the lowest value Type Parameters T Type of item MoveTo(double, double, double) Moves a value to a target with certain distance with a certain step size. If the new value surpasses the target, the target is returned. public static double MoveTo(double aCurrent, double aTarget, double aStep) Parameters aCurrent double Current value to update aTarget double Target value to reach aStep double Size of step Returns double A value closer or equal to aTarget MoveTo(int, int, int) Moves a value to a target with certain distance with a certain step size. If the new value surpasses the target, the target is returned. public static int MoveTo(int aCurrent, int aTarget, int aStep) Parameters aCurrent int Current value to update aTarget int Target value to reach aStep int Size of step Returns int A value closer or equal to aTarget MoveTo(float, float, float) Moves a value to a target with certain distance with a certain step size. If the new value surpasses the target, the target is returned. public static float MoveTo(float aCurrent, float aTarget, float aStep) Parameters aCurrent float Current value to update aTarget float Target value to reach aStep float Size of step Returns float A value closer or equal to aTarget MoveToAngle(float, float, float) Move towards an angle over a circle using the shortest distance to move over. public static float MoveToAngle(float aCurrent, float aTarget, float aStep) Parameters aCurrent float Current angle to update aTarget float Target angle to reach aStep float Distance to move with Returns float Normalized angle closer or equal to aTarget. NormalizeAngle(float) Normalizes an angle in degrees so that it always is a value between 0 and 360. public static float NormalizeAngle(float anAngle) Parameters anAngle float Angle to normalize Returns float Normalized angle NormalizeAngleAroundZero(float) Normalizes an angle in degrees so that it always is a value between -180f and 180f public static float NormalizeAngleAroundZero(float anAngle) Parameters anAngle float Angle to normalize Returns float Normalized angle"
  },
  "api/UltraForce.Library.NetStandard.Tools.UFObjectTools.html": {
    "href": "api/UltraForce.Library.NetStandard.Tools.UFObjectTools.html",
    "title": "Class UFObjectTools | UltraForce.Library.NetStandard",
    "keywords": "Class UFObjectTools Namespace UltraForce.Library.NetStandard.Tools Assembly UltraForce.Library.NetStandard.dll object related support methods. public static class UFObjectTools Inheritance object UFObjectTools Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AreEqual(object?, object?) Checks if two objects are equal. The method checks for null values and then uses Equals(object) to check for equality. public static bool AreEqual(object? anObject0, object? anObject1) Parameters anObject0 object First object to check anObject1 object Second object to check Returns bool True if both objects are null or Equals returns true. CopyProperties(object, object, Type) Copies all the public properties of a certain type of from source to a target. public static object CopyProperties(object aSource, object aTarget, Type aType) Parameters aSource object source to copy from aTarget object target to copy to aType Type the type to get property info from Returns object the value of aTarget CopyProperties(object, object, Type, ICollection<string>, bool) Copies all the public properties of a certain type of from source to a target. public static object CopyProperties(object aSource, object aTarget, Type aType, ICollection<string> aPropertyNames, bool aSkip = false) Parameters aSource object source to copy from aTarget object target to copy to aType Type the type to get property info from aPropertyNames ICollection<string> Names of properties to copy or skip aSkip bool When true then skip the properties in aPropertyNames Returns object the value of aTarget CopyProperties(object, object, Type, Func<PropertyInfo, bool>) Copies certain public properties of a certain type from a source to a target. If the type of either aSource or aTarget is not the same as aType, the method will only copy the property if both aSource and aTarget have a property with the same name. public static object CopyProperties(object aSource, object aTarget, Type aType, Func<PropertyInfo, bool> anIsValid) Parameters aSource object source to copy from aTarget object target to copy to aType Type the type to get property info from anIsValid Func<PropertyInfo, bool> a function that should return true if the property should be copied Returns object the value of aTarget CopyProperties<T>(T, T) Copies all the public properties of a source to a target. public static T CopyProperties<T>(T aSource, T aTarget) where T : notnull Parameters aSource T source to copy from aTarget T target to copy to Returns T the value of aTarget Type Parameters T the type of object CopyProperties<T>(T, T, ICollection<string>, bool) Copies all the public properties of a source to a target. public static T CopyProperties<T>(T aSource, T aTarget, ICollection<string> aPropertyNames, bool aSkip = false) where T : notnull Parameters aSource T source to copy from aTarget T target to copy to aPropertyNames ICollection<string> Names of properties to copy or skip aSkip bool When true then skip the properties in aPropertyNames Returns T the value of aTarget Type Parameters T the type of object CopyProperties<T>(T, T, Func<PropertyInfo, bool>) Copies certain public properties of a source to a target. public static T CopyProperties<T>(T aSource, T aTarget, Func<PropertyInfo, bool> anIsValid) where T : notnull Parameters aSource T Source to copy from aTarget T target to copy to anIsValid Func<PropertyInfo, bool> a function that should return true if the property should be copied Returns T the value of aTarget Type Parameters T the type of object GetOwner(object, string, char) Gets the owning object of a property using a path specification. public static object? GetOwner(object aRoot, string aPath, char aSeparator = '.') Parameters aRoot object Root object to start at aPath string Property names separated by aSeparator aSeparator char Separator character to use (default is '.') Returns object owning object or null if none could be found GetPropertyName(string, char) Gets the property name at the end of a path specification. public static string GetPropertyName(string aPath, char aSeparator = '.') Parameters aPath string Property names separated by aSeparator aSeparator char Separator character to use (default is '.') Returns string Value of last part in the path GetPropertyValue(object, string) Gets the property value of an object. The method checks if the object implements IUFAccessProperty, if it does the method will use GetPropertyValue(string) to obtain the value. Else the method uses reflection to get the value. public static object? GetPropertyValue(object anObject, string aPropertyName) Parameters anObject object Object to get the property value from aPropertyName string Name of the property Returns object Value of the property Exceptions Exception Thrown if no property with the specified name could not be found GetValue(object, string, char) Gets the property value using a path specification. public static object? GetValue(object aRoot, string aPath, char aSeparator = '.') Parameters aRoot object Root object to start at aPath string Property names separated by aSeparator aSeparator char Separator character to use (default is '.') Returns object value or null if none could be found Implements<TType, TInterface>() Checks if a type implements an interface. public static bool Implements<TType, TInterface>() Returns bool True if TType implements TInterface Type Parameters TType Type to check TInterface Interface to check SelectValue<T>(T?, T) Checks if a nullable type is null, if so return a default value else return the value converted to the underlying type. public static T SelectValue<T>(T? aValue, T aDefault) where T : struct Parameters aValue T? value to check aDefault T default value to use if aValue is null Returns T aValue converted to underlying type or aDefault if aValue is null Type Parameters T type to return SetPropertyValue(object, string, object?) Sets the property value of an object. The method checks if the object implements IUFAccessProperty, if it does the method will use SetPropertyValue(string, object?) to set the value. Else the method uses reflection to set the value. public static void SetPropertyValue(object anObject, string aPropertyName, object? aValue) Parameters anObject object Object to set the property value at aPropertyName string Name of the property aValue object Value to set Exceptions Exception Thrown if no property with the specified name could not be found Swap<T>(ref T, ref T) Swaps two object values. public static void Swap<T>(ref T anObject0, ref T anObject1) Parameters anObject0 T First object to swap anObject1 T Second object to swap Type Parameters T Type of objects"
  },
  "api/UltraForce.Library.NetStandard.Tools.UFProgressTools.html": {
    "href": "api/UltraForce.Library.NetStandard.Tools.UFProgressTools.html",
    "title": "Class UFProgressTools | UltraForce.Library.NetStandard",
    "keywords": "Class UFProgressTools Namespace UltraForce.Library.NetStandard.Tools Assembly UltraForce.Library.NetStandard.dll Support methods for progress. public static class UFProgressTools Inheritance object UFProgressTools Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetProgress(object, double) Checks if an object implements the IUFProgress and calls the appropriate method. public static double GetProgress(object anObject, double aDefault = 0) Parameters anObject object Object to get progress from aDefault double Value to use if the object does not implement IUFProgress. Returns double Result from Progress or aDefault if anObject does not implement the specified interface. GetProgressWeight(object, double) Checks if an object implements the IUFWeightedProgress and calls the appropriate method. public static double GetProgressWeight(object anObject, double aDefault = 1) Parameters anObject object Object to get progress weight from aDefault double Value to use if the object does not implement IUFWeightedProgress. Returns double Result from ProgressWeight or aDefault if anObject does not implement the specified interface."
  },
  "api/UltraForce.Library.NetStandard.Tools.UFRandomTools.html": {
    "href": "api/UltraForce.Library.NetStandard.Tools.UFRandomTools.html",
    "title": "Class UFRandomTools | UltraForce.Library.NetStandard",
    "keywords": "Class UFRandomTools Namespace UltraForce.Library.NetStandard.Tools Assembly UltraForce.Library.NetStandard.dll UFRandomTools defines static methods to obtain a random value of certain kind. It maps the methods to an internally managed Random instance. public static class UFRandomTools Inheritance object UFRandomTools Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Next() Returns the next random integer. public static int Next() Returns int Random integer. Next(int) Returns the next random integer. public static int Next(int aMax) Parameters aMax int The maximum value (exclusive). Returns int Random integer. NextBytes(byte[]) Fills a buffer with random bytes. public static void NextBytes(byte[] aBuffer) Parameters aBuffer byte[] A buffer to fill. NextDouble() Returns the next random double. public static double NextDouble() Returns double Random double. NextFloat() Returns the next random float. public static float NextFloat() Returns float Random float. Range(int, int) Returns a random integer within a range. public static int Range(int aMin, int aMax) Parameters aMin int The minimum value (inclusive). aMax int The maximum value (exclusive). Returns int A random integer >= aMin and < aMax"
  },
  "api/UltraForce.Library.NetStandard.Tools.UFReflectionTools.html": {
    "href": "api/UltraForce.Library.NetStandard.Tools.UFReflectionTools.html",
    "title": "Class UFReflectionTools | UltraForce.Library.NetStandard",
    "keywords": "Class UFReflectionTools Namespace UltraForce.Library.NetStandard.Tools Assembly UltraForce.Library.NetStandard.dll Support methods for Type. public static class UFReflectionTools Inheritance object UFReflectionTools Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks Based on code from: https://stackoverflow.com/a/35370385/968451 When using this class with Unity 3D, it is faster just to query the Type with the correct GetXXXX method. Methods CopyProperty(PropertyInfo, PropertyInfo, object, object) Copies a property value. The method handles the following: null values with nullable strings copied to a non-nullable string are replaced by \"\" enum values are copied to integers and vice versa (including support for nullable fields) public static void CopyProperty(PropertyInfo aSourceProperty, PropertyInfo aTargetProperty, object aSource, object aTarget) Parameters aSourceProperty PropertyInfo aTargetProperty PropertyInfo aSource object aTarget object GetAllConstructors(Type) Gets all constructors for the current type and parent types. public static IEnumerable<ConstructorInfo> GetAllConstructors(Type aType) Parameters aType Type Type to get constructors for Returns IEnumerable<ConstructorInfo> All constructors GetAllEvents(Type) Gets all events for the current type and parent types. public static IEnumerable<EventInfo> GetAllEvents(Type aType) Parameters aType Type Type to get events for Returns IEnumerable<EventInfo> All events GetAllFields(Type) Gets all fields for the current type and parent types. public static IEnumerable<FieldInfo> GetAllFields(Type aType) Parameters aType Type Type to get fields for Returns IEnumerable<FieldInfo> All fields GetAllMembers(Type) Gets all members for the current type and parent types. public static IEnumerable<MemberInfo> GetAllMembers(Type aType) Parameters aType Type Type to get members for Returns IEnumerable<MemberInfo> All members GetAllMethods(Type) Gets all methods for the current type and parent types. public static IEnumerable<MethodInfo> GetAllMethods(Type aType) Parameters aType Type Type to get methods for Returns IEnumerable<MethodInfo> All methods GetAllMethods(Type, string) Gets all methods of a certain name for the current type and parent types. The first method will be from the type, the last method from the last base class implementing the method itself. public static IEnumerable<MethodInfo> GetAllMethods(Type aType, string aMethodName) Parameters aType Type Type to get methods for aMethodName string Name of method Returns IEnumerable<MethodInfo> All methods of the specified name GetAllNestedTypes(Type) Gets all nested types for the current type and parent types. public static IEnumerable<TypeInfo> GetAllNestedTypes(Type aType) Parameters aType Type Type to get nested types for Returns IEnumerable<TypeInfo> All nested types GetAllProperties(Type) Gets all properties for the current type and parent types. public static IEnumerable<PropertyInfo> GetAllProperties(Type aType) Parameters aType Type Type to get properties for Returns IEnumerable<PropertyInfo> All properties GetEnumType(PropertyInfo) Gets the enum type of a property. When the property is nullable, it returns the underlying type. public static Type? GetEnumType(PropertyInfo aProperty) Parameters aProperty PropertyInfo Returns Type Enum type or null if property is not a (nullable) enum. IsNumeric(Type, bool) Checks if a type is numeric. Code based on: https://stackoverflow.com/a/33776103/968451 public static bool IsNumeric(Type aType, bool anIncludeNullable = true) Parameters aType Type Type to check anIncludeNullable bool When true also check for nullable versions of the type Returns bool true if type is numeric IsNumericType<T>(T) Checks if the type of a value is numeric. This method just calls IsNumeric(Type, bool) with the type of the parameter. public static bool IsNumericType<T>(T aValue) Parameters aValue T Value to check its type of Returns bool true if aValue is numeric Type Parameters T Type of the value"
  },
  "api/UltraForce.Library.NetStandard.Tools.UFServiceCollectionTools.UFServiceCollectionHelper.html": {
    "href": "api/UltraForce.Library.NetStandard.Tools.UFServiceCollectionTools.UFServiceCollectionHelper.html",
    "title": "Class UFServiceCollectionTools.UFServiceCollectionHelper | UltraForce.Library.NetStandard",
    "keywords": "Class UFServiceCollectionTools.UFServiceCollectionHelper Namespace UltraForce.Library.NetStandard.Tools Assembly UltraForce.Library.NetStandard.dll A helper class with various registration methods. Each registration method returns the instance, allowing for chaining of registration calls. public class UFServiceCollectionTools.UFServiceCollectionHelper Inheritance object UFServiceCollectionTools.UFServiceCollectionHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Register(Assembly, string) Registers all types in a namespace in an assembly. public UFServiceCollectionTools.UFServiceCollectionHelper Register(Assembly anAssembly, string aNameSpace) Parameters anAssembly Assembly Assembly to get types from aNameSpace string Name space to get types from Returns UFServiceCollectionTools.UFServiceCollectionHelper Register(params Type[]) Registers multiple types (both as service and provider implementing the service). The method checks if type is not registered before registering it. public UFServiceCollectionTools.UFServiceCollectionHelper Register(params Type[] aTypes) Parameters aTypes Type[] One or more types to register Returns UFServiceCollectionTools.UFServiceCollectionHelper RegisterSingleton(params Type[]) Registers multiple types (both as service and singleton provider implementing the service). public UFServiceCollectionTools.UFServiceCollectionHelper RegisterSingleton(params Type[] aTypes) Parameters aTypes Type[] One or more types to register Returns UFServiceCollectionTools.UFServiceCollectionHelper RegisterSingleton<TService>() Registers a singleton service type. The first time the service is requested by a parameter an instance is created. This instance is reused whenever a parameter requests the same service. public UFServiceCollectionTools.UFServiceCollectionHelper RegisterSingleton<TService>() where TService : class Returns UFServiceCollectionTools.UFServiceCollectionHelper Type Parameters TService Service type to register both as service and provider. RegisterSingleton<TService>(TService) Registers a singleton instance for a service type. Whenever a parameter request the service, the instance will be used. public UFServiceCollectionTools.UFServiceCollectionHelper RegisterSingleton<TService>(TService anInstance) where TService : notnull Parameters anInstance TService Provider instance implementing the service Returns UFServiceCollectionTools.UFServiceCollectionHelper Type Parameters TService Service type to register RegisterSingleton<TService, TProvider>() Registers a singleton provider type for a certain service type. The first time the service is requested by a parameter an instance is created. This is instance is reused whenever a parameter requests the same service. public UFServiceCollectionTools.UFServiceCollectionHelper RegisterSingleton<TService, TProvider>() where TProvider : class, TService Returns UFServiceCollectionTools.UFServiceCollectionHelper Type Parameters TService service type to register provider type for TProvider provider type to register Register<TService>() Registers a service that also implements itself. A new instance will be created every time a parameter uses that type. public UFServiceCollectionTools.UFServiceCollectionHelper Register<TService>() where TService : class Returns UFServiceCollectionTools.UFServiceCollectionHelper Type Parameters TService Service type register Register<TService, TProvider>() Registers a class provider type for a certain service type. A new instance will be created every time a parameter uses the service type. public UFServiceCollectionTools.UFServiceCollectionHelper Register<TService, TProvider>() where TProvider : class, TService Returns UFServiceCollectionTools.UFServiceCollectionHelper Type Parameters TService Service type to register class type for TProvider Provider type to register Remarks TService may also refer to a subclass of TProvider."
  },
  "api/UltraForce.Library.NetStandard.Tools.UFServiceCollectionTools.html": {
    "href": "api/UltraForce.Library.NetStandard.Tools.UFServiceCollectionTools.html",
    "title": "Class UFServiceCollectionTools | UltraForce.Library.NetStandard",
    "keywords": "Class UFServiceCollectionTools Namespace UltraForce.Library.NetStandard.Tools Assembly UltraForce.Library.NetStandard.dll Support methods for IUFServiceCollection and IServiceProvider providing generic versions of various methods. public static class UFServiceCollectionTools Inheritance object UFServiceCollectionTools Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CallMethod(object, MethodInfo, IServiceProvider) Calls a method, assuming its parameters are either service types or have a default value. public static object CallMethod(object anInstance, MethodInfo aMethod, IServiceProvider aProvider) Parameters anInstance object Instance to call method with aMethod MethodInfo Method to call aProvider IServiceProvider Service provider Returns object result from call CallMethod(object, string, IServiceProvider) Calls a method of a certain name, assuming its parameters are either service types or have a default value. public static object CallMethod(object anInstance, string aMethodName, IServiceProvider aProvider) Parameters anInstance object Instance to call method with aMethodName string Name of method to call aProvider IServiceProvider Service provider Returns object result from call CallMethods(object, string, IServiceProvider) Calls all methods of a certain name, assuming their parameters are either service types or have a default value. This method will call all methods from the instance and its parent classes starting at the base class and ending with anInstance. public static void CallMethods(object anInstance, string aMethodName, IServiceProvider aProvider) Parameters anInstance object Instance to call method with aMethodName string Name of method to call aProvider IServiceProvider Service provider GetArguments(IServiceProvider, ParameterInfo[]) Processes a list of parameters and tries to create argument values for them by resolving them as a service or else using their default value. public static object[] GetArguments(IServiceProvider aProvider, ParameterInfo[] aParameters) Parameters aProvider IServiceProvider Service provider to use aParameters ParameterInfo[] Parameters to resolve Returns object[] argument values Exceptions Exception Thrown if a parameter type is not a known service and the parameter has no default value. GetService<TService>(IServiceProvider) Gets a service instance for a specific type. public static TService? GetService<TService>(IServiceProvider aProvider) Parameters aProvider IServiceProvider Provider of services Returns TService instance of T or null if the service is not known Type Parameters TService Type to get service for ProcessInjects(object, IServiceProvider) Processes all methods, properties and fields in an instance. Methods annotated with the UFInjectAttribute will be invoked via CallMethod(object, MethodInfo, IServiceProvider). Properties and fields annotated with UFInjectAttribute will be assigned a value from aProvider using their type to get a service instance. public static void ProcessInjects(object anInstance, IServiceProvider aProvider) Parameters anInstance object Instance to process aProvider IServiceProvider Provider to get service instances from Exceptions Exception Thrown if a readonly property has been annotated with UFInjectAttribute With(IUFServiceCollection) Returns a helper to register various bindings using generics. public static UFServiceCollectionTools.UFServiceCollectionHelper With(IUFServiceCollection aCollection) Parameters aCollection IUFServiceCollection Collection to register at Returns UFServiceCollectionTools.UFServiceCollectionHelper A helper to register various binding"
  },
  "api/UltraForce.Library.NetStandard.Tools.UFStringTools.html": {
    "href": "api/UltraForce.Library.NetStandard.Tools.UFStringTools.html",
    "title": "Class UFStringTools | UltraForce.Library.NetStandard",
    "keywords": "Class UFStringTools Namespace UltraForce.Library.NetStandard.Tools Assembly UltraForce.Library.NetStandard.dll An utility class that adds extra string related methods. public static class UFStringTools Inheritance object UFStringTools Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Add(string?, string?, string) Adds a string to the end of a string. Use a separator if the string being added to is not empty. public static string Add(string? aSource, string? aValue, string aSeparator = \", \") Parameters aSource string String to add to aValue string String to add aSeparator string Separator to use if aSource is not empty Returns string [aSource + aSeparator] + aValue CodeFromGuid() Creates an unique code by converting a new guid to a hex string. public static string CodeFromGuid() Returns string Unique code based on a guid CodeFromGuid(Guid) Converts a Guid to a hex string. public static string CodeFromGuid(Guid aGuid) Parameters aGuid Guid Guid to convert Returns string Unique code based on a guid Count(char, string, bool) Count the number of occurrences of a character inside another string public static int Count(char aValue, string aText, bool aCaseInsensitive = false) Parameters aValue char A char value to count aText string A string to count in aCaseInsensitive bool true, ignore casing; false, differentiate between lower- and uppercase. Returns int Number of occurrences Count(string, string, bool) Count the number of occurrences of a character inside another string public static int Count(string aValue, string aText, bool aCaseInsensitive = false) Parameters aValue string A char value to count aText string A string to count in aCaseInsensitive bool true, ignore casing; false, differentiate between lower- and uppercase. Returns int Number of occurrences or -1 if aValue is empty GenerateCode(int) Generates a code existing of a random sequence of upper and lowercase letters and numbers. public static string GenerateCode(int aLength) Parameters aLength int Size of the generated code Returns string a random code of aLength characters Remarks The code makes sure every 3rd char is a numeric value (to prevent offensive words). Also the code will not contain any zero, uppercase o, one and lowercase l characters since these might look similar with certain fonts. GenerateCode(int, string) Generates a code using a custom alphabet. public static string GenerateCode(int aLength, string anAlphabet) Parameters aLength int Number of digits anAlphabet string Alphabet to get characters from Returns string A code of aLength characters existing of random characters from anAlphabet GenerateNumericCode(int) Generates a numeric code. The method makes sure the first digit is not 0. public static string GenerateNumericCode(int aLength) Parameters aLength int Number of digits Returns string A code of aLength characters existing of characters '0' - '9' GenerateTextCode(int) Generates a code existing of a random sequence of upper and lowercase letters. public static string GenerateTextCode(int aLength) Parameters aLength int Size of the generated code Returns string a random code of aLength characters Remarks The code will not contain any uppercase o and lowercase l characters since these might look similar with certain fonts. GetHexString(byte[]) Create an hexadecimal representation of a byte array. public static string GetHexString(byte[] aBytes) Parameters aBytes byte[] An array of bytes to convert to string. Returns string The bytes as hexadecimal string. Remarks The method will return uppercase A..F characters. GetHexString(byte[], char[]) Converts a byte array to a hexadecimal presentation. public static string GetHexString(byte[] aBytes, char[] aNibbleMap) Parameters aBytes byte[] Bytes to convert aNibbleMap char[] Maps nibbles (0..15) to character equivalent Returns string A string containing a textual representation of the array GetLowerCaseHexString(byte[]) Create an hexadecimal representation of a byte array. public static string GetLowerCaseHexString(byte[] aBytes) Parameters aBytes byte[] An array of bytes to convert to string. Returns string The bytes as hexadecimal string. Remarks The method will return lowercase a..f characters. HasUniqueCharacters(string) Checks if a string is made up of unique characters. public static bool HasUniqueCharacters(string aText) Parameters aText string Text to check Returns bool true if all characters only occur once Join<T>(IEnumerable<T>, string) Joins the values of an enumerable type by using object and joining them using Add(string?, string?, string). public static string Join<T>(IEnumerable<T> anEnumerable, string aSeparator = \", \") where T : notnull Parameters anEnumerable IEnumerable<T> Enumerable to combine into one string aSeparator string Text to use separator between each value Returns string A string with all values joined together Type Parameters T Enumerable type NormalizeEmail(string) Creates a normalized version of an email, which can be used with case insensitive comparisons. public static string NormalizeEmail(string anEmail) Parameters anEmail string Returns string NormalizeName(string) Creates a normalized version of a name, which can be used with case insensitive comparisons. public static string NormalizeName(string aName) Parameters aName string Returns string Replace(string?, IDictionary<string, string>?) Replaces all keys with their value in a string. public static string? Replace(string? anOriginal, IDictionary<string, string>? aMapping) Parameters anOriginal string string to update, when it is null the method just returns null. aMapping IDictionary<string, string> keys and values, when it is null the method just returns the value of anOriginal. Returns string updated string SelectString(params string?[]?) Checks the string and returns the first one that is not null and not empty. If all texts fail, return Empty. public static string SelectString(params string?[]? aTexts) Parameters aTexts string[] Texts to check to check Returns string One of the values from aTexts or Empty"
  },
  "api/UltraForce.Library.NetStandard.Tools.UFSystemTools.html": {
    "href": "api/UltraForce.Library.NetStandard.Tools.UFSystemTools.html",
    "title": "Class UFSystemTools | UltraForce.Library.NetStandard",
    "keywords": "Class UFSystemTools Namespace UltraForce.Library.NetStandard.Tools Assembly UltraForce.Library.NetStandard.dll Static support class for System. public static class UFSystemTools Inheritance object UFSystemTools Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods TriggerGarbageCollector() Triggers the garbage collector, waits for any pending finalizers and then triggers the garbage collector again. public static void TriggerGarbageCollector() Remarks Code based on: https://www.codeproject.com/Articles/738109/The-NET-weak-event-pattern-in-Csharp"
  },
  "api/UltraForce.Library.NetStandard.Tools.UFZipTools.html": {
    "href": "api/UltraForce.Library.NetStandard.Tools.UFZipTools.html",
    "title": "Class UFZipTools | UltraForce.Library.NetStandard",
    "keywords": "Class UFZipTools Namespace UltraForce.Library.NetStandard.Tools Assembly UltraForce.Library.NetStandard.dll Support methods for ZipFile. public static class UFZipTools Inheritance object UFZipTools Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddTextAsync(ZipArchive, string, IEnumerable<string>) Adds an entry to the archive using text data. public static Task AddTextAsync(ZipArchive anArchive, string aFilename, IEnumerable<string> aLines) Parameters anArchive ZipArchive aFilename string aLines IEnumerable<string> Returns Task AddTextAsync(ZipArchive, string, string) Adds an entry to the archive using text data. public static Task AddTextAsync(ZipArchive anArchive, string aFilename, string aText) Parameters anArchive ZipArchive aFilename string aText string Returns Task"
  },
  "api/UltraForce.Library.NetStandard.Tools.html": {
    "href": "api/UltraForce.Library.NetStandard.Tools.html",
    "title": "Namespace UltraForce.Library.NetStandard.Tools | UltraForce.Library.NetStandard",
    "keywords": "Namespace UltraForce.Library.NetStandard.Tools Classes UFArrayTools Array related utility methods. UFAssemblyTools Support methods for the Assembly type. UFAttributeTools A static class with methods related to Attribute subclasses UFDateTimeTools DateTime related utility methods. UFDictionaryTools IDictionary<TKey, TValue> related utility methods. UFEnumTools UFExceptionTools Support methods for Exception UFFileTools Static support methods related to files and folders. UFHtmlTools An utility class that contains HTML related methods. UFIOTools IO support methods. UFJavaScriptTools Static support methods related to JavaScript UFJsonTools UFJsonTools can be used to create JSON formatted data. It supports IUFJsonExport. UFListTools IList related utility methods. UFMath Additional Math support methods. UFObjectTools object related support methods. UFProgressTools Support methods for progress. UFRandomTools UFRandomTools defines static methods to obtain a random value of certain kind. It maps the methods to an internally managed Random instance. UFReflectionTools Support methods for Type. UFServiceCollectionTools Support methods for IUFServiceCollection and IServiceProvider providing generic versions of various methods. UFServiceCollectionTools.UFServiceCollectionHelper A helper class with various registration methods. Each registration method returns the instance, allowing for chaining of registration calls. UFStringTools An utility class that adds extra string related methods. UFSystemTools Static support class for System. UFZipTools Support methods for ZipFile."
  },
  "index.html": {
    "href": "index.html",
    "title": "| UltraForce.Library.NetStandard",
    "keywords": ""
  }
}